"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
from .. import rcon
from .. import state
import sys
import typing
if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _RemoteControlRequestType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _RemoteControlRequestTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RemoteControlRequestType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    UNKNOWN_REQUEST_TYPE: _RemoteControlRequestType.ValueType
    EMERGENCY_STOP: _RemoteControlRequestType.ValueType
    ROBOT_SUBSTITUTION: _RemoteControlRequestType.ValueType
    TIMEOUT: _RemoteControlRequestType.ValueType
    CHALLENGE_FLAG: _RemoteControlRequestType.ValueType
    CHANGE_KEEPER_ID: _RemoteControlRequestType.ValueType
    STOP_TIMEOUT: _RemoteControlRequestType.ValueType
    FAIL_BALLPLACEMENT: _RemoteControlRequestType.ValueType

class RemoteControlRequestType(_RemoteControlRequestType, metaclass=_RemoteControlRequestTypeEnumTypeWrapper):
    """All possible request types that the remote control can make"""
UNKNOWN_REQUEST_TYPE: RemoteControlRequestType.ValueType
EMERGENCY_STOP: RemoteControlRequestType.ValueType
ROBOT_SUBSTITUTION: RemoteControlRequestType.ValueType
TIMEOUT: RemoteControlRequestType.ValueType
CHALLENGE_FLAG: RemoteControlRequestType.ValueType
CHANGE_KEEPER_ID: RemoteControlRequestType.ValueType
STOP_TIMEOUT: RemoteControlRequestType.ValueType
FAIL_BALLPLACEMENT: RemoteControlRequestType.ValueType
global___RemoteControlRequestType = RemoteControlRequestType

@typing.final
class RemoteControlRegistration(google.protobuf.message.Message):
    """a registration that must be send by the remote control to the controller as the very first message"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TEAM_FIELD_NUMBER: builtins.int
    SIGNATURE_FIELD_NUMBER: builtins.int
    team: state.ssl_gc_common_pb2.Team.ValueType
    'the team to be controlled'

    @property
    def signature(self) -> rcon.ssl_gc_rcon_pb2.Signature:
        """signature can optionally be specified to enable secure communication"""

    def __init__(self, *, team: state.ssl_gc_common_pb2.Team.ValueType | None=..., signature: rcon.ssl_gc_rcon_pb2.Signature | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['signature', b'signature', 'team', b'team']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['signature', b'signature', 'team', b'team']) -> None:
        ...
global___RemoteControlRegistration = RemoteControlRegistration

@typing.final
class RemoteControlToController(google.protobuf.message.Message):
    """wrapper for all messages from the remote control to the controller"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Request:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _RequestEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RemoteControlToController._Request.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: RemoteControlToController._Request.ValueType
        PING: RemoteControlToController._Request.ValueType
        'Ping the GC to test the connection. The GC will respond with OK and the current team state'
        CHALLENGE_FLAG: RemoteControlToController._Request.ValueType
        'Raise a challenge flag (this is not revocable)'
        STOP_TIMEOUT: RemoteControlToController._Request.ValueType
        'Stop an ongoing timeout'
        FAIL_BALLPLACEMENT: RemoteControlToController._Request.ValueType
        'Fail a ball placement'

    class Request(_Request, metaclass=_RequestEnumTypeWrapper):
        ...
    UNKNOWN: RemoteControlToController.Request.ValueType
    PING: RemoteControlToController.Request.ValueType
    'Ping the GC to test the connection. The GC will respond with OK and the current team state'
    CHALLENGE_FLAG: RemoteControlToController.Request.ValueType
    'Raise a challenge flag (this is not revocable)'
    STOP_TIMEOUT: RemoteControlToController.Request.ValueType
    'Stop an ongoing timeout'
    FAIL_BALLPLACEMENT: RemoteControlToController.Request.ValueType
    'Fail a ball placement'
    SIGNATURE_FIELD_NUMBER: builtins.int
    REQUEST_FIELD_NUMBER: builtins.int
    DESIRED_KEEPER_FIELD_NUMBER: builtins.int
    REQUEST_ROBOT_SUBSTITUTION_FIELD_NUMBER: builtins.int
    REQUEST_TIMEOUT_FIELD_NUMBER: builtins.int
    REQUEST_EMERGENCY_STOP_FIELD_NUMBER: builtins.int
    request: global___RemoteControlToController.Request.ValueType
    'send a request to the GC'
    desired_keeper: builtins.int
    'request a new desired keeper id'
    request_robot_substitution: builtins.bool
    'true: request to substitute a robot at the next possibility\n    false: cancel request\n    '
    request_timeout: builtins.bool
    'true: request a timeout with the next stoppage\n    false: cancel the request\n    '
    request_emergency_stop: builtins.bool
    'true: initiate an emergency stop\n    false: cancel the request\n    '

    @property
    def signature(self) -> rcon.ssl_gc_rcon_pb2.Signature:
        """signature can optionally be specified to enable secure communication"""

    def __init__(self, *, signature: rcon.ssl_gc_rcon_pb2.Signature | None=..., request: global___RemoteControlToController.Request.ValueType | None=..., desired_keeper: builtins.int | None=..., request_robot_substitution: builtins.bool | None=..., request_timeout: builtins.bool | None=..., request_emergency_stop: builtins.bool | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['desired_keeper', b'desired_keeper', 'msg', b'msg', 'request', b'request', 'request_emergency_stop', b'request_emergency_stop', 'request_robot_substitution', b'request_robot_substitution', 'request_timeout', b'request_timeout', 'signature', b'signature']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['desired_keeper', b'desired_keeper', 'msg', b'msg', 'request', b'request', 'request_emergency_stop', b'request_emergency_stop', 'request_robot_substitution', b'request_robot_substitution', 'request_timeout', b'request_timeout', 'signature', b'signature']) -> None:
        ...

    def WhichOneof(self, oneof_group: typing.Literal['msg', b'msg']) -> typing.Literal['request', 'desired_keeper', 'request_robot_substitution', 'request_timeout', 'request_emergency_stop'] | None:
        ...
global___RemoteControlToController = RemoteControlToController

@typing.final
class ControllerToRemoteControl(google.protobuf.message.Message):
    """wrapper for all messages from controller to a team's computer"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CONTROLLER_REPLY_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int

    @property
    def controller_reply(self) -> rcon.ssl_gc_rcon_pb2.ControllerReply:
        """a reply from the controller"""

    @property
    def state(self) -> global___RemoteControlTeamState:
        """current team state"""

    def __init__(self, *, controller_reply: rcon.ssl_gc_rcon_pb2.ControllerReply | None=..., state: global___RemoteControlTeamState | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['controller_reply', b'controller_reply', 'state', b'state']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['controller_reply', b'controller_reply', 'state', b'state']) -> None:
        ...
global___ControllerToRemoteControl = ControllerToRemoteControl

@typing.final
class RemoteControlTeamState(google.protobuf.message.Message):
    """Current team state from Controller for remote control"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TEAM_FIELD_NUMBER: builtins.int
    AVAILABLE_REQUESTS_FIELD_NUMBER: builtins.int
    ACTIVE_REQUESTS_FIELD_NUMBER: builtins.int
    KEEPER_ID_FIELD_NUMBER: builtins.int
    EMERGENCY_STOP_IN_FIELD_NUMBER: builtins.int
    TIMEOUTS_LEFT_FIELD_NUMBER: builtins.int
    TIMEOUT_TIME_LEFT_FIELD_NUMBER: builtins.int
    CHALLENGE_FLAGS_LEFT_FIELD_NUMBER: builtins.int
    MAX_ROBOTS_FIELD_NUMBER: builtins.int
    ROBOTS_ON_FIELD_FIELD_NUMBER: builtins.int
    YELLOW_CARDS_DUE_FIELD_NUMBER: builtins.int
    CAN_SUBSTITUTE_ROBOT_FIELD_NUMBER: builtins.int
    BOT_SUBSTITUTIONS_LEFT_FIELD_NUMBER: builtins.int
    BOT_SUBSTITUTION_TIME_LEFT_FIELD_NUMBER: builtins.int
    team: state.ssl_gc_common_pb2.Team.ValueType
    'the team that is controlled'
    keeper_id: builtins.int
    'currently set keeper id'
    emergency_stop_in: builtins.float
    'number of seconds till emergency stop is executed\n    zero, if no emergency stop requested\n    '
    timeouts_left: builtins.int
    'number of timeouts left for the team'
    timeout_time_left: builtins.float
    'number of seconds left for timeout for the team'
    challenge_flags_left: builtins.int
    'number of challenge flags left for the team'
    max_robots: builtins.int
    'max number of robots currently allowed'
    robots_on_field: builtins.int
    'current number of robots visible on field'
    can_substitute_robot: builtins.bool
    'if true, team is allowed to substitute robots'
    bot_substitutions_left: builtins.int
    'number of bot substitutions left by the team in this halftime'
    bot_substitution_time_left: builtins.float
    'number of seconds left for current bot substitution'

    @property
    def available_requests(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___RemoteControlRequestType.ValueType]:
        """list of all currently available request types that can be made"""

    @property
    def active_requests(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___RemoteControlRequestType.ValueType]:
        """list of all currently active request types that are pending"""

    @property
    def yellow_cards_due(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """list of due times for each active yellow card (in seconds)"""

    def __init__(self, *, team: state.ssl_gc_common_pb2.Team.ValueType | None=..., available_requests: collections.abc.Iterable[global___RemoteControlRequestType.ValueType] | None=..., active_requests: collections.abc.Iterable[global___RemoteControlRequestType.ValueType] | None=..., keeper_id: builtins.int | None=..., emergency_stop_in: builtins.float | None=..., timeouts_left: builtins.int | None=..., timeout_time_left: builtins.float | None=..., challenge_flags_left: builtins.int | None=..., max_robots: builtins.int | None=..., robots_on_field: builtins.int | None=..., yellow_cards_due: collections.abc.Iterable[builtins.float] | None=..., can_substitute_robot: builtins.bool | None=..., bot_substitutions_left: builtins.int | None=..., bot_substitution_time_left: builtins.float | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['bot_substitution_time_left', b'bot_substitution_time_left', 'bot_substitutions_left', b'bot_substitutions_left', 'can_substitute_robot', b'can_substitute_robot', 'challenge_flags_left', b'challenge_flags_left', 'emergency_stop_in', b'emergency_stop_in', 'keeper_id', b'keeper_id', 'max_robots', b'max_robots', 'robots_on_field', b'robots_on_field', 'team', b'team', 'timeout_time_left', b'timeout_time_left', 'timeouts_left', b'timeouts_left']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['active_requests', b'active_requests', 'available_requests', b'available_requests', 'bot_substitution_time_left', b'bot_substitution_time_left', 'bot_substitutions_left', b'bot_substitutions_left', 'can_substitute_robot', b'can_substitute_robot', 'challenge_flags_left', b'challenge_flags_left', 'emergency_stop_in', b'emergency_stop_in', 'keeper_id', b'keeper_id', 'max_robots', b'max_robots', 'robots_on_field', b'robots_on_field', 'team', b'team', 'timeout_time_left', b'timeout_time_left', 'timeouts_left', b'timeouts_left', 'yellow_cards_due', b'yellow_cards_due']) -> None:
        ...
global___RemoteControlTeamState = RemoteControlTeamState