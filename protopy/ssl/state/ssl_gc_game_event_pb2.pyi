"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
from .. import geom
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
from .. import state
import sys
import typing
if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class GameEvent(google.protobuf.message.Message):
    """GameEvent contains exactly one game event
    Each game event has optional and required fields. The required fields are mandatory to process the event.
    Some optional fields are only used for visualization, others are required to determine the ball placement position.
    If fields are missing that are required for the ball placement position, no ball placement command will be issued.
    Fields are marked optional to make testing and extending of the protocol easier.
    An autoRef should ideally set all fields, except if there are good reasons to not do so.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Type:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[GameEvent._Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN_GAME_EVENT_TYPE: GameEvent._Type.ValueType
        BALL_LEFT_FIELD_TOUCH_LINE: GameEvent._Type.ValueType
        'Ball out of field events (stopping)\n\n        triggered by autoRef\n        '
        BALL_LEFT_FIELD_GOAL_LINE: GameEvent._Type.ValueType
        'triggered by autoRef'
        AIMLESS_KICK: GameEvent._Type.ValueType
        'triggered by autoRef'
        ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA: GameEvent._Type.ValueType
        'Stopping Fouls\n\n        triggered by autoRef\n        '
        DEFENDER_IN_DEFENSE_AREA: GameEvent._Type.ValueType
        'triggered by autoRef'
        BOUNDARY_CROSSING: GameEvent._Type.ValueType
        'triggered by autoRef'
        KEEPER_HELD_BALL: GameEvent._Type.ValueType
        'triggered by GC'
        BOT_DRIBBLED_BALL_TOO_FAR: GameEvent._Type.ValueType
        'triggered by autoRef'
        BOT_PUSHED_BOT: GameEvent._Type.ValueType
        'triggered by human ref'
        BOT_HELD_BALL_DELIBERATELY: GameEvent._Type.ValueType
        'triggered by human ref'
        BOT_TIPPED_OVER: GameEvent._Type.ValueType
        'triggered by human ref'
        BOT_DROPPED_PARTS: GameEvent._Type.ValueType
        'triggered by human ref'
        ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA: GameEvent._Type.ValueType
        'Non-Stopping Fouls\n\n        triggered by autoRef\n        '
        BOT_KICKED_BALL_TOO_FAST: GameEvent._Type.ValueType
        'triggered by autoRef'
        BOT_CRASH_UNIQUE: GameEvent._Type.ValueType
        'triggered by autoRef'
        BOT_CRASH_DRAWN: GameEvent._Type.ValueType
        'triggered by autoRef'
        DEFENDER_TOO_CLOSE_TO_KICK_POINT: GameEvent._Type.ValueType
        'Fouls while ball out of play\n\n        triggered by autoRef\n        '
        BOT_TOO_FAST_IN_STOP: GameEvent._Type.ValueType
        'triggered by autoRef'
        BOT_INTERFERED_PLACEMENT: GameEvent._Type.ValueType
        'triggered by autoRef'
        EXCESSIVE_BOT_SUBSTITUTION: GameEvent._Type.ValueType
        'triggered by GC'
        POSSIBLE_GOAL: GameEvent._Type.ValueType
        'Scoring goals\n\n        triggered by autoRef\n        '
        GOAL: GameEvent._Type.ValueType
        'triggered by GC'
        INVALID_GOAL: GameEvent._Type.ValueType
        'triggered by GC'
        ATTACKER_DOUBLE_TOUCHED_BALL: GameEvent._Type.ValueType
        'Other events\n\n        triggered by autoRef\n        '
        PLACEMENT_SUCCEEDED: GameEvent._Type.ValueType
        'triggered by autoRef'
        PENALTY_KICK_FAILED: GameEvent._Type.ValueType
        'triggered by GC and autoRef'
        NO_PROGRESS_IN_GAME: GameEvent._Type.ValueType
        'triggered by GC'
        PLACEMENT_FAILED: GameEvent._Type.ValueType
        'triggered by GC'
        MULTIPLE_CARDS: GameEvent._Type.ValueType
        'triggered by GC'
        MULTIPLE_FOULS: GameEvent._Type.ValueType
        'triggered by GC'
        BOT_SUBSTITUTION: GameEvent._Type.ValueType
        'triggered by GC'
        TOO_MANY_ROBOTS: GameEvent._Type.ValueType
        'triggered by GC'
        CHALLENGE_FLAG: GameEvent._Type.ValueType
        'triggered by GC'
        CHALLENGE_FLAG_HANDLED: GameEvent._Type.ValueType
        'triggered by GC'
        EMERGENCY_STOP: GameEvent._Type.ValueType
        'triggered by GC'
        UNSPORTING_BEHAVIOR_MINOR: GameEvent._Type.ValueType
        'triggered by human ref'
        UNSPORTING_BEHAVIOR_MAJOR: GameEvent._Type.ValueType
        'triggered by human ref'
        PREPARED: GameEvent._Type.ValueType
        'Deprecated events'
        INDIRECT_GOAL: GameEvent._Type.ValueType
        CHIPPED_GOAL: GameEvent._Type.ValueType
        KICK_TIMEOUT: GameEvent._Type.ValueType
        ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA: GameEvent._Type.ValueType
        ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED: GameEvent._Type.ValueType
        BOT_CRASH_UNIQUE_SKIPPED: GameEvent._Type.ValueType
        BOT_PUSHED_BOT_SKIPPED: GameEvent._Type.ValueType
        DEFENDER_IN_DEFENSE_AREA_PARTIALLY: GameEvent._Type.ValueType
        MULTIPLE_PLACEMENT_FAILURES: GameEvent._Type.ValueType

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        ...
    UNKNOWN_GAME_EVENT_TYPE: GameEvent.Type.ValueType
    BALL_LEFT_FIELD_TOUCH_LINE: GameEvent.Type.ValueType
    'Ball out of field events (stopping)\n\n    triggered by autoRef\n    '
    BALL_LEFT_FIELD_GOAL_LINE: GameEvent.Type.ValueType
    'triggered by autoRef'
    AIMLESS_KICK: GameEvent.Type.ValueType
    'triggered by autoRef'
    ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA: GameEvent.Type.ValueType
    'Stopping Fouls\n\n    triggered by autoRef\n    '
    DEFENDER_IN_DEFENSE_AREA: GameEvent.Type.ValueType
    'triggered by autoRef'
    BOUNDARY_CROSSING: GameEvent.Type.ValueType
    'triggered by autoRef'
    KEEPER_HELD_BALL: GameEvent.Type.ValueType
    'triggered by GC'
    BOT_DRIBBLED_BALL_TOO_FAR: GameEvent.Type.ValueType
    'triggered by autoRef'
    BOT_PUSHED_BOT: GameEvent.Type.ValueType
    'triggered by human ref'
    BOT_HELD_BALL_DELIBERATELY: GameEvent.Type.ValueType
    'triggered by human ref'
    BOT_TIPPED_OVER: GameEvent.Type.ValueType
    'triggered by human ref'
    BOT_DROPPED_PARTS: GameEvent.Type.ValueType
    'triggered by human ref'
    ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA: GameEvent.Type.ValueType
    'Non-Stopping Fouls\n\n    triggered by autoRef\n    '
    BOT_KICKED_BALL_TOO_FAST: GameEvent.Type.ValueType
    'triggered by autoRef'
    BOT_CRASH_UNIQUE: GameEvent.Type.ValueType
    'triggered by autoRef'
    BOT_CRASH_DRAWN: GameEvent.Type.ValueType
    'triggered by autoRef'
    DEFENDER_TOO_CLOSE_TO_KICK_POINT: GameEvent.Type.ValueType
    'Fouls while ball out of play\n\n    triggered by autoRef\n    '
    BOT_TOO_FAST_IN_STOP: GameEvent.Type.ValueType
    'triggered by autoRef'
    BOT_INTERFERED_PLACEMENT: GameEvent.Type.ValueType
    'triggered by autoRef'
    EXCESSIVE_BOT_SUBSTITUTION: GameEvent.Type.ValueType
    'triggered by GC'
    POSSIBLE_GOAL: GameEvent.Type.ValueType
    'Scoring goals\n\n    triggered by autoRef\n    '
    GOAL: GameEvent.Type.ValueType
    'triggered by GC'
    INVALID_GOAL: GameEvent.Type.ValueType
    'triggered by GC'
    ATTACKER_DOUBLE_TOUCHED_BALL: GameEvent.Type.ValueType
    'Other events\n\n    triggered by autoRef\n    '
    PLACEMENT_SUCCEEDED: GameEvent.Type.ValueType
    'triggered by autoRef'
    PENALTY_KICK_FAILED: GameEvent.Type.ValueType
    'triggered by GC and autoRef'
    NO_PROGRESS_IN_GAME: GameEvent.Type.ValueType
    'triggered by GC'
    PLACEMENT_FAILED: GameEvent.Type.ValueType
    'triggered by GC'
    MULTIPLE_CARDS: GameEvent.Type.ValueType
    'triggered by GC'
    MULTIPLE_FOULS: GameEvent.Type.ValueType
    'triggered by GC'
    BOT_SUBSTITUTION: GameEvent.Type.ValueType
    'triggered by GC'
    TOO_MANY_ROBOTS: GameEvent.Type.ValueType
    'triggered by GC'
    CHALLENGE_FLAG: GameEvent.Type.ValueType
    'triggered by GC'
    CHALLENGE_FLAG_HANDLED: GameEvent.Type.ValueType
    'triggered by GC'
    EMERGENCY_STOP: GameEvent.Type.ValueType
    'triggered by GC'
    UNSPORTING_BEHAVIOR_MINOR: GameEvent.Type.ValueType
    'triggered by human ref'
    UNSPORTING_BEHAVIOR_MAJOR: GameEvent.Type.ValueType
    'triggered by human ref'
    PREPARED: GameEvent.Type.ValueType
    'Deprecated events'
    INDIRECT_GOAL: GameEvent.Type.ValueType
    CHIPPED_GOAL: GameEvent.Type.ValueType
    KICK_TIMEOUT: GameEvent.Type.ValueType
    ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA: GameEvent.Type.ValueType
    ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED: GameEvent.Type.ValueType
    BOT_CRASH_UNIQUE_SKIPPED: GameEvent.Type.ValueType
    BOT_PUSHED_BOT_SKIPPED: GameEvent.Type.ValueType
    DEFENDER_IN_DEFENSE_AREA_PARTIALLY: GameEvent.Type.ValueType
    MULTIPLE_PLACEMENT_FAILURES: GameEvent.Type.ValueType

    @typing.final
    class BallLeftField(google.protobuf.message.Message):
        """the ball left the field normally"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that last touched the ball'
        by_bot: builtins.int
        'the bot that last touched the ball'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the ball left the field [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location']) -> None:
            ...

    @typing.final
    class AimlessKick(google.protobuf.message.Message):
        """the ball left the field via goal line and a team committed an aimless kick"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        KICK_LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that last touched the ball'
        by_bot: builtins.int
        'the bot that last touched the ball'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the ball left the field [m]"""

        @property
        def kick_location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the ball was last touched [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., kick_location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'kick_location', b'kick_location', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'kick_location', b'kick_location', 'location', b'location']) -> None:
            ...

    @typing.final
    class Goal(google.protobuf.message.Message):
        """a team shot a goal"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        KICKING_TEAM_FIELD_NUMBER: builtins.int
        KICKING_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        KICK_LOCATION_FIELD_NUMBER: builtins.int
        MAX_BALL_HEIGHT_FIELD_NUMBER: builtins.int
        NUM_ROBOTS_BY_TEAM_FIELD_NUMBER: builtins.int
        LAST_TOUCH_BY_TEAM_FIELD_NUMBER: builtins.int
        MESSAGE_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that scored the goal'
        kicking_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that shot the goal (different from by_team for own goals)'
        kicking_bot: builtins.int
        'the bot that shot the goal'
        max_ball_height: builtins.float
        'the maximum height the ball reached during the goal kick (for deciding if this was a valid goal) [m]'
        num_robots_by_team: builtins.int
        'number of robots of scoring team when the ball entered the goal (for deciding if this was a valid goal)'
        last_touch_by_team: builtins.int
        'The UNIX timestamp [μs] when the scoring team last touched the ball'
        message: builtins.str
        'An additional message with e.g. a reason for invalid goals'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the ball entered the goal [m]"""

        @property
        def kick_location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the ball was kicked (for deciding if this was a valid goal) [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., kicking_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., kicking_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., kick_location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., max_ball_height: builtins.float | None=..., num_robots_by_team: builtins.int | None=..., last_touch_by_team: builtins.int | None=..., message: builtins.str | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team', 'kick_location', b'kick_location', 'kicking_bot', b'kicking_bot', 'kicking_team', b'kicking_team', 'last_touch_by_team', b'last_touch_by_team', 'location', b'location', 'max_ball_height', b'max_ball_height', 'message', b'message', 'num_robots_by_team', b'num_robots_by_team']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'kick_location', b'kick_location', 'kicking_bot', b'kicking_bot', 'kicking_team', b'kicking_team', 'last_touch_by_team', b'last_touch_by_team', 'location', b'location', 'max_ball_height', b'max_ball_height', 'message', b'message', 'num_robots_by_team', b'num_robots_by_team']) -> None:
            ...

    @typing.final
    class IndirectGoal(google.protobuf.message.Message):
        """the ball entered the goal directly during an indirect free kick"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        KICK_LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that tried to shoot the goal'
        by_bot: builtins.int
        'the bot that kicked the ball - at least the team must be set'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the ball entered the goal [m]"""

        @property
        def kick_location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the ball was kicked [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., kick_location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'kick_location', b'kick_location', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'kick_location', b'kick_location', 'location', b'location']) -> None:
            ...

    @typing.final
    class ChippedGoal(google.protobuf.message.Message):
        """the ball entered the goal, but was initially chipped"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        KICK_LOCATION_FIELD_NUMBER: builtins.int
        MAX_BALL_HEIGHT_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that tried to shoot the goal'
        by_bot: builtins.int
        'the bot that kicked the ball'
        max_ball_height: builtins.float
        'the maximum height [m] of the ball, before it entered the goal and since the last kick [m]'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the ball entered the goal [m]"""

        @property
        def kick_location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the ball was kicked [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., kick_location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., max_ball_height: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'kick_location', b'kick_location', 'location', b'location', 'max_ball_height', b'max_ball_height']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'kick_location', b'kick_location', 'location', b'location', 'max_ball_height', b'max_ball_height']) -> None:
            ...

    @typing.final
    class BotTooFastInStop(google.protobuf.message.Message):
        """a bot moved too fast while the game was stopped"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        SPEED_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that was too fast'
        speed: builtins.float
        'the bot speed [m/s]'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the bot [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., speed: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location', 'speed', b'speed']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location', 'speed', b'speed']) -> None:
            ...

    @typing.final
    class DefenderTooCloseToKickPoint(google.protobuf.message.Message):
        """a bot of the defending team got too close to the kick point during a free kick"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        DISTANCE_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that was found guilty'
        by_bot: builtins.int
        'the bot that violates the distance to the kick point'
        distance: builtins.float
        'the distance [m] from bot to the kick point (including the minimum radius)'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the bot [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., distance: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'distance', b'distance', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'distance', b'distance', 'location', b'location']) -> None:
            ...

    @typing.final
    class BotCrashDrawn(google.protobuf.message.Message):
        """two robots crashed into each other with similar speeds"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BOT_YELLOW_FIELD_NUMBER: builtins.int
        BOT_BLUE_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        CRASH_SPEED_FIELD_NUMBER: builtins.int
        SPEED_DIFF_FIELD_NUMBER: builtins.int
        CRASH_ANGLE_FIELD_NUMBER: builtins.int
        bot_yellow: builtins.int
        'the bot of the yellow team'
        bot_blue: builtins.int
        'the bot of the blue team'
        crash_speed: builtins.float
        'the calculated crash speed [m/s] of the two bots'
        speed_diff: builtins.float
        'the difference [m/s] of the velocity of the two bots'
        crash_angle: builtins.float
        'the angle [rad] in the range [0, π] of the bot velocity vectors\n        an angle of 0 rad (  0°) means, the bots barely touched each other\n        an angle of π rad (180°) means, the bots crashed frontal into each other\n        '

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the crash (center between both bots) [m]"""

        def __init__(self, *, bot_yellow: builtins.int | None=..., bot_blue: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., crash_speed: builtins.float | None=..., speed_diff: builtins.float | None=..., crash_angle: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['bot_blue', b'bot_blue', 'bot_yellow', b'bot_yellow', 'crash_angle', b'crash_angle', 'crash_speed', b'crash_speed', 'location', b'location', 'speed_diff', b'speed_diff']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['bot_blue', b'bot_blue', 'bot_yellow', b'bot_yellow', 'crash_angle', b'crash_angle', 'crash_speed', b'crash_speed', 'location', b'location', 'speed_diff', b'speed_diff']) -> None:
            ...

    @typing.final
    class BotCrashUnique(google.protobuf.message.Message):
        """two robots crashed into each other and one team was found guilty to due significant speed difference"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        VIOLATOR_FIELD_NUMBER: builtins.int
        VICTIM_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        CRASH_SPEED_FIELD_NUMBER: builtins.int
        SPEED_DIFF_FIELD_NUMBER: builtins.int
        CRASH_ANGLE_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that caused the crash'
        violator: builtins.int
        'the bot that caused the crash'
        victim: builtins.int
        'the bot of the opposite team that was involved in the crash'
        crash_speed: builtins.float
        'the calculated crash speed vector [m/s] of the two bots'
        speed_diff: builtins.float
        'the difference [m/s] of the velocity of the two bots'
        crash_angle: builtins.float
        'the angle [rad] in the range [0, π] of the bot velocity vectors\n        an angle of 0 rad (  0°) means, the bots barely touched each other\n        an angle of π rad (180°) means, the bots crashed frontal into each other\n        '

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the crash (center between both bots) [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., violator: builtins.int | None=..., victim: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., crash_speed: builtins.float | None=..., speed_diff: builtins.float | None=..., crash_angle: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team', 'crash_angle', b'crash_angle', 'crash_speed', b'crash_speed', 'location', b'location', 'speed_diff', b'speed_diff', 'victim', b'victim', 'violator', b'violator']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'crash_angle', b'crash_angle', 'crash_speed', b'crash_speed', 'location', b'location', 'speed_diff', b'speed_diff', 'victim', b'victim', 'violator', b'violator']) -> None:
            ...

    @typing.final
    class BotPushedBot(google.protobuf.message.Message):
        """a bot pushed another bot over a significant distance"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        VIOLATOR_FIELD_NUMBER: builtins.int
        VICTIM_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        PUSHED_DISTANCE_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that pushed the other team'
        violator: builtins.int
        'the bot that pushed the other bot'
        victim: builtins.int
        'the bot of the opposite team that was pushed'
        pushed_distance: builtins.float
        'the pushed distance [m]'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the push (center between both bots) [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., violator: builtins.int | None=..., victim: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., pushed_distance: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team', 'location', b'location', 'pushed_distance', b'pushed_distance', 'victim', b'victim', 'violator', b'violator']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'location', b'location', 'pushed_distance', b'pushed_distance', 'victim', b'victim', 'violator', b'violator']) -> None:
            ...

    @typing.final
    class BotTippedOver(google.protobuf.message.Message):
        """a bot tipped over"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        BALL_LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that tipped over'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the bot [m]"""

        @property
        def ball_location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball at the moment when this foul occurred [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., ball_location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['ball_location', b'ball_location', 'by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['ball_location', b'ball_location', 'by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location']) -> None:
            ...

    @typing.final
    class BotDroppedParts(google.protobuf.message.Message):
        """a bot dropped parts"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        BALL_LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that dropped the parts'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the parts were dropped [m]"""

        @property
        def ball_location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball at the moment when this foul occurred [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., ball_location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['ball_location', b'ball_location', 'by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['ball_location', b'ball_location', 'by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location']) -> None:
            ...

    @typing.final
    class DefenderInDefenseArea(google.protobuf.message.Message):
        """a defender other than the keeper was fully located inside its own defense and touched the ball"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        DISTANCE_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that is inside the penalty area'
        distance: builtins.float
        'the distance [m] from bot case to the nearest point outside the defense area'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the bot [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., distance: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'distance', b'distance', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'distance', b'distance', 'location', b'location']) -> None:
            ...

    @typing.final
    class DefenderInDefenseAreaPartially(google.protobuf.message.Message):
        """a defender other than the keeper was partially located inside its own defense area and touched the ball"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        DISTANCE_FIELD_NUMBER: builtins.int
        BALL_LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that is partially inside the penalty area'
        distance: builtins.float
        'the distance [m] that the bot is inside the penalty area'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the bot"""

        @property
        def ball_location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball at the moment when this foul occurred [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., distance: builtins.float | None=..., ball_location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['ball_location', b'ball_location', 'by_bot', b'by_bot', 'by_team', b'by_team', 'distance', b'distance', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['ball_location', b'ball_location', 'by_bot', b'by_bot', 'by_team', b'by_team', 'distance', b'distance', 'location', b'location']) -> None:
            ...

    @typing.final
    class AttackerTouchedBallInDefenseArea(google.protobuf.message.Message):
        """an attacker touched the ball inside the opponent defense area"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        DISTANCE_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that is inside the penalty area'
        distance: builtins.float
        'the distance [m] that the bot is inside the penalty area'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the bot [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., distance: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'distance', b'distance', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'distance', b'distance', 'location', b'location']) -> None:
            ...

    @typing.final
    class BotKickedBallTooFast(google.protobuf.message.Message):
        """a bot kicked the ball too fast"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        INITIAL_BALL_SPEED_FIELD_NUMBER: builtins.int
        CHIPPED_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that kicked too fast'
        initial_ball_speed: builtins.float
        'the absolute initial ball speed (kick speed) [m/s]'
        chipped: builtins.bool
        'was the ball chipped?'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball at the time of the highest speed [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., initial_ball_speed: builtins.float | None=..., chipped: builtins.bool | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'chipped', b'chipped', 'initial_ball_speed', b'initial_ball_speed', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'chipped', b'chipped', 'initial_ball_speed', b'initial_ball_speed', 'location', b'location']) -> None:
            ...

    @typing.final
    class BotDribbledBallTooFar(google.protobuf.message.Message):
        """a bot dribbled to ball too far"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        START_FIELD_NUMBER: builtins.int
        END_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that dribbled too far'

        @property
        def start(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the dribbling started [m]"""

        @property
        def end(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location where the maximum dribbling distance was reached [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., start: geom.ssl_gc_geometry_pb2.Vector2 | None=..., end: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'end', b'end', 'start', b'start']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'end', b'end', 'start', b'start']) -> None:
            ...

    @typing.final
    class AttackerTouchedOpponentInDefenseArea(google.protobuf.message.Message):
        """an attacker touched the opponent robot inside defense area"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        VICTIM_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that touched the opponent robot'
        victim: builtins.int
        'the bot of the opposite team that was touched'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the contact point between both bots [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., victim: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location', 'victim', b'victim']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location', 'victim', b'victim']) -> None:
            ...

    @typing.final
    class AttackerDoubleTouchedBall(google.protobuf.message.Message):
        """an attacker touched the ball multiple times when it was not allowed to"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that touched the ball twice'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball when it was first touched [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location']) -> None:
            ...

    @typing.final
    class AttackerTooCloseToDefenseArea(google.protobuf.message.Message):
        """an attacker was located too near to the opponent defense area during stop or free kick"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        DISTANCE_FIELD_NUMBER: builtins.int
        BALL_LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that is too close to the defense area'
        distance: builtins.float
        'the distance [m] of the bot to the penalty area'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the bot [m]"""

        @property
        def ball_location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball at the moment when this foul occurred [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., distance: builtins.float | None=..., ball_location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['ball_location', b'ball_location', 'by_bot', b'by_bot', 'by_team', b'by_team', 'distance', b'distance', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['ball_location', b'ball_location', 'by_bot', b'by_bot', 'by_team', b'by_team', 'distance', b'distance', 'location', b'location']) -> None:
            ...

    @typing.final
    class BotHeldBallDeliberately(google.protobuf.message.Message):
        """a bot held the ball for too long"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        DURATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that holds the ball'
        duration: builtins.float
        'the duration [s] that the bot hold the ball'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., duration: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'duration', b'duration', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'duration', b'duration', 'location', b'location']) -> None:
            ...

    @typing.final
    class BotInterferedPlacement(google.protobuf.message.Message):
        """a bot interfered the ball placement of the other team"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        BY_BOT_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        by_bot: builtins.int
        'the bot that interfered the placement'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the bot [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., by_bot: builtins.int | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_bot', b'by_bot', 'by_team', b'by_team', 'location', b'location']) -> None:
            ...

    @typing.final
    class MultipleCards(google.protobuf.message.Message):
        """a team collected multiple yellow cards"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that received multiple yellow cards'

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team']) -> None:
            ...

    @typing.final
    class MultipleFouls(google.protobuf.message.Message):
        """a team collected multiple fouls, which results in a yellow card"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        CAUSED_GAME_EVENTS_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that collected multiple fouls'

        @property
        def caused_game_events(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GameEvent]:
            """the list of game events that caused the multiple fouls"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., caused_game_events: collections.abc.Iterable[global___GameEvent] | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'caused_game_events', b'caused_game_events']) -> None:
            ...

    @typing.final
    class MultiplePlacementFailures(google.protobuf.message.Message):
        """a team failed to place the ball multiple times in a row"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that failed multiple times'

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team']) -> None:
            ...

    @typing.final
    class KickTimeout(google.protobuf.message.Message):
        """timeout waiting for the attacking team to perform the free kick"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        TIME_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that that should have kicked'
        time: builtins.float
        'the time [s] that was waited'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., time: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team', 'location', b'location', 'time', b'time']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'location', b'location', 'time', b'time']) -> None:
            ...

    @typing.final
    class NoProgressInGame(google.protobuf.message.Message):
        """game was stuck"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        LOCATION_FIELD_NUMBER: builtins.int
        TIME_FIELD_NUMBER: builtins.int
        time: builtins.float
        'the time [s] that was waited'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball"""

        def __init__(self, *, location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., time: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['location', b'location', 'time', b'time']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['location', b'location', 'time', b'time']) -> None:
            ...

    @typing.final
    class PlacementFailed(google.protobuf.message.Message):
        """ball placement failed"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        REMAINING_DISTANCE_FIELD_NUMBER: builtins.int
        NEAREST_OWN_BOT_DISTANCE_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that failed'
        remaining_distance: builtins.float
        'the remaining distance [m] from ball to placement position'
        nearest_own_bot_distance: builtins.float
        'the distance [m] of the nearest own robot to the ball'

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., remaining_distance: builtins.float | None=..., nearest_own_bot_distance: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team', 'nearest_own_bot_distance', b'nearest_own_bot_distance', 'remaining_distance', b'remaining_distance']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'nearest_own_bot_distance', b'nearest_own_bot_distance', 'remaining_distance', b'remaining_distance']) -> None:
            ...

    @typing.final
    class UnsportingBehaviorMinor(google.protobuf.message.Message):
        """a team was found guilty for minor unsporting behavior"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        REASON_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        reason: builtins.str
        'an explanation of the situation and decision'

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., reason: builtins.str | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team', 'reason', b'reason']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'reason', b'reason']) -> None:
            ...

    @typing.final
    class UnsportingBehaviorMajor(google.protobuf.message.Message):
        """a team was found guilty for major unsporting behavior"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        REASON_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        reason: builtins.str
        'an explanation of the situation and decision'

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., reason: builtins.str | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team', 'reason', b'reason']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'reason', b'reason']) -> None:
            ...

    @typing.final
    class KeeperHeldBall(google.protobuf.message.Message):
        """a keeper held the ball in its defense area for too long"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        DURATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that found guilty'
        duration: builtins.float
        'the duration [s] that the keeper hold the ball'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., duration: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team', 'duration', b'duration', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'duration', b'duration', 'location', b'location']) -> None:
            ...

    @typing.final
    class PlacementSucceeded(google.protobuf.message.Message):
        """a team successfully placed the ball"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        TIME_TAKEN_FIELD_NUMBER: builtins.int
        PRECISION_FIELD_NUMBER: builtins.int
        DISTANCE_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that did the placement'
        time_taken: builtins.float
        'the time [s] taken for placing the ball'
        precision: builtins.float
        'the distance [m] between placement location and actual ball position'
        distance: builtins.float
        'the distance [m] between the initial ball location and the placement position'

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., time_taken: builtins.float | None=..., precision: builtins.float | None=..., distance: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team', 'distance', b'distance', 'precision', b'precision', 'time_taken', b'time_taken']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'distance', b'distance', 'precision', b'precision', 'time_taken', b'time_taken']) -> None:
            ...

    @typing.final
    class Prepared(google.protobuf.message.Message):
        """both teams are prepared - all conditions are met to continue (with kickoff or penalty kick)"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        TIME_TAKEN_FIELD_NUMBER: builtins.int
        time_taken: builtins.float
        'the time [s] taken for preparing'

        def __init__(self, *, time_taken: builtins.float | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['time_taken', b'time_taken']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['time_taken', b'time_taken']) -> None:
            ...

    @typing.final
    class BotSubstitution(google.protobuf.message.Message):
        """bots are being substituted by a team"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that substitutes robots'

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team']) -> None:
            ...

    @typing.final
    class ExcessiveBotSubstitution(google.protobuf.message.Message):
        """A foul for excessive bot substitutions"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that substitutes robots'

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team']) -> None:
            ...

    @typing.final
    class ChallengeFlag(google.protobuf.message.Message):
        """A challenge flag, requested by a team previously, is flagged"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that requested the challenge flag'

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team']) -> None:
            ...

    @typing.final
    class ChallengeFlagHandled(google.protobuf.message.Message):
        """A challenge, flagged recently, has been handled by the referee"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        ACCEPTED_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that requested the challenge flag'
        accepted: builtins.bool
        'the challenge was accepted by the referee'

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., accepted: builtins.bool | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['accepted', b'accepted', 'by_team', b'by_team']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['accepted', b'accepted', 'by_team', b'by_team']) -> None:
            ...

    @typing.final
    class EmergencyStop(google.protobuf.message.Message):
        """An emergency stop, requested by team previously, occurred"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that substitutes robots'

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team']) -> None:
            ...

    @typing.final
    class TooManyRobots(google.protobuf.message.Message):
        """a team has too many robots on the field"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        NUM_ROBOTS_ALLOWED_FIELD_NUMBER: builtins.int
        NUM_ROBOTS_ON_FIELD_FIELD_NUMBER: builtins.int
        BALL_LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that has too many robots'
        num_robots_allowed: builtins.int
        'number of robots allowed at the moment'
        num_robots_on_field: builtins.int
        'number of robots currently on the field'

        @property
        def ball_location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball at the moment when this foul occurred [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., num_robots_allowed: builtins.int | None=..., num_robots_on_field: builtins.int | None=..., ball_location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['ball_location', b'ball_location', 'by_team', b'by_team', 'num_robots_allowed', b'num_robots_allowed', 'num_robots_on_field', b'num_robots_on_field']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['ball_location', b'ball_location', 'by_team', b'by_team', 'num_robots_allowed', b'num_robots_allowed', 'num_robots_on_field', b'num_robots_on_field']) -> None:
            ...

    @typing.final
    class BoundaryCrossing(google.protobuf.message.Message):
        """a robot chipped the ball over the field boundary out of the playing surface"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that has too many robots'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team', 'location', b'location']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'location', b'location']) -> None:
            ...

    @typing.final
    class PenaltyKickFailed(google.protobuf.message.Message):
        """the penalty kick failed (by time or by keeper)"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        BY_TEAM_FIELD_NUMBER: builtins.int
        LOCATION_FIELD_NUMBER: builtins.int
        REASON_FIELD_NUMBER: builtins.int
        by_team: state.ssl_gc_common_pb2.Team.ValueType
        'the team that last touched the ball'
        reason: builtins.str
        'an explanation of the failure'

        @property
        def location(self) -> geom.ssl_gc_geometry_pb2.Vector2:
            """the location of the ball at the moment of this event [m]"""

        def __init__(self, *, by_team: state.ssl_gc_common_pb2.Team.ValueType | None=..., location: geom.ssl_gc_geometry_pb2.Vector2 | None=..., reason: builtins.str | None=...) -> None:
            ...

        def HasField(self, field_name: typing.Literal['by_team', b'by_team', 'location', b'location', 'reason', b'reason']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing.Literal['by_team', b'by_team', 'location', b'location', 'reason', b'reason']) -> None:
            ...
    ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    ORIGIN_FIELD_NUMBER: builtins.int
    CREATED_TIMESTAMP_FIELD_NUMBER: builtins.int
    BALL_LEFT_FIELD_TOUCH_LINE_FIELD_NUMBER: builtins.int
    BALL_LEFT_FIELD_GOAL_LINE_FIELD_NUMBER: builtins.int
    AIMLESS_KICK_FIELD_NUMBER: builtins.int
    ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA_FIELD_NUMBER: builtins.int
    DEFENDER_IN_DEFENSE_AREA_FIELD_NUMBER: builtins.int
    BOUNDARY_CROSSING_FIELD_NUMBER: builtins.int
    KEEPER_HELD_BALL_FIELD_NUMBER: builtins.int
    BOT_DRIBBLED_BALL_TOO_FAR_FIELD_NUMBER: builtins.int
    BOT_PUSHED_BOT_FIELD_NUMBER: builtins.int
    BOT_HELD_BALL_DELIBERATELY_FIELD_NUMBER: builtins.int
    BOT_TIPPED_OVER_FIELD_NUMBER: builtins.int
    BOT_DROPPED_PARTS_FIELD_NUMBER: builtins.int
    ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA_FIELD_NUMBER: builtins.int
    BOT_KICKED_BALL_TOO_FAST_FIELD_NUMBER: builtins.int
    BOT_CRASH_UNIQUE_FIELD_NUMBER: builtins.int
    BOT_CRASH_DRAWN_FIELD_NUMBER: builtins.int
    DEFENDER_TOO_CLOSE_TO_KICK_POINT_FIELD_NUMBER: builtins.int
    BOT_TOO_FAST_IN_STOP_FIELD_NUMBER: builtins.int
    BOT_INTERFERED_PLACEMENT_FIELD_NUMBER: builtins.int
    POSSIBLE_GOAL_FIELD_NUMBER: builtins.int
    GOAL_FIELD_NUMBER: builtins.int
    INVALID_GOAL_FIELD_NUMBER: builtins.int
    ATTACKER_DOUBLE_TOUCHED_BALL_FIELD_NUMBER: builtins.int
    PLACEMENT_SUCCEEDED_FIELD_NUMBER: builtins.int
    PENALTY_KICK_FAILED_FIELD_NUMBER: builtins.int
    NO_PROGRESS_IN_GAME_FIELD_NUMBER: builtins.int
    PLACEMENT_FAILED_FIELD_NUMBER: builtins.int
    MULTIPLE_CARDS_FIELD_NUMBER: builtins.int
    MULTIPLE_FOULS_FIELD_NUMBER: builtins.int
    BOT_SUBSTITUTION_FIELD_NUMBER: builtins.int
    EXCESSIVE_BOT_SUBSTITUTION_FIELD_NUMBER: builtins.int
    TOO_MANY_ROBOTS_FIELD_NUMBER: builtins.int
    CHALLENGE_FLAG_FIELD_NUMBER: builtins.int
    CHALLENGE_FLAG_HANDLED_FIELD_NUMBER: builtins.int
    EMERGENCY_STOP_FIELD_NUMBER: builtins.int
    UNSPORTING_BEHAVIOR_MINOR_FIELD_NUMBER: builtins.int
    UNSPORTING_BEHAVIOR_MAJOR_FIELD_NUMBER: builtins.int
    PREPARED_FIELD_NUMBER: builtins.int
    INDIRECT_GOAL_FIELD_NUMBER: builtins.int
    CHIPPED_GOAL_FIELD_NUMBER: builtins.int
    KICK_TIMEOUT_FIELD_NUMBER: builtins.int
    ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_FIELD_NUMBER: builtins.int
    ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED_FIELD_NUMBER: builtins.int
    BOT_CRASH_UNIQUE_SKIPPED_FIELD_NUMBER: builtins.int
    BOT_PUSHED_BOT_SKIPPED_FIELD_NUMBER: builtins.int
    DEFENDER_IN_DEFENSE_AREA_PARTIALLY_FIELD_NUMBER: builtins.int
    MULTIPLE_PLACEMENT_FAILURES_FIELD_NUMBER: builtins.int
    id: builtins.str
    'A globally unique id of the game event.'
    type: global___GameEvent.Type.ValueType
    'The type of the game event.'
    created_timestamp: builtins.int
    'Unix timestamp in microseconds when the event was created.'

    @property
    def origin(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The origins of this game event.
        Empty, if it originates from game controller.
        Contains autoRef name(s), if it originates from one or more autoRefs.
        Ignored if sent by autoRef to game controller.
        """

    @property
    def ball_left_field_touch_line(self) -> global___GameEvent.BallLeftField:
        """Ball out of field events (stopping)"""

    @property
    def ball_left_field_goal_line(self) -> global___GameEvent.BallLeftField:
        ...

    @property
    def aimless_kick(self) -> global___GameEvent.AimlessKick:
        ...

    @property
    def attacker_too_close_to_defense_area(self) -> global___GameEvent.AttackerTooCloseToDefenseArea:
        """Stopping Fouls"""

    @property
    def defender_in_defense_area(self) -> global___GameEvent.DefenderInDefenseArea:
        ...

    @property
    def boundary_crossing(self) -> global___GameEvent.BoundaryCrossing:
        ...

    @property
    def keeper_held_ball(self) -> global___GameEvent.KeeperHeldBall:
        ...

    @property
    def bot_dribbled_ball_too_far(self) -> global___GameEvent.BotDribbledBallTooFar:
        ...

    @property
    def bot_pushed_bot(self) -> global___GameEvent.BotPushedBot:
        ...

    @property
    def bot_held_ball_deliberately(self) -> global___GameEvent.BotHeldBallDeliberately:
        ...

    @property
    def bot_tipped_over(self) -> global___GameEvent.BotTippedOver:
        ...

    @property
    def bot_dropped_parts(self) -> global___GameEvent.BotDroppedParts:
        ...

    @property
    def attacker_touched_ball_in_defense_area(self) -> global___GameEvent.AttackerTouchedBallInDefenseArea:
        """Non-Stopping Fouls"""

    @property
    def bot_kicked_ball_too_fast(self) -> global___GameEvent.BotKickedBallTooFast:
        ...

    @property
    def bot_crash_unique(self) -> global___GameEvent.BotCrashUnique:
        ...

    @property
    def bot_crash_drawn(self) -> global___GameEvent.BotCrashDrawn:
        ...

    @property
    def defender_too_close_to_kick_point(self) -> global___GameEvent.DefenderTooCloseToKickPoint:
        """Fouls while ball out of play"""

    @property
    def bot_too_fast_in_stop(self) -> global___GameEvent.BotTooFastInStop:
        ...

    @property
    def bot_interfered_placement(self) -> global___GameEvent.BotInterferedPlacement:
        ...

    @property
    def possible_goal(self) -> global___GameEvent.Goal:
        """Scoring goals"""

    @property
    def goal(self) -> global___GameEvent.Goal:
        ...

    @property
    def invalid_goal(self) -> global___GameEvent.Goal:
        ...

    @property
    def attacker_double_touched_ball(self) -> global___GameEvent.AttackerDoubleTouchedBall:
        """Other events"""

    @property
    def placement_succeeded(self) -> global___GameEvent.PlacementSucceeded:
        ...

    @property
    def penalty_kick_failed(self) -> global___GameEvent.PenaltyKickFailed:
        ...

    @property
    def no_progress_in_game(self) -> global___GameEvent.NoProgressInGame:
        ...

    @property
    def placement_failed(self) -> global___GameEvent.PlacementFailed:
        ...

    @property
    def multiple_cards(self) -> global___GameEvent.MultipleCards:
        ...

    @property
    def multiple_fouls(self) -> global___GameEvent.MultipleFouls:
        ...

    @property
    def bot_substitution(self) -> global___GameEvent.BotSubstitution:
        ...

    @property
    def excessive_bot_substitution(self) -> global___GameEvent.ExcessiveBotSubstitution:
        ...

    @property
    def too_many_robots(self) -> global___GameEvent.TooManyRobots:
        ...

    @property
    def challenge_flag(self) -> global___GameEvent.ChallengeFlag:
        ...

    @property
    def challenge_flag_handled(self) -> global___GameEvent.ChallengeFlagHandled:
        ...

    @property
    def emergency_stop(self) -> global___GameEvent.EmergencyStop:
        ...

    @property
    def unsporting_behavior_minor(self) -> global___GameEvent.UnsportingBehaviorMinor:
        ...

    @property
    def unsporting_behavior_major(self) -> global___GameEvent.UnsportingBehaviorMajor:
        ...

    @property
    def prepared(self) -> global___GameEvent.Prepared:
        """Deprecated events

        replaced by ready_to_continue flag
        """

    @property
    def indirect_goal(self) -> global___GameEvent.IndirectGoal:
        """obsolete"""

    @property
    def chipped_goal(self) -> global___GameEvent.ChippedGoal:
        """replaced by the meta-information in the possible_goal event"""

    @property
    def kick_timeout(self) -> global___GameEvent.KickTimeout:
        """obsolete"""

    @property
    def attacker_touched_opponent_in_defense_area(self) -> global___GameEvent.AttackerTouchedOpponentInDefenseArea:
        """rule removed"""

    @property
    def attacker_touched_opponent_in_defense_area_skipped(self) -> global___GameEvent.AttackerTouchedOpponentInDefenseArea:
        """obsolete"""

    @property
    def bot_crash_unique_skipped(self) -> global___GameEvent.BotCrashUnique:
        """obsolete"""

    @property
    def bot_pushed_bot_skipped(self) -> global___GameEvent.BotPushedBot:
        """can not be used as long as autoRefs do not judge pushing"""

    @property
    def defender_in_defense_area_partially(self) -> global___GameEvent.DefenderInDefenseAreaPartially:
        """rule removed"""

    @property
    def multiple_placement_failures(self) -> global___GameEvent.MultiplePlacementFailures:
        """the referee msg already indicates this"""

    def __init__(self, *, id: builtins.str | None=..., type: global___GameEvent.Type.ValueType | None=..., origin: collections.abc.Iterable[builtins.str] | None=..., created_timestamp: builtins.int | None=..., ball_left_field_touch_line: global___GameEvent.BallLeftField | None=..., ball_left_field_goal_line: global___GameEvent.BallLeftField | None=..., aimless_kick: global___GameEvent.AimlessKick | None=..., attacker_too_close_to_defense_area: global___GameEvent.AttackerTooCloseToDefenseArea | None=..., defender_in_defense_area: global___GameEvent.DefenderInDefenseArea | None=..., boundary_crossing: global___GameEvent.BoundaryCrossing | None=..., keeper_held_ball: global___GameEvent.KeeperHeldBall | None=..., bot_dribbled_ball_too_far: global___GameEvent.BotDribbledBallTooFar | None=..., bot_pushed_bot: global___GameEvent.BotPushedBot | None=..., bot_held_ball_deliberately: global___GameEvent.BotHeldBallDeliberately | None=..., bot_tipped_over: global___GameEvent.BotTippedOver | None=..., bot_dropped_parts: global___GameEvent.BotDroppedParts | None=..., attacker_touched_ball_in_defense_area: global___GameEvent.AttackerTouchedBallInDefenseArea | None=..., bot_kicked_ball_too_fast: global___GameEvent.BotKickedBallTooFast | None=..., bot_crash_unique: global___GameEvent.BotCrashUnique | None=..., bot_crash_drawn: global___GameEvent.BotCrashDrawn | None=..., defender_too_close_to_kick_point: global___GameEvent.DefenderTooCloseToKickPoint | None=..., bot_too_fast_in_stop: global___GameEvent.BotTooFastInStop | None=..., bot_interfered_placement: global___GameEvent.BotInterferedPlacement | None=..., possible_goal: global___GameEvent.Goal | None=..., goal: global___GameEvent.Goal | None=..., invalid_goal: global___GameEvent.Goal | None=..., attacker_double_touched_ball: global___GameEvent.AttackerDoubleTouchedBall | None=..., placement_succeeded: global___GameEvent.PlacementSucceeded | None=..., penalty_kick_failed: global___GameEvent.PenaltyKickFailed | None=..., no_progress_in_game: global___GameEvent.NoProgressInGame | None=..., placement_failed: global___GameEvent.PlacementFailed | None=..., multiple_cards: global___GameEvent.MultipleCards | None=..., multiple_fouls: global___GameEvent.MultipleFouls | None=..., bot_substitution: global___GameEvent.BotSubstitution | None=..., excessive_bot_substitution: global___GameEvent.ExcessiveBotSubstitution | None=..., too_many_robots: global___GameEvent.TooManyRobots | None=..., challenge_flag: global___GameEvent.ChallengeFlag | None=..., challenge_flag_handled: global___GameEvent.ChallengeFlagHandled | None=..., emergency_stop: global___GameEvent.EmergencyStop | None=..., unsporting_behavior_minor: global___GameEvent.UnsportingBehaviorMinor | None=..., unsporting_behavior_major: global___GameEvent.UnsportingBehaviorMajor | None=..., prepared: global___GameEvent.Prepared | None=..., indirect_goal: global___GameEvent.IndirectGoal | None=..., chipped_goal: global___GameEvent.ChippedGoal | None=..., kick_timeout: global___GameEvent.KickTimeout | None=..., attacker_touched_opponent_in_defense_area: global___GameEvent.AttackerTouchedOpponentInDefenseArea | None=..., attacker_touched_opponent_in_defense_area_skipped: global___GameEvent.AttackerTouchedOpponentInDefenseArea | None=..., bot_crash_unique_skipped: global___GameEvent.BotCrashUnique | None=..., bot_pushed_bot_skipped: global___GameEvent.BotPushedBot | None=..., defender_in_defense_area_partially: global___GameEvent.DefenderInDefenseAreaPartially | None=..., multiple_placement_failures: global___GameEvent.MultiplePlacementFailures | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['aimless_kick', b'aimless_kick', 'attacker_double_touched_ball', b'attacker_double_touched_ball', 'attacker_too_close_to_defense_area', b'attacker_too_close_to_defense_area', 'attacker_touched_ball_in_defense_area', b'attacker_touched_ball_in_defense_area', 'attacker_touched_opponent_in_defense_area', b'attacker_touched_opponent_in_defense_area', 'attacker_touched_opponent_in_defense_area_skipped', b'attacker_touched_opponent_in_defense_area_skipped', 'ball_left_field_goal_line', b'ball_left_field_goal_line', 'ball_left_field_touch_line', b'ball_left_field_touch_line', 'bot_crash_drawn', b'bot_crash_drawn', 'bot_crash_unique', b'bot_crash_unique', 'bot_crash_unique_skipped', b'bot_crash_unique_skipped', 'bot_dribbled_ball_too_far', b'bot_dribbled_ball_too_far', 'bot_dropped_parts', b'bot_dropped_parts', 'bot_held_ball_deliberately', b'bot_held_ball_deliberately', 'bot_interfered_placement', b'bot_interfered_placement', 'bot_kicked_ball_too_fast', b'bot_kicked_ball_too_fast', 'bot_pushed_bot', b'bot_pushed_bot', 'bot_pushed_bot_skipped', b'bot_pushed_bot_skipped', 'bot_substitution', b'bot_substitution', 'bot_tipped_over', b'bot_tipped_over', 'bot_too_fast_in_stop', b'bot_too_fast_in_stop', 'boundary_crossing', b'boundary_crossing', 'challenge_flag', b'challenge_flag', 'challenge_flag_handled', b'challenge_flag_handled', 'chipped_goal', b'chipped_goal', 'created_timestamp', b'created_timestamp', 'defender_in_defense_area', b'defender_in_defense_area', 'defender_in_defense_area_partially', b'defender_in_defense_area_partially', 'defender_too_close_to_kick_point', b'defender_too_close_to_kick_point', 'emergency_stop', b'emergency_stop', 'event', b'event', 'excessive_bot_substitution', b'excessive_bot_substitution', 'goal', b'goal', 'id', b'id', 'indirect_goal', b'indirect_goal', 'invalid_goal', b'invalid_goal', 'keeper_held_ball', b'keeper_held_ball', 'kick_timeout', b'kick_timeout', 'multiple_cards', b'multiple_cards', 'multiple_fouls', b'multiple_fouls', 'multiple_placement_failures', b'multiple_placement_failures', 'no_progress_in_game', b'no_progress_in_game', 'penalty_kick_failed', b'penalty_kick_failed', 'placement_failed', b'placement_failed', 'placement_succeeded', b'placement_succeeded', 'possible_goal', b'possible_goal', 'prepared', b'prepared', 'too_many_robots', b'too_many_robots', 'type', b'type', 'unsporting_behavior_major', b'unsporting_behavior_major', 'unsporting_behavior_minor', b'unsporting_behavior_minor']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['aimless_kick', b'aimless_kick', 'attacker_double_touched_ball', b'attacker_double_touched_ball', 'attacker_too_close_to_defense_area', b'attacker_too_close_to_defense_area', 'attacker_touched_ball_in_defense_area', b'attacker_touched_ball_in_defense_area', 'attacker_touched_opponent_in_defense_area', b'attacker_touched_opponent_in_defense_area', 'attacker_touched_opponent_in_defense_area_skipped', b'attacker_touched_opponent_in_defense_area_skipped', 'ball_left_field_goal_line', b'ball_left_field_goal_line', 'ball_left_field_touch_line', b'ball_left_field_touch_line', 'bot_crash_drawn', b'bot_crash_drawn', 'bot_crash_unique', b'bot_crash_unique', 'bot_crash_unique_skipped', b'bot_crash_unique_skipped', 'bot_dribbled_ball_too_far', b'bot_dribbled_ball_too_far', 'bot_dropped_parts', b'bot_dropped_parts', 'bot_held_ball_deliberately', b'bot_held_ball_deliberately', 'bot_interfered_placement', b'bot_interfered_placement', 'bot_kicked_ball_too_fast', b'bot_kicked_ball_too_fast', 'bot_pushed_bot', b'bot_pushed_bot', 'bot_pushed_bot_skipped', b'bot_pushed_bot_skipped', 'bot_substitution', b'bot_substitution', 'bot_tipped_over', b'bot_tipped_over', 'bot_too_fast_in_stop', b'bot_too_fast_in_stop', 'boundary_crossing', b'boundary_crossing', 'challenge_flag', b'challenge_flag', 'challenge_flag_handled', b'challenge_flag_handled', 'chipped_goal', b'chipped_goal', 'created_timestamp', b'created_timestamp', 'defender_in_defense_area', b'defender_in_defense_area', 'defender_in_defense_area_partially', b'defender_in_defense_area_partially', 'defender_too_close_to_kick_point', b'defender_too_close_to_kick_point', 'emergency_stop', b'emergency_stop', 'event', b'event', 'excessive_bot_substitution', b'excessive_bot_substitution', 'goal', b'goal', 'id', b'id', 'indirect_goal', b'indirect_goal', 'invalid_goal', b'invalid_goal', 'keeper_held_ball', b'keeper_held_ball', 'kick_timeout', b'kick_timeout', 'multiple_cards', b'multiple_cards', 'multiple_fouls', b'multiple_fouls', 'multiple_placement_failures', b'multiple_placement_failures', 'no_progress_in_game', b'no_progress_in_game', 'origin', b'origin', 'penalty_kick_failed', b'penalty_kick_failed', 'placement_failed', b'placement_failed', 'placement_succeeded', b'placement_succeeded', 'possible_goal', b'possible_goal', 'prepared', b'prepared', 'too_many_robots', b'too_many_robots', 'type', b'type', 'unsporting_behavior_major', b'unsporting_behavior_major', 'unsporting_behavior_minor', b'unsporting_behavior_minor']) -> None:
        ...

    def WhichOneof(self, oneof_group: typing.Literal['event', b'event']) -> typing.Literal['ball_left_field_touch_line', 'ball_left_field_goal_line', 'aimless_kick', 'attacker_too_close_to_defense_area', 'defender_in_defense_area', 'boundary_crossing', 'keeper_held_ball', 'bot_dribbled_ball_too_far', 'bot_pushed_bot', 'bot_held_ball_deliberately', 'bot_tipped_over', 'bot_dropped_parts', 'attacker_touched_ball_in_defense_area', 'bot_kicked_ball_too_fast', 'bot_crash_unique', 'bot_crash_drawn', 'defender_too_close_to_kick_point', 'bot_too_fast_in_stop', 'bot_interfered_placement', 'possible_goal', 'goal', 'invalid_goal', 'attacker_double_touched_ball', 'placement_succeeded', 'penalty_kick_failed', 'no_progress_in_game', 'placement_failed', 'multiple_cards', 'multiple_fouls', 'bot_substitution', 'excessive_bot_substitution', 'too_many_robots', 'challenge_flag', 'challenge_flag_handled', 'emergency_stop', 'unsporting_behavior_minor', 'unsporting_behavior_major', 'prepared', 'indirect_goal', 'chipped_goal', 'kick_timeout', 'attacker_touched_opponent_in_defense_area', 'attacker_touched_opponent_in_defense_area_skipped', 'bot_crash_unique_skipped', 'bot_pushed_bot_skipped', 'defender_in_defense_area_partially', 'multiple_placement_failures'] | None:
        ...
global___GameEvent = GameEvent