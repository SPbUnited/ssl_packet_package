// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot/control.proto

#include "robot/control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace robot {
namespace control {
PROTOBUF_CONSTEXPR OldFormat::OldFormat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vel_x_)*/0
  , /*decltype(_impl_.vel_y_)*/0
  , /*decltype(_impl_.angular_velocity_or_delta_angle_)*/0
  , /*decltype(_impl_.kicker_setting_)*/0u
  , /*decltype(_impl_.dribbler_setting_)*/0u
  , /*decltype(_impl_.autokick_straight_)*/false
  , /*decltype(_impl_.autokick_high_)*/false
  , /*decltype(_impl_.kick_straight_)*/false
  , /*decltype(_impl_.kick_high_)*/false
  , /*decltype(_impl_.angvel_angle_toggle_)*/false
  , /*decltype(_impl_.dribbler_is_enabled_)*/false
  , /*decltype(_impl_.high_voltage_)*/false} {}
struct OldFormatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OldFormatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OldFormatDefaultTypeInternal() {}
  union {
    OldFormat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OldFormatDefaultTypeInternal _OldFormat_default_instance_;
PROTOBUF_CONSTEXPR KickerAndDribbler::KickerAndDribbler(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kicker_mode_)*/0
  , /*decltype(_impl_.kicker_setting_)*/0u
  , /*decltype(_impl_.dribbler_setting_)*/0u} {}
struct KickerAndDribblerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KickerAndDribblerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KickerAndDribblerDefaultTypeInternal() {}
  union {
    KickerAndDribbler _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KickerAndDribblerDefaultTypeInternal _KickerAndDribbler_default_instance_;
PROTOBUF_CONSTEXPR SpeedControl::SpeedControl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vel_x_)*/0
  , /*decltype(_impl_.vel_y_)*/0
  , /*decltype(_impl_.angular_velocity_or_angle_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SpeedControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedControlDefaultTypeInternal() {}
  union {
    SpeedControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedControlDefaultTypeInternal _SpeedControl_default_instance_;
PROTOBUF_CONSTEXPR Target::Target(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.vx_)*/0
  , /*decltype(_impl_.vy_)*/0
  , /*decltype(_impl_.angle_)*/0} {}
struct TargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetDefaultTypeInternal() {}
  union {
    Target _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetDefaultTypeInternal _Target_default_instance_;
PROTOBUF_CONSTEXPR CoordinateControl::CoordinateControl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinateControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinateControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinateControlDefaultTypeInternal() {}
  union {
    CoordinateControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinateControlDefaultTypeInternal _CoordinateControl_default_instance_;
PROTOBUF_CONSTEXPR GlobalCoordinates::GlobalCoordinates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.angle_)*/0} {}
struct GlobalCoordinatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalCoordinatesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalCoordinatesDefaultTypeInternal() {}
  union {
    GlobalCoordinates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalCoordinatesDefaultTypeInternal _GlobalCoordinates_default_instance_;
PROTOBUF_CONSTEXPR CapVelAndAccel::CapVelAndAccel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_vel_)*/0
  , /*decltype(_impl_.max_accel_)*/0} {}
struct CapVelAndAccelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapVelAndAccelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapVelAndAccelDefaultTypeInternal() {}
  union {
    CapVelAndAccel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapVelAndAccelDefaultTypeInternal _CapVelAndAccel_default_instance_;
PROTOBUF_CONSTEXPR RobotCommand::RobotCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.robot_id_)*/0u
  , /*decltype(_impl_.control_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RobotCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotCommandDefaultTypeInternal() {}
  union {
    RobotCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotCommandDefaultTypeInternal _RobotCommand_default_instance_;
}  // namespace control
}  // namespace robot
static ::_pb::Metadata file_level_metadata_robot_2fcontrol_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_robot_2fcontrol_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_robot_2fcontrol_2eproto = nullptr;

const uint32_t TableStruct_robot_2fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.vel_x_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.vel_y_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.angular_velocity_or_delta_angle_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.kicker_setting_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.dribbler_setting_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.autokick_straight_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.autokick_high_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.kick_straight_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.kick_high_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.angvel_angle_toggle_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.dribbler_is_enabled_),
  PROTOBUF_FIELD_OFFSET(::robot::control::OldFormat, _impl_.high_voltage_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::robot::control::KickerAndDribbler, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::robot::control::KickerAndDribbler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot::control::KickerAndDribbler, _impl_.kicker_mode_),
  PROTOBUF_FIELD_OFFSET(::robot::control::KickerAndDribbler, _impl_.kicker_setting_),
  PROTOBUF_FIELD_OFFSET(::robot::control::KickerAndDribbler, _impl_.dribbler_setting_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::robot::control::SpeedControl, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::robot::control::SpeedControl, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::robot::control::SpeedControl, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot::control::SpeedControl, _impl_.vel_x_),
  PROTOBUF_FIELD_OFFSET(::robot::control::SpeedControl, _impl_.vel_y_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::robot::control::SpeedControl, _impl_.angular_velocity_or_angle_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::robot::control::Target, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::robot::control::Target, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot::control::Target, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::robot::control::Target, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::robot::control::Target, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::robot::control::Target, _impl_.vx_),
  PROTOBUF_FIELD_OFFSET(::robot::control::Target, _impl_.vy_),
  PROTOBUF_FIELD_OFFSET(::robot::control::Target, _impl_.angle_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::robot::control::CoordinateControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot::control::CoordinateControl, _impl_.targets_),
  PROTOBUF_FIELD_OFFSET(::robot::control::GlobalCoordinates, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::robot::control::GlobalCoordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot::control::GlobalCoordinates, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::robot::control::GlobalCoordinates, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::robot::control::GlobalCoordinates, _impl_.angle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::robot::control::CapVelAndAccel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::robot::control::CapVelAndAccel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot::control::CapVelAndAccel, _impl_.max_vel_),
  PROTOBUF_FIELD_OFFSET(::robot::control::CapVelAndAccel, _impl_.max_accel_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::robot::control::RobotCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::robot::control::RobotCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::robot::control::RobotCommand, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot::control::RobotCommand, _impl_.robot_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::robot::control::RobotCommand, _impl_.control_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::robot::control::OldFormat)},
  { 30, 39, -1, sizeof(::robot::control::KickerAndDribbler)},
  { 42, 53, -1, sizeof(::robot::control::SpeedControl)},
  { 57, 69, -1, sizeof(::robot::control::Target)},
  { 75, -1, -1, sizeof(::robot::control::CoordinateControl)},
  { 82, 91, -1, sizeof(::robot::control::GlobalCoordinates)},
  { 94, 102, -1, sizeof(::robot::control::CapVelAndAccel)},
  { 104, 118, -1, sizeof(::robot::control::RobotCommand)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::robot::control::_OldFormat_default_instance_._instance,
  &::robot::control::_KickerAndDribbler_default_instance_._instance,
  &::robot::control::_SpeedControl_default_instance_._instance,
  &::robot::control::_Target_default_instance_._instance,
  &::robot::control::_CoordinateControl_default_instance_._instance,
  &::robot::control::_GlobalCoordinates_default_instance_._instance,
  &::robot::control::_CapVelAndAccel_default_instance_._instance,
  &::robot::control::_RobotCommand_default_instance_._instance,
};

const char descriptor_table_protodef_robot_2fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023robot/control.proto\022\rrobot.control\"\266\002\n"
  "\tOldFormat\022\r\n\005vel_x\030\001 \002(\021\022\r\n\005vel_y\030\002 \002(\021"
  "\022\'\n\037angular_velocity_or_delta_angle\030\003 \002("
  "\021\022\026\n\016kicker_setting\030\004 \002(\r\022\030\n\020dribbler_se"
  "tting\030\005 \002(\r\022\031\n\021autokick_straight\030\007 \002(\010\022\025"
  "\n\rautokick_high\030\010 \002(\010\022\025\n\rkick_straight\030\t"
  " \002(\010\022\021\n\tkick_high\030\n \002(\010\022\033\n\023angvel_angle_"
  "toggle\030\013 \002(\010\022\033\n\023dribbler_is_enabled\030\014 \002("
  "\010\022\024\n\014high_voltage\030\r \002(\010J\004\010\006\020\007\"u\n\021KickerA"
  "ndDribbler\022.\n\013kicker_mode\030\001 \002(\0162\031.robot."
  "control.KickerMode\022\026\n\016kicker_setting\030\002 \002"
  "(\r\022\030\n\020dribbler_setting\030\003 \002(\r\"|\n\014SpeedCon"
  "trol\022\r\n\005vel_x\030\001 \002(\002\022\r\n\005vel_y\030\002 \002(\002\022\032\n\020an"
  "gular_velocity\030\003 \001(\002H\000\022\025\n\013delta_angle\030\004 "
  "\001(\002H\000B\033\n\031angular_velocity_or_angle\"Q\n\006Ta"
  "rget\022\n\n\002id\030\001 \002(\r\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\022\n"
  "\n\002vx\030\004 \002(\002\022\n\n\002vy\030\005 \002(\002\022\r\n\005angle\030\006 \002(\002\";\n"
  "\021CoordinateControl\022&\n\007targets\030\001 \003(\0132\025.ro"
  "bot.control.Target\"8\n\021GlobalCoordinates\022"
  "\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\r\n\005angle\030\003 \002(\002\"4\n\016"
  "CapVelAndAccel\022\017\n\007max_vel\030\001 \002(\002\022\021\n\tmax_a"
  "ccel\030\002 \002(\002\"\216\003\n\014RobotCommand\022\020\n\010robot_id\030"
  "\001 \002(\r\022.\n\nold_format\030\002 \001(\0132\030.robot.contro"
  "l.OldFormatH\000\022\?\n\023kicker_and_dribbler\030\003 \001"
  "(\0132 .robot.control.KickerAndDribblerH\000\0224"
  "\n\rspeed_control\030\004 \001(\0132\033.robot.control.Sp"
  "eedControlH\000\022>\n\022coordinate_control\030\005 \001(\013"
  "2 .robot.control.CoordinateControlH\000\022>\n\022"
  "global_coordinates\030\006 \001(\0132 .robot.control"
  ".GlobalCoordinatesH\000\022:\n\021cap_vel_and_acce"
  "l\030\007 \001(\0132\035.robot.control.CapVelAndAccelH\000"
  "B\t\n\007control*\225\001\n\020RobotControlType\022\016\n\nOLD_"
  "FORMAT\020\000\022\027\n\023KICKER_AND_DRIBBLER\020\001\022\021\n\rSPE"
  "ED_CONTROL\020\002\022\026\n\022COORDINATE_CONTROL\020\003\022\026\n\022"
  "GLOBAL_COORDINATES\020\004\022\025\n\021CAP_VEL_AND_ACCE"
  "L\020\005*b\n\nKickerMode\022\010\n\004IDLE\020\000\022\021\n\rKICK_STRA"
  "IGHT\020\001\022\r\n\tKICK_HIGH\020\002\022\025\n\021AUTOKICK_STRAIG"
  "HT\020\003\022\021\n\rAUTOKICK_HIGH\020\004"
  ;
static ::_pbi::once_flag descriptor_table_robot_2fcontrol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_robot_2fcontrol_2eproto = {
    false, false, 1503, descriptor_table_protodef_robot_2fcontrol_2eproto,
    "robot/control.proto",
    &descriptor_table_robot_2fcontrol_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_robot_2fcontrol_2eproto::offsets,
    file_level_metadata_robot_2fcontrol_2eproto, file_level_enum_descriptors_robot_2fcontrol_2eproto,
    file_level_service_descriptors_robot_2fcontrol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_robot_2fcontrol_2eproto_getter() {
  return &descriptor_table_robot_2fcontrol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_robot_2fcontrol_2eproto(&descriptor_table_robot_2fcontrol_2eproto);
namespace robot {
namespace control {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotControlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fcontrol_2eproto);
  return file_level_enum_descriptors_robot_2fcontrol_2eproto[0];
}
bool RobotControlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KickerMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fcontrol_2eproto);
  return file_level_enum_descriptors_robot_2fcontrol_2eproto[1];
}
bool KickerMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OldFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<OldFormat>()._impl_._has_bits_);
  static void set_has_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular_velocity_or_delta_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kicker_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dribbler_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_autokick_straight(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_autokick_high(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_kick_straight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_kick_high(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_angvel_angle_toggle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dribbler_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_high_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000fff) ^ 0x00000fff) != 0;
  }
};

OldFormat::OldFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot.control.OldFormat)
}
OldFormat::OldFormat(const OldFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OldFormat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vel_x_){}
    , decltype(_impl_.vel_y_){}
    , decltype(_impl_.angular_velocity_or_delta_angle_){}
    , decltype(_impl_.kicker_setting_){}
    , decltype(_impl_.dribbler_setting_){}
    , decltype(_impl_.autokick_straight_){}
    , decltype(_impl_.autokick_high_){}
    , decltype(_impl_.kick_straight_){}
    , decltype(_impl_.kick_high_){}
    , decltype(_impl_.angvel_angle_toggle_){}
    , decltype(_impl_.dribbler_is_enabled_){}
    , decltype(_impl_.high_voltage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vel_x_, &from._impl_.vel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.high_voltage_) -
    reinterpret_cast<char*>(&_impl_.vel_x_)) + sizeof(_impl_.high_voltage_));
  // @@protoc_insertion_point(copy_constructor:robot.control.OldFormat)
}

inline void OldFormat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vel_x_){0}
    , decltype(_impl_.vel_y_){0}
    , decltype(_impl_.angular_velocity_or_delta_angle_){0}
    , decltype(_impl_.kicker_setting_){0u}
    , decltype(_impl_.dribbler_setting_){0u}
    , decltype(_impl_.autokick_straight_){false}
    , decltype(_impl_.autokick_high_){false}
    , decltype(_impl_.kick_straight_){false}
    , decltype(_impl_.kick_high_){false}
    , decltype(_impl_.angvel_angle_toggle_){false}
    , decltype(_impl_.dribbler_is_enabled_){false}
    , decltype(_impl_.high_voltage_){false}
  };
}

OldFormat::~OldFormat() {
  // @@protoc_insertion_point(destructor:robot.control.OldFormat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OldFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OldFormat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OldFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.control.OldFormat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vel_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kick_straight_) -
        reinterpret_cast<char*>(&_impl_.vel_x_)) + sizeof(_impl_.kick_straight_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.kick_high_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.high_voltage_) -
        reinterpret_cast<char*>(&_impl_.kick_high_)) + sizeof(_impl_.high_voltage_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OldFormat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sint32 vel_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_vel_x(&has_bits);
          _impl_.vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required sint32 vel_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vel_y(&has_bits);
          _impl_.vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required sint32 angular_velocity_or_delta_angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_angular_velocity_or_delta_angle(&has_bits);
          _impl_.angular_velocity_or_delta_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 kicker_setting = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kicker_setting(&has_bits);
          _impl_.kicker_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 dribbler_setting = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_dribbler_setting(&has_bits);
          _impl_.dribbler_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool autokick_straight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_autokick_straight(&has_bits);
          _impl_.autokick_straight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool autokick_high = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_autokick_high(&has_bits);
          _impl_.autokick_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool kick_straight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_kick_straight(&has_bits);
          _impl_.kick_straight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool kick_high = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_kick_high(&has_bits);
          _impl_.kick_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool angvel_angle_toggle = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_angvel_angle_toggle(&has_bits);
          _impl_.angvel_angle_toggle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool dribbler_is_enabled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_dribbler_is_enabled(&has_bits);
          _impl_.dribbler_is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool high_voltage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_high_voltage(&has_bits);
          _impl_.high_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OldFormat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot.control.OldFormat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required sint32 vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_vel_x(), target);
  }

  // required sint32 vel_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_vel_y(), target);
  }

  // required sint32 angular_velocity_or_delta_angle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_angular_velocity_or_delta_angle(), target);
  }

  // required uint32 kicker_setting = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kicker_setting(), target);
  }

  // required uint32 dribbler_setting = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dribbler_setting(), target);
  }

  // required bool autokick_straight = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_autokick_straight(), target);
  }

  // required bool autokick_high = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_autokick_high(), target);
  }

  // required bool kick_straight = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_kick_straight(), target);
  }

  // required bool kick_high = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_kick_high(), target);
  }

  // required bool angvel_angle_toggle = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_angvel_angle_toggle(), target);
  }

  // required bool dribbler_is_enabled = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_dribbler_is_enabled(), target);
  }

  // required bool high_voltage = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_high_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.control.OldFormat)
  return target;
}

size_t OldFormat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robot.control.OldFormat)
  size_t total_size = 0;

  if (_internal_has_vel_x()) {
    // required sint32 vel_x = 1;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_vel_x());
  }

  if (_internal_has_vel_y()) {
    // required sint32 vel_y = 2;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_vel_y());
  }

  if (_internal_has_angular_velocity_or_delta_angle()) {
    // required sint32 angular_velocity_or_delta_angle = 3;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_angular_velocity_or_delta_angle());
  }

  if (_internal_has_kicker_setting()) {
    // required uint32 kicker_setting = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kicker_setting());
  }

  if (_internal_has_dribbler_setting()) {
    // required uint32 dribbler_setting = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dribbler_setting());
  }

  if (_internal_has_autokick_straight()) {
    // required bool autokick_straight = 7;
    total_size += 1 + 1;
  }

  if (_internal_has_autokick_high()) {
    // required bool autokick_high = 8;
    total_size += 1 + 1;
  }

  if (_internal_has_kick_straight()) {
    // required bool kick_straight = 9;
    total_size += 1 + 1;
  }

  if (_internal_has_kick_high()) {
    // required bool kick_high = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_angvel_angle_toggle()) {
    // required bool angvel_angle_toggle = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_dribbler_is_enabled()) {
    // required bool dribbler_is_enabled = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_high_voltage()) {
    // required bool high_voltage = 13;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t OldFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.control.OldFormat)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required sint32 vel_x = 1;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_vel_x());

    // required sint32 vel_y = 2;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_vel_y());

    // required sint32 angular_velocity_or_delta_angle = 3;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_angular_velocity_or_delta_angle());

    // required uint32 kicker_setting = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kicker_setting());

    // required uint32 dribbler_setting = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dribbler_setting());

    // required bool autokick_straight = 7;
    total_size += 1 + 1;

    // required bool autokick_high = 8;
    total_size += 1 + 1;

    // required bool kick_straight = 9;
    total_size += 1 + 1;

    // required bool kick_high = 10;
    total_size += 1 + 1;

    // required bool angvel_angle_toggle = 11;
    total_size += 1 + 1;

    // required bool dribbler_is_enabled = 12;
    total_size += 1 + 1;

    // required bool high_voltage = 13;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OldFormat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OldFormat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OldFormat::GetClassData() const { return &_class_data_; }


void OldFormat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OldFormat*>(&to_msg);
  auto& from = static_cast<const OldFormat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot.control.OldFormat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.vel_x_ = from._impl_.vel_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.vel_y_ = from._impl_.vel_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.angular_velocity_or_delta_angle_ = from._impl_.angular_velocity_or_delta_angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kicker_setting_ = from._impl_.kicker_setting_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dribbler_setting_ = from._impl_.dribbler_setting_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.autokick_straight_ = from._impl_.autokick_straight_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.autokick_high_ = from._impl_.autokick_high_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.kick_straight_ = from._impl_.kick_straight_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.kick_high_ = from._impl_.kick_high_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.angvel_angle_toggle_ = from._impl_.angvel_angle_toggle_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.dribbler_is_enabled_ = from._impl_.dribbler_is_enabled_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.high_voltage_ = from._impl_.high_voltage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OldFormat::CopyFrom(const OldFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.control.OldFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OldFormat::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void OldFormat::InternalSwap(OldFormat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OldFormat, _impl_.high_voltage_)
      + sizeof(OldFormat::_impl_.high_voltage_)
      - PROTOBUF_FIELD_OFFSET(OldFormat, _impl_.vel_x_)>(
          reinterpret_cast<char*>(&_impl_.vel_x_),
          reinterpret_cast<char*>(&other->_impl_.vel_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OldFormat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2fcontrol_2eproto_getter, &descriptor_table_robot_2fcontrol_2eproto_once,
      file_level_metadata_robot_2fcontrol_2eproto[0]);
}

// ===================================================================

class KickerAndDribbler::_Internal {
 public:
  using HasBits = decltype(std::declval<KickerAndDribbler>()._impl_._has_bits_);
  static void set_has_kicker_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kicker_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dribbler_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

KickerAndDribbler::KickerAndDribbler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot.control.KickerAndDribbler)
}
KickerAndDribbler::KickerAndDribbler(const KickerAndDribbler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KickerAndDribbler* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kicker_mode_){}
    , decltype(_impl_.kicker_setting_){}
    , decltype(_impl_.dribbler_setting_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.kicker_mode_, &from._impl_.kicker_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dribbler_setting_) -
    reinterpret_cast<char*>(&_impl_.kicker_mode_)) + sizeof(_impl_.dribbler_setting_));
  // @@protoc_insertion_point(copy_constructor:robot.control.KickerAndDribbler)
}

inline void KickerAndDribbler::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kicker_mode_){0}
    , decltype(_impl_.kicker_setting_){0u}
    , decltype(_impl_.dribbler_setting_){0u}
  };
}

KickerAndDribbler::~KickerAndDribbler() {
  // @@protoc_insertion_point(destructor:robot.control.KickerAndDribbler)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KickerAndDribbler::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KickerAndDribbler::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KickerAndDribbler::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.control.KickerAndDribbler)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kicker_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dribbler_setting_) -
        reinterpret_cast<char*>(&_impl_.kicker_mode_)) + sizeof(_impl_.dribbler_setting_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickerAndDribbler::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .robot.control.KickerMode kicker_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::robot::control::KickerMode_IsValid(val))) {
            _internal_set_kicker_mode(static_cast<::robot::control::KickerMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 kicker_setting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kicker_setting(&has_bits);
          _impl_.kicker_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 dribbler_setting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_dribbler_setting(&has_bits);
          _impl_.dribbler_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KickerAndDribbler::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot.control.KickerAndDribbler)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .robot.control.KickerMode kicker_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kicker_mode(), target);
  }

  // required uint32 kicker_setting = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kicker_setting(), target);
  }

  // required uint32 dribbler_setting = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dribbler_setting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.control.KickerAndDribbler)
  return target;
}

size_t KickerAndDribbler::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robot.control.KickerAndDribbler)
  size_t total_size = 0;

  if (_internal_has_kicker_mode()) {
    // required .robot.control.KickerMode kicker_mode = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kicker_mode());
  }

  if (_internal_has_kicker_setting()) {
    // required uint32 kicker_setting = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kicker_setting());
  }

  if (_internal_has_dribbler_setting()) {
    // required uint32 dribbler_setting = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dribbler_setting());
  }

  return total_size;
}
size_t KickerAndDribbler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.control.KickerAndDribbler)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .robot.control.KickerMode kicker_mode = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kicker_mode());

    // required uint32 kicker_setting = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kicker_setting());

    // required uint32 dribbler_setting = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dribbler_setting());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KickerAndDribbler::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KickerAndDribbler::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KickerAndDribbler::GetClassData() const { return &_class_data_; }


void KickerAndDribbler::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KickerAndDribbler*>(&to_msg);
  auto& from = static_cast<const KickerAndDribbler&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot.control.KickerAndDribbler)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kicker_mode_ = from._impl_.kicker_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kicker_setting_ = from._impl_.kicker_setting_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dribbler_setting_ = from._impl_.dribbler_setting_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KickerAndDribbler::CopyFrom(const KickerAndDribbler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.control.KickerAndDribbler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickerAndDribbler::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void KickerAndDribbler::InternalSwap(KickerAndDribbler* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KickerAndDribbler, _impl_.dribbler_setting_)
      + sizeof(KickerAndDribbler::_impl_.dribbler_setting_)
      - PROTOBUF_FIELD_OFFSET(KickerAndDribbler, _impl_.kicker_mode_)>(
          reinterpret_cast<char*>(&_impl_.kicker_mode_),
          reinterpret_cast<char*>(&other->_impl_.kicker_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KickerAndDribbler::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2fcontrol_2eproto_getter, &descriptor_table_robot_2fcontrol_2eproto_once,
      file_level_metadata_robot_2fcontrol_2eproto[1]);
}

// ===================================================================

class SpeedControl::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedControl>()._impl_._has_bits_);
  static void set_has_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpeedControl::SpeedControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot.control.SpeedControl)
}
SpeedControl::SpeedControl(const SpeedControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpeedControl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vel_x_){}
    , decltype(_impl_.vel_y_){}
    , decltype(_impl_.angular_velocity_or_angle_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vel_x_, &from._impl_.vel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vel_y_) -
    reinterpret_cast<char*>(&_impl_.vel_x_)) + sizeof(_impl_.vel_y_));
  clear_has_angular_velocity_or_angle();
  switch (from.angular_velocity_or_angle_case()) {
    case kAngularVelocity: {
      _this->_internal_set_angular_velocity(from._internal_angular_velocity());
      break;
    }
    case kDeltaAngle: {
      _this->_internal_set_delta_angle(from._internal_delta_angle());
      break;
    }
    case ANGULAR_VELOCITY_OR_ANGLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:robot.control.SpeedControl)
}

inline void SpeedControl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vel_x_){0}
    , decltype(_impl_.vel_y_){0}
    , decltype(_impl_.angular_velocity_or_angle_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_angular_velocity_or_angle();
}

SpeedControl::~SpeedControl() {
  // @@protoc_insertion_point(destructor:robot.control.SpeedControl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_angular_velocity_or_angle()) {
    clear_angular_velocity_or_angle();
  }
}

void SpeedControl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedControl::clear_angular_velocity_or_angle() {
// @@protoc_insertion_point(one_of_clear_start:robot.control.SpeedControl)
  switch (angular_velocity_or_angle_case()) {
    case kAngularVelocity: {
      // No need to clear
      break;
    }
    case kDeltaAngle: {
      // No need to clear
      break;
    }
    case ANGULAR_VELOCITY_OR_ANGLE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ANGULAR_VELOCITY_OR_ANGLE_NOT_SET;
}


void SpeedControl::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.control.SpeedControl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.vel_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vel_y_) -
        reinterpret_cast<char*>(&_impl_.vel_x_)) + sizeof(_impl_.vel_y_));
  }
  clear_angular_velocity_or_angle();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedControl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float vel_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_vel_x(&has_bits);
          _impl_.vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float vel_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_vel_y(&has_bits);
          _impl_.vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float angular_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _internal_set_angular_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float delta_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _internal_set_delta_angle(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedControl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot.control.SpeedControl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_vel_x(), target);
  }

  // required float vel_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_vel_y(), target);
  }

  switch (angular_velocity_or_angle_case()) {
    case kAngularVelocity: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_angular_velocity(), target);
      break;
    }
    case kDeltaAngle: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_delta_angle(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.control.SpeedControl)
  return target;
}

size_t SpeedControl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robot.control.SpeedControl)
  size_t total_size = 0;

  if (_internal_has_vel_x()) {
    // required float vel_x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_vel_y()) {
    // required float vel_y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SpeedControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.control.SpeedControl)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float vel_x = 1;
    total_size += 1 + 4;

    // required float vel_y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (angular_velocity_or_angle_case()) {
    // float angular_velocity = 3;
    case kAngularVelocity: {
      total_size += 1 + 4;
      break;
    }
    // float delta_angle = 4;
    case kDeltaAngle: {
      total_size += 1 + 4;
      break;
    }
    case ANGULAR_VELOCITY_OR_ANGLE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpeedControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedControl::GetClassData() const { return &_class_data_; }


void SpeedControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpeedControl*>(&to_msg);
  auto& from = static_cast<const SpeedControl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot.control.SpeedControl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.vel_x_ = from._impl_.vel_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.vel_y_ = from._impl_.vel_y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.angular_velocity_or_angle_case()) {
    case kAngularVelocity: {
      _this->_internal_set_angular_velocity(from._internal_angular_velocity());
      break;
    }
    case kDeltaAngle: {
      _this->_internal_set_delta_angle(from._internal_delta_angle());
      break;
    }
    case ANGULAR_VELOCITY_OR_ANGLE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedControl::CopyFrom(const SpeedControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.control.SpeedControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedControl::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SpeedControl::InternalSwap(SpeedControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedControl, _impl_.vel_y_)
      + sizeof(SpeedControl::_impl_.vel_y_)
      - PROTOBUF_FIELD_OFFSET(SpeedControl, _impl_.vel_x_)>(
          reinterpret_cast<char*>(&_impl_.vel_x_),
          reinterpret_cast<char*>(&other->_impl_.vel_x_));
  swap(_impl_.angular_velocity_or_angle_, other->_impl_.angular_velocity_or_angle_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2fcontrol_2eproto_getter, &descriptor_table_robot_2fcontrol_2eproto_once,
      file_level_metadata_robot_2fcontrol_2eproto[2]);
}

// ===================================================================

class Target::_Internal {
 public:
  using HasBits = decltype(std::declval<Target>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

Target::Target(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot.control.Target)
}
Target::Target(const Target& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Target* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.vx_){}
    , decltype(_impl_.vy_){}
    , decltype(_impl_.angle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.angle_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.angle_));
  // @@protoc_insertion_point(copy_constructor:robot.control.Target)
}

inline void Target::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.vx_){0}
    , decltype(_impl_.vy_){0}
    , decltype(_impl_.angle_){0}
  };
}

Target::~Target() {
  // @@protoc_insertion_point(destructor:robot.control.Target)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Target::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Target::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Target::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.control.Target)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.angle_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.angle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Target::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float vx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_vx(&has_bits);
          _impl_.vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float vy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_vy(&has_bits);
          _impl_.vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_angle(&has_bits);
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Target::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot.control.Target)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // required float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // required float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // required float vx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_vx(), target);
  }

  // required float vy = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_vy(), target);
  }

  // required float angle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.control.Target)
  return target;
}

size_t Target::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robot.control.Target)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required uint32 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  if (_internal_has_x()) {
    // required float x = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_vx()) {
    // required float vx = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_vy()) {
    // required float vy = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_angle()) {
    // required float angle = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.control.Target)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());

    // required float x = 2;
    total_size += 1 + 4;

    // required float y = 3;
    total_size += 1 + 4;

    // required float vx = 4;
    total_size += 1 + 4;

    // required float vy = 5;
    total_size += 1 + 4;

    // required float angle = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Target::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Target::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Target::GetClassData() const { return &_class_data_; }


void Target::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Target*>(&to_msg);
  auto& from = static_cast<const Target&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot.control.Target)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.vx_ = from._impl_.vx_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.vy_ = from._impl_.vy_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.angle_ = from._impl_.angle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Target::CopyFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.control.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Target::InternalSwap(Target* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Target, _impl_.angle_)
      + sizeof(Target::_impl_.angle_)
      - PROTOBUF_FIELD_OFFSET(Target, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Target::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2fcontrol_2eproto_getter, &descriptor_table_robot_2fcontrol_2eproto_once,
      file_level_metadata_robot_2fcontrol_2eproto[3]);
}

// ===================================================================

class CoordinateControl::_Internal {
 public:
};

CoordinateControl::CoordinateControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot.control.CoordinateControl)
}
CoordinateControl::CoordinateControl(const CoordinateControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinateControl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_){from._impl_.targets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:robot.control.CoordinateControl)
}

inline void CoordinateControl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CoordinateControl::~CoordinateControl() {
  // @@protoc_insertion_point(destructor:robot.control.CoordinateControl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinateControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targets_.~RepeatedPtrField();
}

void CoordinateControl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinateControl::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.control.CoordinateControl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinateControl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .robot.control.Target targets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinateControl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot.control.CoordinateControl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .robot.control.Target targets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.control.CoordinateControl)
  return target;
}

size_t CoordinateControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.control.CoordinateControl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .robot.control.Target targets = 1;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->_impl_.targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinateControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinateControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinateControl::GetClassData() const { return &_class_data_; }


void CoordinateControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinateControl*>(&to_msg);
  auto& from = static_cast<const CoordinateControl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot.control.CoordinateControl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.targets_.MergeFrom(from._impl_.targets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinateControl::CopyFrom(const CoordinateControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.control.CoordinateControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinateControl::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.targets_))
    return false;
  return true;
}

void CoordinateControl::InternalSwap(CoordinateControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinateControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2fcontrol_2eproto_getter, &descriptor_table_robot_2fcontrol_2eproto_once,
      file_level_metadata_robot_2fcontrol_2eproto[4]);
}

// ===================================================================

class GlobalCoordinates::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalCoordinates>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

GlobalCoordinates::GlobalCoordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot.control.GlobalCoordinates)
}
GlobalCoordinates::GlobalCoordinates(const GlobalCoordinates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GlobalCoordinates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.angle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.angle_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.angle_));
  // @@protoc_insertion_point(copy_constructor:robot.control.GlobalCoordinates)
}

inline void GlobalCoordinates::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.angle_){0}
  };
}

GlobalCoordinates::~GlobalCoordinates() {
  // @@protoc_insertion_point(destructor:robot.control.GlobalCoordinates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalCoordinates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GlobalCoordinates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlobalCoordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.control.GlobalCoordinates)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.angle_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.angle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalCoordinates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_angle(&has_bits);
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlobalCoordinates::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot.control.GlobalCoordinates)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float angle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.control.GlobalCoordinates)
  return target;
}

size_t GlobalCoordinates::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robot.control.GlobalCoordinates)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_angle()) {
    // required float angle = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t GlobalCoordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.control.GlobalCoordinates)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float angle = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalCoordinates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GlobalCoordinates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalCoordinates::GetClassData() const { return &_class_data_; }


void GlobalCoordinates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GlobalCoordinates*>(&to_msg);
  auto& from = static_cast<const GlobalCoordinates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot.control.GlobalCoordinates)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.angle_ = from._impl_.angle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalCoordinates::CopyFrom(const GlobalCoordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.control.GlobalCoordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalCoordinates::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GlobalCoordinates::InternalSwap(GlobalCoordinates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalCoordinates, _impl_.angle_)
      + sizeof(GlobalCoordinates::_impl_.angle_)
      - PROTOBUF_FIELD_OFFSET(GlobalCoordinates, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalCoordinates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2fcontrol_2eproto_getter, &descriptor_table_robot_2fcontrol_2eproto_once,
      file_level_metadata_robot_2fcontrol_2eproto[5]);
}

// ===================================================================

class CapVelAndAccel::_Internal {
 public:
  using HasBits = decltype(std::declval<CapVelAndAccel>()._impl_._has_bits_);
  static void set_has_max_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CapVelAndAccel::CapVelAndAccel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot.control.CapVelAndAccel)
}
CapVelAndAccel::CapVelAndAccel(const CapVelAndAccel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CapVelAndAccel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_vel_){}
    , decltype(_impl_.max_accel_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_vel_, &from._impl_.max_vel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_accel_) -
    reinterpret_cast<char*>(&_impl_.max_vel_)) + sizeof(_impl_.max_accel_));
  // @@protoc_insertion_point(copy_constructor:robot.control.CapVelAndAccel)
}

inline void CapVelAndAccel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_vel_){0}
    , decltype(_impl_.max_accel_){0}
  };
}

CapVelAndAccel::~CapVelAndAccel() {
  // @@protoc_insertion_point(destructor:robot.control.CapVelAndAccel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CapVelAndAccel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CapVelAndAccel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CapVelAndAccel::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.control.CapVelAndAccel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.max_vel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_accel_) -
        reinterpret_cast<char*>(&_impl_.max_vel_)) + sizeof(_impl_.max_accel_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapVelAndAccel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float max_vel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_max_vel(&has_bits);
          _impl_.max_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float max_accel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_max_accel(&has_bits);
          _impl_.max_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CapVelAndAccel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot.control.CapVelAndAccel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float max_vel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_max_vel(), target);
  }

  // required float max_accel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_accel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.control.CapVelAndAccel)
  return target;
}

size_t CapVelAndAccel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robot.control.CapVelAndAccel)
  size_t total_size = 0;

  if (_internal_has_max_vel()) {
    // required float max_vel = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_max_accel()) {
    // required float max_accel = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CapVelAndAccel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.control.CapVelAndAccel)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float max_vel = 1;
    total_size += 1 + 4;

    // required float max_accel = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CapVelAndAccel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CapVelAndAccel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CapVelAndAccel::GetClassData() const { return &_class_data_; }


void CapVelAndAccel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CapVelAndAccel*>(&to_msg);
  auto& from = static_cast<const CapVelAndAccel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot.control.CapVelAndAccel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_vel_ = from._impl_.max_vel_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_accel_ = from._impl_.max_accel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CapVelAndAccel::CopyFrom(const CapVelAndAccel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.control.CapVelAndAccel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapVelAndAccel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CapVelAndAccel::InternalSwap(CapVelAndAccel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapVelAndAccel, _impl_.max_accel_)
      + sizeof(CapVelAndAccel::_impl_.max_accel_)
      - PROTOBUF_FIELD_OFFSET(CapVelAndAccel, _impl_.max_vel_)>(
          reinterpret_cast<char*>(&_impl_.max_vel_),
          reinterpret_cast<char*>(&other->_impl_.max_vel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CapVelAndAccel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2fcontrol_2eproto_getter, &descriptor_table_robot_2fcontrol_2eproto_once,
      file_level_metadata_robot_2fcontrol_2eproto[6]);
}

// ===================================================================

class RobotCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotCommand>()._impl_._has_bits_);
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::robot::control::OldFormat& old_format(const RobotCommand* msg);
  static const ::robot::control::KickerAndDribbler& kicker_and_dribbler(const RobotCommand* msg);
  static const ::robot::control::SpeedControl& speed_control(const RobotCommand* msg);
  static const ::robot::control::CoordinateControl& coordinate_control(const RobotCommand* msg);
  static const ::robot::control::GlobalCoordinates& global_coordinates(const RobotCommand* msg);
  static const ::robot::control::CapVelAndAccel& cap_vel_and_accel(const RobotCommand* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::robot::control::OldFormat&
RobotCommand::_Internal::old_format(const RobotCommand* msg) {
  return *msg->_impl_.control_.old_format_;
}
const ::robot::control::KickerAndDribbler&
RobotCommand::_Internal::kicker_and_dribbler(const RobotCommand* msg) {
  return *msg->_impl_.control_.kicker_and_dribbler_;
}
const ::robot::control::SpeedControl&
RobotCommand::_Internal::speed_control(const RobotCommand* msg) {
  return *msg->_impl_.control_.speed_control_;
}
const ::robot::control::CoordinateControl&
RobotCommand::_Internal::coordinate_control(const RobotCommand* msg) {
  return *msg->_impl_.control_.coordinate_control_;
}
const ::robot::control::GlobalCoordinates&
RobotCommand::_Internal::global_coordinates(const RobotCommand* msg) {
  return *msg->_impl_.control_.global_coordinates_;
}
const ::robot::control::CapVelAndAccel&
RobotCommand::_Internal::cap_vel_and_accel(const RobotCommand* msg) {
  return *msg->_impl_.control_.cap_vel_and_accel_;
}
void RobotCommand::set_allocated_old_format(::robot::control::OldFormat* old_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_control();
  if (old_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(old_format);
    if (message_arena != submessage_arena) {
      old_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_format, submessage_arena);
    }
    set_has_old_format();
    _impl_.control_.old_format_ = old_format;
  }
  // @@protoc_insertion_point(field_set_allocated:robot.control.RobotCommand.old_format)
}
void RobotCommand::set_allocated_kicker_and_dribbler(::robot::control::KickerAndDribbler* kicker_and_dribbler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_control();
  if (kicker_and_dribbler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kicker_and_dribbler);
    if (message_arena != submessage_arena) {
      kicker_and_dribbler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kicker_and_dribbler, submessage_arena);
    }
    set_has_kicker_and_dribbler();
    _impl_.control_.kicker_and_dribbler_ = kicker_and_dribbler;
  }
  // @@protoc_insertion_point(field_set_allocated:robot.control.RobotCommand.kicker_and_dribbler)
}
void RobotCommand::set_allocated_speed_control(::robot::control::SpeedControl* speed_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_control();
  if (speed_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(speed_control);
    if (message_arena != submessage_arena) {
      speed_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_control, submessage_arena);
    }
    set_has_speed_control();
    _impl_.control_.speed_control_ = speed_control;
  }
  // @@protoc_insertion_point(field_set_allocated:robot.control.RobotCommand.speed_control)
}
void RobotCommand::set_allocated_coordinate_control(::robot::control::CoordinateControl* coordinate_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_control();
  if (coordinate_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinate_control);
    if (message_arena != submessage_arena) {
      coordinate_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate_control, submessage_arena);
    }
    set_has_coordinate_control();
    _impl_.control_.coordinate_control_ = coordinate_control;
  }
  // @@protoc_insertion_point(field_set_allocated:robot.control.RobotCommand.coordinate_control)
}
void RobotCommand::set_allocated_global_coordinates(::robot::control::GlobalCoordinates* global_coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_control();
  if (global_coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(global_coordinates);
    if (message_arena != submessage_arena) {
      global_coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_coordinates, submessage_arena);
    }
    set_has_global_coordinates();
    _impl_.control_.global_coordinates_ = global_coordinates;
  }
  // @@protoc_insertion_point(field_set_allocated:robot.control.RobotCommand.global_coordinates)
}
void RobotCommand::set_allocated_cap_vel_and_accel(::robot::control::CapVelAndAccel* cap_vel_and_accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_control();
  if (cap_vel_and_accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cap_vel_and_accel);
    if (message_arena != submessage_arena) {
      cap_vel_and_accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cap_vel_and_accel, submessage_arena);
    }
    set_has_cap_vel_and_accel();
    _impl_.control_.cap_vel_and_accel_ = cap_vel_and_accel;
  }
  // @@protoc_insertion_point(field_set_allocated:robot.control.RobotCommand.cap_vel_and_accel)
}
RobotCommand::RobotCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot.control.RobotCommand)
}
RobotCommand::RobotCommand(const RobotCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RobotCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.robot_id_){}
    , decltype(_impl_.control_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.robot_id_ = from._impl_.robot_id_;
  clear_has_control();
  switch (from.control_case()) {
    case kOldFormat: {
      _this->_internal_mutable_old_format()->::robot::control::OldFormat::MergeFrom(
          from._internal_old_format());
      break;
    }
    case kKickerAndDribbler: {
      _this->_internal_mutable_kicker_and_dribbler()->::robot::control::KickerAndDribbler::MergeFrom(
          from._internal_kicker_and_dribbler());
      break;
    }
    case kSpeedControl: {
      _this->_internal_mutable_speed_control()->::robot::control::SpeedControl::MergeFrom(
          from._internal_speed_control());
      break;
    }
    case kCoordinateControl: {
      _this->_internal_mutable_coordinate_control()->::robot::control::CoordinateControl::MergeFrom(
          from._internal_coordinate_control());
      break;
    }
    case kGlobalCoordinates: {
      _this->_internal_mutable_global_coordinates()->::robot::control::GlobalCoordinates::MergeFrom(
          from._internal_global_coordinates());
      break;
    }
    case kCapVelAndAccel: {
      _this->_internal_mutable_cap_vel_and_accel()->::robot::control::CapVelAndAccel::MergeFrom(
          from._internal_cap_vel_and_accel());
      break;
    }
    case CONTROL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:robot.control.RobotCommand)
}

inline void RobotCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.robot_id_){0u}
    , decltype(_impl_.control_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_control();
}

RobotCommand::~RobotCommand() {
  // @@protoc_insertion_point(destructor:robot.control.RobotCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_control()) {
    clear_control();
  }
}

void RobotCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotCommand::clear_control() {
// @@protoc_insertion_point(one_of_clear_start:robot.control.RobotCommand)
  switch (control_case()) {
    case kOldFormat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.control_.old_format_;
      }
      break;
    }
    case kKickerAndDribbler: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.control_.kicker_and_dribbler_;
      }
      break;
    }
    case kSpeedControl: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.control_.speed_control_;
      }
      break;
    }
    case kCoordinateControl: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.control_.coordinate_control_;
      }
      break;
    }
    case kGlobalCoordinates: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.control_.global_coordinates_;
      }
      break;
    }
    case kCapVelAndAccel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.control_.cap_vel_and_accel_;
      }
      break;
    }
    case CONTROL_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONTROL_NOT_SET;
}


void RobotCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.control.RobotCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.robot_id_ = 0u;
  clear_control();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_robot_id(&has_bits);
          _impl_.robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .robot.control.OldFormat old_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .robot.control.KickerAndDribbler kicker_and_dribbler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kicker_and_dribbler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .robot.control.SpeedControl speed_control = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_control(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .robot.control.CoordinateControl coordinate_control = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate_control(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .robot.control.GlobalCoordinates global_coordinates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_coordinates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .robot.control.CapVelAndAccel cap_vel_and_accel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cap_vel_and_accel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot.control.RobotCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_robot_id(), target);
  }

  switch (control_case()) {
    case kOldFormat: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::old_format(this),
          _Internal::old_format(this).GetCachedSize(), target, stream);
      break;
    }
    case kKickerAndDribbler: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::kicker_and_dribbler(this),
          _Internal::kicker_and_dribbler(this).GetCachedSize(), target, stream);
      break;
    }
    case kSpeedControl: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::speed_control(this),
          _Internal::speed_control(this).GetCachedSize(), target, stream);
      break;
    }
    case kCoordinateControl: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::coordinate_control(this),
          _Internal::coordinate_control(this).GetCachedSize(), target, stream);
      break;
    }
    case kGlobalCoordinates: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::global_coordinates(this),
          _Internal::global_coordinates(this).GetCachedSize(), target, stream);
      break;
    }
    case kCapVelAndAccel: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::cap_vel_and_accel(this),
          _Internal::cap_vel_and_accel(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.control.RobotCommand)
  return target;
}

size_t RobotCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.control.RobotCommand)
  size_t total_size = 0;

  // required uint32 robot_id = 1;
  if (_internal_has_robot_id()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_robot_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (control_case()) {
    // .robot.control.OldFormat old_format = 2;
    case kOldFormat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_.old_format_);
      break;
    }
    // .robot.control.KickerAndDribbler kicker_and_dribbler = 3;
    case kKickerAndDribbler: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_.kicker_and_dribbler_);
      break;
    }
    // .robot.control.SpeedControl speed_control = 4;
    case kSpeedControl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_.speed_control_);
      break;
    }
    // .robot.control.CoordinateControl coordinate_control = 5;
    case kCoordinateControl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_.coordinate_control_);
      break;
    }
    // .robot.control.GlobalCoordinates global_coordinates = 6;
    case kGlobalCoordinates: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_.global_coordinates_);
      break;
    }
    // .robot.control.CapVelAndAccel cap_vel_and_accel = 7;
    case kCapVelAndAccel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_.cap_vel_and_accel_);
      break;
    }
    case CONTROL_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotCommand::GetClassData() const { return &_class_data_; }


void RobotCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotCommand*>(&to_msg);
  auto& from = static_cast<const RobotCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot.control.RobotCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_robot_id()) {
    _this->_internal_set_robot_id(from._internal_robot_id());
  }
  switch (from.control_case()) {
    case kOldFormat: {
      _this->_internal_mutable_old_format()->::robot::control::OldFormat::MergeFrom(
          from._internal_old_format());
      break;
    }
    case kKickerAndDribbler: {
      _this->_internal_mutable_kicker_and_dribbler()->::robot::control::KickerAndDribbler::MergeFrom(
          from._internal_kicker_and_dribbler());
      break;
    }
    case kSpeedControl: {
      _this->_internal_mutable_speed_control()->::robot::control::SpeedControl::MergeFrom(
          from._internal_speed_control());
      break;
    }
    case kCoordinateControl: {
      _this->_internal_mutable_coordinate_control()->::robot::control::CoordinateControl::MergeFrom(
          from._internal_coordinate_control());
      break;
    }
    case kGlobalCoordinates: {
      _this->_internal_mutable_global_coordinates()->::robot::control::GlobalCoordinates::MergeFrom(
          from._internal_global_coordinates());
      break;
    }
    case kCapVelAndAccel: {
      _this->_internal_mutable_cap_vel_and_accel()->::robot::control::CapVelAndAccel::MergeFrom(
          from._internal_cap_vel_and_accel());
      break;
    }
    case CONTROL_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotCommand::CopyFrom(const RobotCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.control.RobotCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  switch (control_case()) {
    case kOldFormat: {
      if (_internal_has_old_format()) {
        if (!_impl_.control_.old_format_->IsInitialized()) return false;
      }
      break;
    }
    case kKickerAndDribbler: {
      if (_internal_has_kicker_and_dribbler()) {
        if (!_impl_.control_.kicker_and_dribbler_->IsInitialized()) return false;
      }
      break;
    }
    case kSpeedControl: {
      if (_internal_has_speed_control()) {
        if (!_impl_.control_.speed_control_->IsInitialized()) return false;
      }
      break;
    }
    case kCoordinateControl: {
      if (_internal_has_coordinate_control()) {
        if (!_impl_.control_.coordinate_control_->IsInitialized()) return false;
      }
      break;
    }
    case kGlobalCoordinates: {
      if (_internal_has_global_coordinates()) {
        if (!_impl_.control_.global_coordinates_->IsInitialized()) return false;
      }
      break;
    }
    case kCapVelAndAccel: {
      if (_internal_has_cap_vel_and_accel()) {
        if (!_impl_.control_.cap_vel_and_accel_->IsInitialized()) return false;
      }
      break;
    }
    case CONTROL_NOT_SET: {
      break;
    }
  }
  return true;
}

void RobotCommand::InternalSwap(RobotCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.robot_id_, other->_impl_.robot_id_);
  swap(_impl_.control_, other->_impl_.control_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_robot_2fcontrol_2eproto_getter, &descriptor_table_robot_2fcontrol_2eproto_once,
      file_level_metadata_robot_2fcontrol_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace robot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::robot::control::OldFormat*
Arena::CreateMaybeMessage< ::robot::control::OldFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot::control::OldFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::robot::control::KickerAndDribbler*
Arena::CreateMaybeMessage< ::robot::control::KickerAndDribbler >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot::control::KickerAndDribbler >(arena);
}
template<> PROTOBUF_NOINLINE ::robot::control::SpeedControl*
Arena::CreateMaybeMessage< ::robot::control::SpeedControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot::control::SpeedControl >(arena);
}
template<> PROTOBUF_NOINLINE ::robot::control::Target*
Arena::CreateMaybeMessage< ::robot::control::Target >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot::control::Target >(arena);
}
template<> PROTOBUF_NOINLINE ::robot::control::CoordinateControl*
Arena::CreateMaybeMessage< ::robot::control::CoordinateControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot::control::CoordinateControl >(arena);
}
template<> PROTOBUF_NOINLINE ::robot::control::GlobalCoordinates*
Arena::CreateMaybeMessage< ::robot::control::GlobalCoordinates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot::control::GlobalCoordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::robot::control::CapVelAndAccel*
Arena::CreateMaybeMessage< ::robot::control::CapVelAndAccel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot::control::CapVelAndAccel >(arena);
}
template<> PROTOBUF_NOINLINE ::robot::control::RobotCommand*
Arena::CreateMaybeMessage< ::robot::control::RobotCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot::control::RobotCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
