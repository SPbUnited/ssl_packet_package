// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/ssl_gc_api.proto

#include "api/ssl_gc_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Output::Output(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_state_)*/nullptr
  , /*decltype(_impl_.gc_state_)*/nullptr
  , /*decltype(_impl_.protocol_)*/nullptr
  , /*decltype(_impl_.config_)*/nullptr} {}
struct OutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputDefaultTypeInternal() {}
  union {
    Output _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputDefaultTypeInternal _Output_default_instance_;
PROTOBUF_CONSTEXPR Protocol::Protocol(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entry_)*/{}
  , /*decltype(_impl_.delta_)*/false} {}
struct ProtocolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtocolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtocolDefaultTypeInternal() {}
  union {
    Protocol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtocolDefaultTypeInternal _Protocol_default_instance_;
PROTOBUF_CONSTEXPR ProtocolEntry::ProtocolEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.change_)*/nullptr
  , /*decltype(_impl_.match_time_elapsed_)*/nullptr
  , /*decltype(_impl_.stage_time_elapsed_)*/nullptr
  , /*decltype(_impl_.id_)*/0} {}
struct ProtocolEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtocolEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtocolEntryDefaultTypeInternal() {}
  union {
    ProtocolEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtocolEntryDefaultTypeInternal _ProtocolEntry_default_instance_;
PROTOBUF_CONSTEXPR Input::Input(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.change_)*/nullptr
  , /*decltype(_impl_.config_delta_)*/nullptr
  , /*decltype(_impl_.continue_action_)*/nullptr
  , /*decltype(_impl_.reset_match_)*/false} {}
struct InputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputDefaultTypeInternal() {}
  union {
    Input _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputDefaultTypeInternal _Input_default_instance_;
static ::_pb::Metadata file_level_metadata_api_2fssl_5fgc_5fapi_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_api_2fssl_5fgc_5fapi_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_api_2fssl_5fgc_5fapi_2eproto = nullptr;

const uint32_t TableStruct_api_2fssl_5fgc_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Output, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Output, _impl_.match_state_),
  PROTOBUF_FIELD_OFFSET(::Output, _impl_.gc_state_),
  PROTOBUF_FIELD_OFFSET(::Output, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::Output, _impl_.config_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Protocol, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Protocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol, _impl_.delta_),
  PROTOBUF_FIELD_OFFSET(::Protocol, _impl_.entry_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, _impl_.change_),
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, _impl_.match_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, _impl_.stage_time_elapsed_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Input, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Input, _impl_.change_),
  PROTOBUF_FIELD_OFFSET(::Input, _impl_.reset_match_),
  PROTOBUF_FIELD_OFFSET(::Input, _impl_.config_delta_),
  PROTOBUF_FIELD_OFFSET(::Input, _impl_.continue_action_),
  0,
  3,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::Output)},
  { 14, 22, -1, sizeof(::Protocol)},
  { 24, 34, -1, sizeof(::ProtocolEntry)},
  { 38, 48, -1, sizeof(::Input)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Output_default_instance_._instance,
  &::_Protocol_default_instance_._instance,
  &::_ProtocolEntry_default_instance_._instance,
  &::_Input_default_instance_._instance,
};

const char descriptor_table_protodef_api_2fssl_5fgc_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024api/ssl_gc_api.proto\032\030state/ssl_gc_sta"
  "te.proto\032 statemachine/ssl_gc_change.pro"
  "to\032\032engine/ssl_gc_engine.proto\032!engine/s"
  "sl_gc_engine_config.proto\032\036google/protob"
  "uf/duration.proto\"w\n\006Output\022\033\n\013match_sta"
  "te\030\001 \001(\0132\006.State\022\032\n\010gc_state\030\002 \001(\0132\010.GcS"
  "tate\022\033\n\010protocol\030\003 \001(\0132\t.Protocol\022\027\n\006con"
  "fig\030\004 \001(\0132\007.Config\"8\n\010Protocol\022\r\n\005delta\030"
  "\001 \001(\010\022\035\n\005entry\030\002 \003(\0132\016.ProtocolEntry\"\242\001\n"
  "\rProtocolEntry\022\n\n\002id\030\001 \001(\005\022\027\n\006change\030\002 \001"
  "(\0132\007.Change\0225\n\022match_time_elapsed\030\003 \001(\0132"
  "\031.google.protobuf.Duration\0225\n\022stage_time"
  "_elapsed\030\004 \001(\0132\031.google.protobuf.Duratio"
  "n\"~\n\005Input\022\027\n\006change\030\001 \001(\0132\007.Change\022\023\n\013r"
  "eset_match\030\002 \001(\010\022\035\n\014config_delta\030\003 \001(\0132\007"
  ".Config\022(\n\017continue_action\030\004 \001(\0132\017.Conti"
  "nueAction"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fssl_5fgc_5fapi_2eproto_deps[5] = {
  &::descriptor_table_engine_2fssl_5fgc_5fengine_2eproto,
  &::descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_state_2fssl_5fgc_5fstate_2eproto,
  &::descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto,
};
static ::_pbi::once_flag descriptor_table_api_2fssl_5fgc_5fapi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fssl_5fgc_5fapi_2eproto = {
    false, false, 649, descriptor_table_protodef_api_2fssl_5fgc_5fapi_2eproto,
    "api/ssl_gc_api.proto",
    &descriptor_table_api_2fssl_5fgc_5fapi_2eproto_once, descriptor_table_api_2fssl_5fgc_5fapi_2eproto_deps, 5, 4,
    schemas, file_default_instances, TableStruct_api_2fssl_5fgc_5fapi_2eproto::offsets,
    file_level_metadata_api_2fssl_5fgc_5fapi_2eproto, file_level_enum_descriptors_api_2fssl_5fgc_5fapi_2eproto,
    file_level_service_descriptors_api_2fssl_5fgc_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fssl_5fgc_5fapi_2eproto_getter() {
  return &descriptor_table_api_2fssl_5fgc_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fssl_5fgc_5fapi_2eproto(&descriptor_table_api_2fssl_5fgc_5fapi_2eproto);

// ===================================================================

class Output::_Internal {
 public:
  using HasBits = decltype(std::declval<Output>()._impl_._has_bits_);
  static const ::State& match_state(const Output* msg);
  static void set_has_match_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GcState& gc_state(const Output* msg);
  static void set_has_gc_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Protocol& protocol(const Output* msg);
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Config& config(const Output* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::State&
Output::_Internal::match_state(const Output* msg) {
  return *msg->_impl_.match_state_;
}
const ::GcState&
Output::_Internal::gc_state(const Output* msg) {
  return *msg->_impl_.gc_state_;
}
const ::Protocol&
Output::_Internal::protocol(const Output* msg) {
  return *msg->_impl_.protocol_;
}
const ::Config&
Output::_Internal::config(const Output* msg) {
  return *msg->_impl_.config_;
}
void Output::clear_match_state() {
  if (_impl_.match_state_ != nullptr) _impl_.match_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Output::clear_gc_state() {
  if (_impl_.gc_state_ != nullptr) _impl_.gc_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Output::clear_config() {
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Output::Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Output* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_state_){nullptr}
    , decltype(_impl_.gc_state_){nullptr}
    , decltype(_impl_.protocol_){nullptr}
    , decltype(_impl_.config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_state()) {
    _this->_impl_.match_state_ = new ::State(*from._impl_.match_state_);
  }
  if (from._internal_has_gc_state()) {
    _this->_impl_.gc_state_ = new ::GcState(*from._impl_.gc_state_);
  }
  if (from._internal_has_protocol()) {
    _this->_impl_.protocol_ = new ::Protocol(*from._impl_.protocol_);
  }
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::Config(*from._impl_.config_);
  }
  // @@protoc_insertion_point(copy_constructor:Output)
}

inline void Output::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_state_){nullptr}
    , decltype(_impl_.gc_state_){nullptr}
    , decltype(_impl_.protocol_){nullptr}
    , decltype(_impl_.config_){nullptr}
  };
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:Output)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Output::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.match_state_;
  if (this != internal_default_instance()) delete _impl_.gc_state_;
  if (this != internal_default_instance()) delete _impl_.protocol_;
  if (this != internal_default_instance()) delete _impl_.config_;
}

void Output::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:Output)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.match_state_ != nullptr);
      _impl_.match_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gc_state_ != nullptr);
      _impl_.gc_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.protocol_ != nullptr);
      _impl_.protocol_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.config_ != nullptr);
      _impl_.config_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .State match_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GcState gc_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gc_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Protocol protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocol(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Config config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Output::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Output)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .State match_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::match_state(this),
        _Internal::match_state(this).GetCachedSize(), target, stream);
  }

  // optional .GcState gc_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gc_state(this),
        _Internal::gc_state(this).GetCachedSize(), target, stream);
  }

  // optional .Protocol protocol = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::protocol(this),
        _Internal::protocol(this).GetCachedSize(), target, stream);
  }

  // optional .Config config = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Output)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .State match_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_state_);
    }

    // optional .GcState gc_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gc_state_);
    }

    // optional .Protocol protocol = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.protocol_);
    }

    // optional .Config config = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Output::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Output::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Output::GetClassData() const { return &_class_data_; }


void Output::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Output*>(&to_msg);
  auto& from = static_cast<const Output&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Output)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_match_state()->::State::MergeFrom(
          from._internal_match_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_gc_state()->::GcState::MergeFrom(
          from._internal_gc_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_protocol()->::Protocol::MergeFrom(
          from._internal_protocol());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_config()->::Config::MergeFrom(
          from._internal_config());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  if (_internal_has_match_state()) {
    if (!_impl_.match_state_->IsInitialized()) return false;
  }
  if (_internal_has_gc_state()) {
    if (!_impl_.gc_state_->IsInitialized()) return false;
  }
  if (_internal_has_protocol()) {
    if (!_impl_.protocol_->IsInitialized()) return false;
  }
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Output, _impl_.config_)
      + sizeof(Output::_impl_.config_)
      - PROTOBUF_FIELD_OFFSET(Output, _impl_.match_state_)>(
          reinterpret_cast<char*>(&_impl_.match_state_),
          reinterpret_cast<char*>(&other->_impl_.match_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fssl_5fgc_5fapi_2eproto_getter, &descriptor_table_api_2fssl_5fgc_5fapi_2eproto_once,
      file_level_metadata_api_2fssl_5fgc_5fapi_2eproto[0]);
}

// ===================================================================

class Protocol::_Internal {
 public:
  using HasBits = decltype(std::declval<Protocol>()._impl_._has_bits_);
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Protocol::Protocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol)
}
Protocol::Protocol(const Protocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Protocol* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entry_){from._impl_.entry_}
    , decltype(_impl_.delta_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.delta_ = from._impl_.delta_;
  // @@protoc_insertion_point(copy_constructor:Protocol)
}

inline void Protocol::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entry_){arena}
    , decltype(_impl_.delta_){false}
  };
}

Protocol::~Protocol() {
  // @@protoc_insertion_point(destructor:Protocol)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Protocol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_.~RepeatedPtrField();
}

void Protocol::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Protocol::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  _impl_.delta_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Protocol::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_delta(&has_bits);
          _impl_.delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ProtocolEntry entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Protocol::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool delta = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_delta(), target);
  }

  // repeated .ProtocolEntry entry = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol)
  return target;
}

size_t Protocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtocolEntry entry = 2;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_impl_.entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool delta = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Protocol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Protocol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Protocol::GetClassData() const { return &_class_data_; }


void Protocol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Protocol*>(&to_msg);
  auto& from = static_cast<const Protocol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_.MergeFrom(from._impl_.entry_);
  if (from._internal_has_delta()) {
    _this->_internal_set_delta(from._internal_delta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Protocol::CopyFrom(const Protocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Protocol::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entry_))
    return false;
  return true;
}

void Protocol::InternalSwap(Protocol* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
  swap(_impl_.delta_, other->_impl_.delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Protocol::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fssl_5fgc_5fapi_2eproto_getter, &descriptor_table_api_2fssl_5fgc_5fapi_2eproto_once,
      file_level_metadata_api_2fssl_5fgc_5fapi_2eproto[1]);
}

// ===================================================================

class ProtocolEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtocolEntry>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Change& change(const ProtocolEntry* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& match_time_elapsed(const ProtocolEntry* msg);
  static void set_has_match_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& stage_time_elapsed(const ProtocolEntry* msg);
  static void set_has_stage_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Change&
ProtocolEntry::_Internal::change(const ProtocolEntry* msg) {
  return *msg->_impl_.change_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ProtocolEntry::_Internal::match_time_elapsed(const ProtocolEntry* msg) {
  return *msg->_impl_.match_time_elapsed_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ProtocolEntry::_Internal::stage_time_elapsed(const ProtocolEntry* msg) {
  return *msg->_impl_.stage_time_elapsed_;
}
void ProtocolEntry::clear_change() {
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ProtocolEntry::clear_match_time_elapsed() {
  if (_impl_.match_time_elapsed_ != nullptr) _impl_.match_time_elapsed_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ProtocolEntry::clear_stage_time_elapsed() {
  if (_impl_.stage_time_elapsed_ != nullptr) _impl_.stage_time_elapsed_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ProtocolEntry::ProtocolEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtocolEntry)
}
ProtocolEntry::ProtocolEntry(const ProtocolEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtocolEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.change_){nullptr}
    , decltype(_impl_.match_time_elapsed_){nullptr}
    , decltype(_impl_.stage_time_elapsed_){nullptr}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_change()) {
    _this->_impl_.change_ = new ::Change(*from._impl_.change_);
  }
  if (from._internal_has_match_time_elapsed()) {
    _this->_impl_.match_time_elapsed_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.match_time_elapsed_);
  }
  if (from._internal_has_stage_time_elapsed()) {
    _this->_impl_.stage_time_elapsed_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.stage_time_elapsed_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:ProtocolEntry)
}

inline void ProtocolEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.change_){nullptr}
    , decltype(_impl_.match_time_elapsed_){nullptr}
    , decltype(_impl_.stage_time_elapsed_){nullptr}
    , decltype(_impl_.id_){0}
  };
}

ProtocolEntry::~ProtocolEntry() {
  // @@protoc_insertion_point(destructor:ProtocolEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtocolEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.change_;
  if (this != internal_default_instance()) delete _impl_.match_time_elapsed_;
  if (this != internal_default_instance()) delete _impl_.stage_time_elapsed_;
}

void ProtocolEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtocolEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtocolEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.change_ != nullptr);
      _impl_.change_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.match_time_elapsed_ != nullptr);
      _impl_.match_time_elapsed_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.stage_time_elapsed_ != nullptr);
      _impl_.stage_time_elapsed_->Clear();
    }
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Change change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration match_time_elapsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_time_elapsed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration stage_time_elapsed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stage_time_elapsed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtocolEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtocolEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .Change change = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::change(this),
        _Internal::change(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration match_time_elapsed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::match_time_elapsed(this),
        _Internal::match_time_elapsed(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration stage_time_elapsed = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stage_time_elapsed(this),
        _Internal::stage_time_elapsed(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtocolEntry)
  return target;
}

size_t ProtocolEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtocolEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .Change change = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_);
    }

    // optional .google.protobuf.Duration match_time_elapsed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_time_elapsed_);
    }

    // optional .google.protobuf.Duration stage_time_elapsed = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stage_time_elapsed_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtocolEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolEntry::GetClassData() const { return &_class_data_; }


void ProtocolEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtocolEntry*>(&to_msg);
  auto& from = static_cast<const ProtocolEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtocolEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_change()->::Change::MergeFrom(
          from._internal_change());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_match_time_elapsed()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_match_time_elapsed());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_stage_time_elapsed()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_stage_time_elapsed());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolEntry::CopyFrom(const ProtocolEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtocolEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolEntry::IsInitialized() const {
  if (_internal_has_change()) {
    if (!_impl_.change_->IsInitialized()) return false;
  }
  return true;
}

void ProtocolEntry::InternalSwap(ProtocolEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtocolEntry, _impl_.id_)
      + sizeof(ProtocolEntry::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(ProtocolEntry, _impl_.change_)>(
          reinterpret_cast<char*>(&_impl_.change_),
          reinterpret_cast<char*>(&other->_impl_.change_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fssl_5fgc_5fapi_2eproto_getter, &descriptor_table_api_2fssl_5fgc_5fapi_2eproto_once,
      file_level_metadata_api_2fssl_5fgc_5fapi_2eproto[2]);
}

// ===================================================================

class Input::_Internal {
 public:
  using HasBits = decltype(std::declval<Input>()._impl_._has_bits_);
  static const ::Change& change(const Input* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reset_match(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Config& config_delta(const Input* msg);
  static void set_has_config_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ContinueAction& continue_action(const Input* msg);
  static void set_has_continue_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Change&
Input::_Internal::change(const Input* msg) {
  return *msg->_impl_.change_;
}
const ::Config&
Input::_Internal::config_delta(const Input* msg) {
  return *msg->_impl_.config_delta_;
}
const ::ContinueAction&
Input::_Internal::continue_action(const Input* msg) {
  return *msg->_impl_.continue_action_;
}
void Input::clear_change() {
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Input::clear_config_delta() {
  if (_impl_.config_delta_ != nullptr) _impl_.config_delta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Input::clear_continue_action() {
  if (_impl_.continue_action_ != nullptr) _impl_.continue_action_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Input::Input(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Input* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.change_){nullptr}
    , decltype(_impl_.config_delta_){nullptr}
    , decltype(_impl_.continue_action_){nullptr}
    , decltype(_impl_.reset_match_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_change()) {
    _this->_impl_.change_ = new ::Change(*from._impl_.change_);
  }
  if (from._internal_has_config_delta()) {
    _this->_impl_.config_delta_ = new ::Config(*from._impl_.config_delta_);
  }
  if (from._internal_has_continue_action()) {
    _this->_impl_.continue_action_ = new ::ContinueAction(*from._impl_.continue_action_);
  }
  _this->_impl_.reset_match_ = from._impl_.reset_match_;
  // @@protoc_insertion_point(copy_constructor:Input)
}

inline void Input::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.change_){nullptr}
    , decltype(_impl_.config_delta_){nullptr}
    , decltype(_impl_.continue_action_){nullptr}
    , decltype(_impl_.reset_match_){false}
  };
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:Input)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Input::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.change_;
  if (this != internal_default_instance()) delete _impl_.config_delta_;
  if (this != internal_default_instance()) delete _impl_.continue_action_;
}

void Input::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:Input)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.change_ != nullptr);
      _impl_.change_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.config_delta_ != nullptr);
      _impl_.config_delta_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.continue_action_ != nullptr);
      _impl_.continue_action_->Clear();
    }
  }
  _impl_.reset_match_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Input::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Change change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reset_match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_reset_match(&has_bits);
          _impl_.reset_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Config config_delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config_delta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ContinueAction continue_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_continue_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Input::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Input)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Change change = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::change(this),
        _Internal::change(this).GetCachedSize(), target, stream);
  }

  // optional bool reset_match = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_reset_match(), target);
  }

  // optional .Config config_delta = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::config_delta(this),
        _Internal::config_delta(this).GetCachedSize(), target, stream);
  }

  // optional .ContinueAction continue_action = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::continue_action(this),
        _Internal::continue_action(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Input)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .Change change = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_);
    }

    // optional .Config config_delta = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_delta_);
    }

    // optional .ContinueAction continue_action = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.continue_action_);
    }

    // optional bool reset_match = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Input::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Input::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Input::GetClassData() const { return &_class_data_; }


void Input::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Input*>(&to_msg);
  auto& from = static_cast<const Input&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Input)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_change()->::Change::MergeFrom(
          from._internal_change());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_config_delta()->::Config::MergeFrom(
          from._internal_config_delta());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_continue_action()->::ContinueAction::MergeFrom(
          from._internal_continue_action());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.reset_match_ = from._impl_.reset_match_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  if (_internal_has_change()) {
    if (!_impl_.change_->IsInitialized()) return false;
  }
  if (_internal_has_continue_action()) {
    if (!_impl_.continue_action_->IsInitialized()) return false;
  }
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input, _impl_.reset_match_)
      + sizeof(Input::_impl_.reset_match_)
      - PROTOBUF_FIELD_OFFSET(Input, _impl_.change_)>(
          reinterpret_cast<char*>(&_impl_.change_),
          reinterpret_cast<char*>(&other->_impl_.change_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fssl_5fgc_5fapi_2eproto_getter, &descriptor_table_api_2fssl_5fgc_5fapi_2eproto_once,
      file_level_metadata_api_2fssl_5fgc_5fapi_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Output*
Arena::CreateMaybeMessage< ::Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol*
Arena::CreateMaybeMessage< ::Protocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtocolEntry*
Arena::CreateMaybeMessage< ::ProtocolEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtocolEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::Input*
Arena::CreateMaybeMessage< ::Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Input >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
