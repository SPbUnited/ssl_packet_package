// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/ssl_gc_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fssl_5fgc_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2fssl_5fgc_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "state/ssl_gc_state.pb.h"
#include "statemachine/ssl_gc_change.pb.h"
#include "engine/ssl_gc_engine.pb.h"
#include "engine/ssl_gc_engine_config.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2fssl_5fgc_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fssl_5fgc_5fapi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2fssl_5fgc_5fapi_2eproto;
class Input;
struct InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class Output;
struct OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class Protocol;
struct ProtocolDefaultTypeInternal;
extern ProtocolDefaultTypeInternal _Protocol_default_instance_;
class ProtocolEntry;
struct ProtocolEntryDefaultTypeInternal;
extern ProtocolEntryDefaultTypeInternal _ProtocolEntry_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Input* Arena::CreateMaybeMessage<::Input>(Arena*);
template<> ::Output* Arena::CreateMaybeMessage<::Output>(Arena*);
template<> ::Protocol* Arena::CreateMaybeMessage<::Protocol>(Arena*);
template<> ::ProtocolEntry* Arena::CreateMaybeMessage<::ProtocolEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Output final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Output) */ {
 public:
  inline Output() : Output(nullptr) {}
  ~Output() override;
  explicit PROTOBUF_CONSTEXPR Output(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Output& default_instance() {
    return *internal_default_instance();
  }
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Output* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Output& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Output& from) {
    Output::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Output";
  }
  protected:
  explicit Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchStateFieldNumber = 1,
    kGcStateFieldNumber = 2,
    kProtocolFieldNumber = 3,
    kConfigFieldNumber = 4,
  };
  // optional .State match_state = 1;
  bool has_match_state() const;
  private:
  bool _internal_has_match_state() const;
  public:
  void clear_match_state();
  const ::State& match_state() const;
  PROTOBUF_NODISCARD ::State* release_match_state();
  ::State* mutable_match_state();
  void set_allocated_match_state(::State* match_state);
  private:
  const ::State& _internal_match_state() const;
  ::State* _internal_mutable_match_state();
  public:
  void unsafe_arena_set_allocated_match_state(
      ::State* match_state);
  ::State* unsafe_arena_release_match_state();

  // optional .GcState gc_state = 2;
  bool has_gc_state() const;
  private:
  bool _internal_has_gc_state() const;
  public:
  void clear_gc_state();
  const ::GcState& gc_state() const;
  PROTOBUF_NODISCARD ::GcState* release_gc_state();
  ::GcState* mutable_gc_state();
  void set_allocated_gc_state(::GcState* gc_state);
  private:
  const ::GcState& _internal_gc_state() const;
  ::GcState* _internal_mutable_gc_state();
  public:
  void unsafe_arena_set_allocated_gc_state(
      ::GcState* gc_state);
  ::GcState* unsafe_arena_release_gc_state();

  // optional .Protocol protocol = 3;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const ::Protocol& protocol() const;
  PROTOBUF_NODISCARD ::Protocol* release_protocol();
  ::Protocol* mutable_protocol();
  void set_allocated_protocol(::Protocol* protocol);
  private:
  const ::Protocol& _internal_protocol() const;
  ::Protocol* _internal_mutable_protocol();
  public:
  void unsafe_arena_set_allocated_protocol(
      ::Protocol* protocol);
  ::Protocol* unsafe_arena_release_protocol();

  // optional .Config config = 4;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::Config& config() const;
  PROTOBUF_NODISCARD ::Config* release_config();
  ::Config* mutable_config();
  void set_allocated_config(::Config* config);
  private:
  const ::Config& _internal_config() const;
  ::Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::Config* config);
  ::Config* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:Output)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::State* match_state_;
    ::GcState* gc_state_;
    ::Protocol* protocol_;
    ::Config* config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fssl_5fgc_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Protocol final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol) */ {
 public:
  inline Protocol() : Protocol(nullptr) {}
  ~Protocol() override;
  explicit PROTOBUF_CONSTEXPR Protocol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Protocol(const Protocol& from);
  Protocol(Protocol&& from) noexcept
    : Protocol() {
    *this = ::std::move(from);
  }

  inline Protocol& operator=(const Protocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline Protocol& operator=(Protocol&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Protocol& default_instance() {
    return *internal_default_instance();
  }
  static inline const Protocol* internal_default_instance() {
    return reinterpret_cast<const Protocol*>(
               &_Protocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Protocol& a, Protocol& b) {
    a.Swap(&b);
  }
  inline void Swap(Protocol* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Protocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Protocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Protocol>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Protocol& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Protocol& from) {
    Protocol::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Protocol* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol";
  }
  protected:
  explicit Protocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 2,
    kDeltaFieldNumber = 1,
  };
  // repeated .ProtocolEntry entry = 2;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::ProtocolEntry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtocolEntry >*
      mutable_entry();
  private:
  const ::ProtocolEntry& _internal_entry(int index) const;
  ::ProtocolEntry* _internal_add_entry();
  public:
  const ::ProtocolEntry& entry(int index) const;
  ::ProtocolEntry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtocolEntry >&
      entry() const;

  // optional bool delta = 1;
  bool has_delta() const;
  private:
  bool _internal_has_delta() const;
  public:
  void clear_delta();
  bool delta() const;
  void set_delta(bool value);
  private:
  bool _internal_delta() const;
  void _internal_set_delta(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtocolEntry > entry_;
    bool delta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fssl_5fgc_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ProtocolEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtocolEntry) */ {
 public:
  inline ProtocolEntry() : ProtocolEntry(nullptr) {}
  ~ProtocolEntry() override;
  explicit PROTOBUF_CONSTEXPR ProtocolEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolEntry(const ProtocolEntry& from);
  ProtocolEntry(ProtocolEntry&& from) noexcept
    : ProtocolEntry() {
    *this = ::std::move(from);
  }

  inline ProtocolEntry& operator=(const ProtocolEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolEntry& operator=(ProtocolEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolEntry* internal_default_instance() {
    return reinterpret_cast<const ProtocolEntry*>(
               &_ProtocolEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProtocolEntry& a, ProtocolEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtocolEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtocolEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtocolEntry& from) {
    ProtocolEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtocolEntry";
  }
  protected:
  explicit ProtocolEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeFieldNumber = 2,
    kMatchTimeElapsedFieldNumber = 3,
    kStageTimeElapsedFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // optional .Change change = 2;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  const ::Change& change() const;
  PROTOBUF_NODISCARD ::Change* release_change();
  ::Change* mutable_change();
  void set_allocated_change(::Change* change);
  private:
  const ::Change& _internal_change() const;
  ::Change* _internal_mutable_change();
  public:
  void unsafe_arena_set_allocated_change(
      ::Change* change);
  ::Change* unsafe_arena_release_change();

  // optional .google.protobuf.Duration match_time_elapsed = 3;
  bool has_match_time_elapsed() const;
  private:
  bool _internal_has_match_time_elapsed() const;
  public:
  void clear_match_time_elapsed();
  const ::PROTOBUF_NAMESPACE_ID::Duration& match_time_elapsed() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_match_time_elapsed();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_match_time_elapsed();
  void set_allocated_match_time_elapsed(::PROTOBUF_NAMESPACE_ID::Duration* match_time_elapsed);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_match_time_elapsed() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_match_time_elapsed();
  public:
  void unsafe_arena_set_allocated_match_time_elapsed(
      ::PROTOBUF_NAMESPACE_ID::Duration* match_time_elapsed);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_match_time_elapsed();

  // optional .google.protobuf.Duration stage_time_elapsed = 4;
  bool has_stage_time_elapsed() const;
  private:
  bool _internal_has_stage_time_elapsed() const;
  public:
  void clear_stage_time_elapsed();
  const ::PROTOBUF_NAMESPACE_ID::Duration& stage_time_elapsed() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_stage_time_elapsed();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_stage_time_elapsed();
  void set_allocated_stage_time_elapsed(::PROTOBUF_NAMESPACE_ID::Duration* stage_time_elapsed);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_stage_time_elapsed() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_stage_time_elapsed();
  public:
  void unsafe_arena_set_allocated_stage_time_elapsed(
      ::PROTOBUF_NAMESPACE_ID::Duration* stage_time_elapsed);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_stage_time_elapsed();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtocolEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Change* change_;
    ::PROTOBUF_NAMESPACE_ID::Duration* match_time_elapsed_;
    ::PROTOBUF_NAMESPACE_ID::Duration* stage_time_elapsed_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fssl_5fgc_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Input final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  ~Input() override;
  explicit PROTOBUF_CONSTEXPR Input(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Input& default_instance() {
    return *internal_default_instance();
  }
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Input& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Input& from) {
    Input::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeFieldNumber = 1,
    kConfigDeltaFieldNumber = 3,
    kContinueActionFieldNumber = 4,
    kResetMatchFieldNumber = 2,
  };
  // optional .Change change = 1;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  const ::Change& change() const;
  PROTOBUF_NODISCARD ::Change* release_change();
  ::Change* mutable_change();
  void set_allocated_change(::Change* change);
  private:
  const ::Change& _internal_change() const;
  ::Change* _internal_mutable_change();
  public:
  void unsafe_arena_set_allocated_change(
      ::Change* change);
  ::Change* unsafe_arena_release_change();

  // optional .Config config_delta = 3;
  bool has_config_delta() const;
  private:
  bool _internal_has_config_delta() const;
  public:
  void clear_config_delta();
  const ::Config& config_delta() const;
  PROTOBUF_NODISCARD ::Config* release_config_delta();
  ::Config* mutable_config_delta();
  void set_allocated_config_delta(::Config* config_delta);
  private:
  const ::Config& _internal_config_delta() const;
  ::Config* _internal_mutable_config_delta();
  public:
  void unsafe_arena_set_allocated_config_delta(
      ::Config* config_delta);
  ::Config* unsafe_arena_release_config_delta();

  // optional .ContinueAction continue_action = 4;
  bool has_continue_action() const;
  private:
  bool _internal_has_continue_action() const;
  public:
  void clear_continue_action();
  const ::ContinueAction& continue_action() const;
  PROTOBUF_NODISCARD ::ContinueAction* release_continue_action();
  ::ContinueAction* mutable_continue_action();
  void set_allocated_continue_action(::ContinueAction* continue_action);
  private:
  const ::ContinueAction& _internal_continue_action() const;
  ::ContinueAction* _internal_mutable_continue_action();
  public:
  void unsafe_arena_set_allocated_continue_action(
      ::ContinueAction* continue_action);
  ::ContinueAction* unsafe_arena_release_continue_action();

  // optional bool reset_match = 2;
  bool has_reset_match() const;
  private:
  bool _internal_has_reset_match() const;
  public:
  void clear_reset_match();
  bool reset_match() const;
  void set_reset_match(bool value);
  private:
  bool _internal_reset_match() const;
  void _internal_set_reset_match(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Change* change_;
    ::Config* config_delta_;
    ::ContinueAction* continue_action_;
    bool reset_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fssl_5fgc_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Output

// optional .State match_state = 1;
inline bool Output::_internal_has_match_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_state_ != nullptr);
  return value;
}
inline bool Output::has_match_state() const {
  return _internal_has_match_state();
}
inline const ::State& Output::_internal_match_state() const {
  const ::State* p = _impl_.match_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::State&>(
      ::_State_default_instance_);
}
inline const ::State& Output::match_state() const {
  // @@protoc_insertion_point(field_get:Output.match_state)
  return _internal_match_state();
}
inline void Output::unsafe_arena_set_allocated_match_state(
    ::State* match_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_state_);
  }
  _impl_.match_state_ = match_state;
  if (match_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Output.match_state)
}
inline ::State* Output::release_match_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::State* temp = _impl_.match_state_;
  _impl_.match_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::State* Output::unsafe_arena_release_match_state() {
  // @@protoc_insertion_point(field_release:Output.match_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::State* temp = _impl_.match_state_;
  _impl_.match_state_ = nullptr;
  return temp;
}
inline ::State* Output::_internal_mutable_match_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.match_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::State>(GetArenaForAllocation());
    _impl_.match_state_ = p;
  }
  return _impl_.match_state_;
}
inline ::State* Output::mutable_match_state() {
  ::State* _msg = _internal_mutable_match_state();
  // @@protoc_insertion_point(field_mutable:Output.match_state)
  return _msg;
}
inline void Output::set_allocated_match_state(::State* match_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_state_);
  }
  if (match_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_state));
    if (message_arena != submessage_arena) {
      match_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.match_state_ = match_state;
  // @@protoc_insertion_point(field_set_allocated:Output.match_state)
}

// optional .GcState gc_state = 2;
inline bool Output::_internal_has_gc_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gc_state_ != nullptr);
  return value;
}
inline bool Output::has_gc_state() const {
  return _internal_has_gc_state();
}
inline const ::GcState& Output::_internal_gc_state() const {
  const ::GcState* p = _impl_.gc_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::GcState&>(
      ::_GcState_default_instance_);
}
inline const ::GcState& Output::gc_state() const {
  // @@protoc_insertion_point(field_get:Output.gc_state)
  return _internal_gc_state();
}
inline void Output::unsafe_arena_set_allocated_gc_state(
    ::GcState* gc_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gc_state_);
  }
  _impl_.gc_state_ = gc_state;
  if (gc_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Output.gc_state)
}
inline ::GcState* Output::release_gc_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::GcState* temp = _impl_.gc_state_;
  _impl_.gc_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GcState* Output::unsafe_arena_release_gc_state() {
  // @@protoc_insertion_point(field_release:Output.gc_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::GcState* temp = _impl_.gc_state_;
  _impl_.gc_state_ = nullptr;
  return temp;
}
inline ::GcState* Output::_internal_mutable_gc_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.gc_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::GcState>(GetArenaForAllocation());
    _impl_.gc_state_ = p;
  }
  return _impl_.gc_state_;
}
inline ::GcState* Output::mutable_gc_state() {
  ::GcState* _msg = _internal_mutable_gc_state();
  // @@protoc_insertion_point(field_mutable:Output.gc_state)
  return _msg;
}
inline void Output::set_allocated_gc_state(::GcState* gc_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gc_state_);
  }
  if (gc_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gc_state));
    if (message_arena != submessage_arena) {
      gc_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gc_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.gc_state_ = gc_state;
  // @@protoc_insertion_point(field_set_allocated:Output.gc_state)
}

// optional .Protocol protocol = 3;
inline bool Output::_internal_has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.protocol_ != nullptr);
  return value;
}
inline bool Output::has_protocol() const {
  return _internal_has_protocol();
}
inline void Output::clear_protocol() {
  if (_impl_.protocol_ != nullptr) _impl_.protocol_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Protocol& Output::_internal_protocol() const {
  const ::Protocol* p = _impl_.protocol_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol&>(
      ::_Protocol_default_instance_);
}
inline const ::Protocol& Output::protocol() const {
  // @@protoc_insertion_point(field_get:Output.protocol)
  return _internal_protocol();
}
inline void Output::unsafe_arena_set_allocated_protocol(
    ::Protocol* protocol) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.protocol_);
  }
  _impl_.protocol_ = protocol;
  if (protocol) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Output.protocol)
}
inline ::Protocol* Output::release_protocol() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Protocol* temp = _impl_.protocol_;
  _impl_.protocol_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol* Output::unsafe_arena_release_protocol() {
  // @@protoc_insertion_point(field_release:Output.protocol)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Protocol* temp = _impl_.protocol_;
  _impl_.protocol_ = nullptr;
  return temp;
}
inline ::Protocol* Output::_internal_mutable_protocol() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.protocol_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol>(GetArenaForAllocation());
    _impl_.protocol_ = p;
  }
  return _impl_.protocol_;
}
inline ::Protocol* Output::mutable_protocol() {
  ::Protocol* _msg = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:Output.protocol)
  return _msg;
}
inline void Output::set_allocated_protocol(::Protocol* protocol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.protocol_;
  }
  if (protocol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(protocol);
    if (message_arena != submessage_arena) {
      protocol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.protocol_ = protocol;
  // @@protoc_insertion_point(field_set_allocated:Output.protocol)
}

// optional .Config config = 4;
inline bool Output::_internal_has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline bool Output::has_config() const {
  return _internal_has_config();
}
inline const ::Config& Output::_internal_config() const {
  const ::Config* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config&>(
      ::_Config_default_instance_);
}
inline const ::Config& Output::config() const {
  // @@protoc_insertion_point(field_get:Output.config)
  return _internal_config();
}
inline void Output::unsafe_arena_set_allocated_config(
    ::Config* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Output.config)
}
inline ::Config* Output::release_config() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Config* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Config* Output::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:Output.config)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Config* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::Config* Output::_internal_mutable_config() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::Config* Output::mutable_config() {
  ::Config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:Output.config)
  return _msg;
}
inline void Output::set_allocated_config(::Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:Output.config)
}

// -------------------------------------------------------------------

// Protocol

// optional bool delta = 1;
inline bool Protocol::_internal_has_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Protocol::has_delta() const {
  return _internal_has_delta();
}
inline void Protocol::clear_delta() {
  _impl_.delta_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Protocol::_internal_delta() const {
  return _impl_.delta_;
}
inline bool Protocol::delta() const {
  // @@protoc_insertion_point(field_get:Protocol.delta)
  return _internal_delta();
}
inline void Protocol::_internal_set_delta(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delta_ = value;
}
inline void Protocol::set_delta(bool value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:Protocol.delta)
}

// repeated .ProtocolEntry entry = 2;
inline int Protocol::_internal_entry_size() const {
  return _impl_.entry_.size();
}
inline int Protocol::entry_size() const {
  return _internal_entry_size();
}
inline void Protocol::clear_entry() {
  _impl_.entry_.Clear();
}
inline ::ProtocolEntry* Protocol::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.entry)
  return _impl_.entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtocolEntry >*
Protocol::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.entry)
  return &_impl_.entry_;
}
inline const ::ProtocolEntry& Protocol::_internal_entry(int index) const {
  return _impl_.entry_.Get(index);
}
inline const ::ProtocolEntry& Protocol::entry(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.entry)
  return _internal_entry(index);
}
inline ::ProtocolEntry* Protocol::_internal_add_entry() {
  return _impl_.entry_.Add();
}
inline ::ProtocolEntry* Protocol::add_entry() {
  ::ProtocolEntry* _add = _internal_add_entry();
  // @@protoc_insertion_point(field_add:Protocol.entry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtocolEntry >&
Protocol::entry() const {
  // @@protoc_insertion_point(field_list:Protocol.entry)
  return _impl_.entry_;
}

// -------------------------------------------------------------------

// ProtocolEntry

// optional int32 id = 1;
inline bool ProtocolEntry::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProtocolEntry::has_id() const {
  return _internal_has_id();
}
inline void ProtocolEntry::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ProtocolEntry::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ProtocolEntry::id() const {
  // @@protoc_insertion_point(field_get:ProtocolEntry.id)
  return _internal_id();
}
inline void ProtocolEntry::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}
inline void ProtocolEntry::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ProtocolEntry.id)
}

// optional .Change change = 2;
inline bool ProtocolEntry::_internal_has_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.change_ != nullptr);
  return value;
}
inline bool ProtocolEntry::has_change() const {
  return _internal_has_change();
}
inline const ::Change& ProtocolEntry::_internal_change() const {
  const ::Change* p = _impl_.change_;
  return p != nullptr ? *p : reinterpret_cast<const ::Change&>(
      ::_Change_default_instance_);
}
inline const ::Change& ProtocolEntry::change() const {
  // @@protoc_insertion_point(field_get:ProtocolEntry.change)
  return _internal_change();
}
inline void ProtocolEntry::unsafe_arena_set_allocated_change(
    ::Change* change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.change_);
  }
  _impl_.change_ = change;
  if (change) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtocolEntry.change)
}
inline ::Change* ProtocolEntry::release_change() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Change* temp = _impl_.change_;
  _impl_.change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Change* ProtocolEntry::unsafe_arena_release_change() {
  // @@protoc_insertion_point(field_release:ProtocolEntry.change)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Change* temp = _impl_.change_;
  _impl_.change_ = nullptr;
  return temp;
}
inline ::Change* ProtocolEntry::_internal_mutable_change() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.change_ == nullptr) {
    auto* p = CreateMaybeMessage<::Change>(GetArenaForAllocation());
    _impl_.change_ = p;
  }
  return _impl_.change_;
}
inline ::Change* ProtocolEntry::mutable_change() {
  ::Change* _msg = _internal_mutable_change();
  // @@protoc_insertion_point(field_mutable:ProtocolEntry.change)
  return _msg;
}
inline void ProtocolEntry::set_allocated_change(::Change* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.change_);
  }
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change));
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.change_ = change;
  // @@protoc_insertion_point(field_set_allocated:ProtocolEntry.change)
}

// optional .google.protobuf.Duration match_time_elapsed = 3;
inline bool ProtocolEntry::_internal_has_match_time_elapsed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_time_elapsed_ != nullptr);
  return value;
}
inline bool ProtocolEntry::has_match_time_elapsed() const {
  return _internal_has_match_time_elapsed();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ProtocolEntry::_internal_match_time_elapsed() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.match_time_elapsed_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ProtocolEntry::match_time_elapsed() const {
  // @@protoc_insertion_point(field_get:ProtocolEntry.match_time_elapsed)
  return _internal_match_time_elapsed();
}
inline void ProtocolEntry::unsafe_arena_set_allocated_match_time_elapsed(
    ::PROTOBUF_NAMESPACE_ID::Duration* match_time_elapsed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_time_elapsed_);
  }
  _impl_.match_time_elapsed_ = match_time_elapsed;
  if (match_time_elapsed) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtocolEntry.match_time_elapsed)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProtocolEntry::release_match_time_elapsed() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.match_time_elapsed_;
  _impl_.match_time_elapsed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProtocolEntry::unsafe_arena_release_match_time_elapsed() {
  // @@protoc_insertion_point(field_release:ProtocolEntry.match_time_elapsed)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.match_time_elapsed_;
  _impl_.match_time_elapsed_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProtocolEntry::_internal_mutable_match_time_elapsed() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.match_time_elapsed_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.match_time_elapsed_ = p;
  }
  return _impl_.match_time_elapsed_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProtocolEntry::mutable_match_time_elapsed() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_match_time_elapsed();
  // @@protoc_insertion_point(field_mutable:ProtocolEntry.match_time_elapsed)
  return _msg;
}
inline void ProtocolEntry::set_allocated_match_time_elapsed(::PROTOBUF_NAMESPACE_ID::Duration* match_time_elapsed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_time_elapsed_);
  }
  if (match_time_elapsed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_time_elapsed));
    if (message_arena != submessage_arena) {
      match_time_elapsed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_time_elapsed, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.match_time_elapsed_ = match_time_elapsed;
  // @@protoc_insertion_point(field_set_allocated:ProtocolEntry.match_time_elapsed)
}

// optional .google.protobuf.Duration stage_time_elapsed = 4;
inline bool ProtocolEntry::_internal_has_stage_time_elapsed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stage_time_elapsed_ != nullptr);
  return value;
}
inline bool ProtocolEntry::has_stage_time_elapsed() const {
  return _internal_has_stage_time_elapsed();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ProtocolEntry::_internal_stage_time_elapsed() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.stage_time_elapsed_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ProtocolEntry::stage_time_elapsed() const {
  // @@protoc_insertion_point(field_get:ProtocolEntry.stage_time_elapsed)
  return _internal_stage_time_elapsed();
}
inline void ProtocolEntry::unsafe_arena_set_allocated_stage_time_elapsed(
    ::PROTOBUF_NAMESPACE_ID::Duration* stage_time_elapsed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stage_time_elapsed_);
  }
  _impl_.stage_time_elapsed_ = stage_time_elapsed;
  if (stage_time_elapsed) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtocolEntry.stage_time_elapsed)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProtocolEntry::release_stage_time_elapsed() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.stage_time_elapsed_;
  _impl_.stage_time_elapsed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProtocolEntry::unsafe_arena_release_stage_time_elapsed() {
  // @@protoc_insertion_point(field_release:ProtocolEntry.stage_time_elapsed)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.stage_time_elapsed_;
  _impl_.stage_time_elapsed_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProtocolEntry::_internal_mutable_stage_time_elapsed() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.stage_time_elapsed_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.stage_time_elapsed_ = p;
  }
  return _impl_.stage_time_elapsed_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProtocolEntry::mutable_stage_time_elapsed() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_stage_time_elapsed();
  // @@protoc_insertion_point(field_mutable:ProtocolEntry.stage_time_elapsed)
  return _msg;
}
inline void ProtocolEntry::set_allocated_stage_time_elapsed(::PROTOBUF_NAMESPACE_ID::Duration* stage_time_elapsed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stage_time_elapsed_);
  }
  if (stage_time_elapsed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stage_time_elapsed));
    if (message_arena != submessage_arena) {
      stage_time_elapsed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stage_time_elapsed, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.stage_time_elapsed_ = stage_time_elapsed;
  // @@protoc_insertion_point(field_set_allocated:ProtocolEntry.stage_time_elapsed)
}

// -------------------------------------------------------------------

// Input

// optional .Change change = 1;
inline bool Input::_internal_has_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.change_ != nullptr);
  return value;
}
inline bool Input::has_change() const {
  return _internal_has_change();
}
inline const ::Change& Input::_internal_change() const {
  const ::Change* p = _impl_.change_;
  return p != nullptr ? *p : reinterpret_cast<const ::Change&>(
      ::_Change_default_instance_);
}
inline const ::Change& Input::change() const {
  // @@protoc_insertion_point(field_get:Input.change)
  return _internal_change();
}
inline void Input::unsafe_arena_set_allocated_change(
    ::Change* change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.change_);
  }
  _impl_.change_ = change;
  if (change) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Input.change)
}
inline ::Change* Input::release_change() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Change* temp = _impl_.change_;
  _impl_.change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Change* Input::unsafe_arena_release_change() {
  // @@protoc_insertion_point(field_release:Input.change)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Change* temp = _impl_.change_;
  _impl_.change_ = nullptr;
  return temp;
}
inline ::Change* Input::_internal_mutable_change() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.change_ == nullptr) {
    auto* p = CreateMaybeMessage<::Change>(GetArenaForAllocation());
    _impl_.change_ = p;
  }
  return _impl_.change_;
}
inline ::Change* Input::mutable_change() {
  ::Change* _msg = _internal_mutable_change();
  // @@protoc_insertion_point(field_mutable:Input.change)
  return _msg;
}
inline void Input::set_allocated_change(::Change* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.change_);
  }
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change));
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.change_ = change;
  // @@protoc_insertion_point(field_set_allocated:Input.change)
}

// optional bool reset_match = 2;
inline bool Input::_internal_has_reset_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Input::has_reset_match() const {
  return _internal_has_reset_match();
}
inline void Input::clear_reset_match() {
  _impl_.reset_match_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Input::_internal_reset_match() const {
  return _impl_.reset_match_;
}
inline bool Input::reset_match() const {
  // @@protoc_insertion_point(field_get:Input.reset_match)
  return _internal_reset_match();
}
inline void Input::_internal_set_reset_match(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.reset_match_ = value;
}
inline void Input::set_reset_match(bool value) {
  _internal_set_reset_match(value);
  // @@protoc_insertion_point(field_set:Input.reset_match)
}

// optional .Config config_delta = 3;
inline bool Input::_internal_has_config_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_delta_ != nullptr);
  return value;
}
inline bool Input::has_config_delta() const {
  return _internal_has_config_delta();
}
inline const ::Config& Input::_internal_config_delta() const {
  const ::Config* p = _impl_.config_delta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config&>(
      ::_Config_default_instance_);
}
inline const ::Config& Input::config_delta() const {
  // @@protoc_insertion_point(field_get:Input.config_delta)
  return _internal_config_delta();
}
inline void Input::unsafe_arena_set_allocated_config_delta(
    ::Config* config_delta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_delta_);
  }
  _impl_.config_delta_ = config_delta;
  if (config_delta) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Input.config_delta)
}
inline ::Config* Input::release_config_delta() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Config* temp = _impl_.config_delta_;
  _impl_.config_delta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Config* Input::unsafe_arena_release_config_delta() {
  // @@protoc_insertion_point(field_release:Input.config_delta)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Config* temp = _impl_.config_delta_;
  _impl_.config_delta_ = nullptr;
  return temp;
}
inline ::Config* Input::_internal_mutable_config_delta() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.config_delta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config>(GetArenaForAllocation());
    _impl_.config_delta_ = p;
  }
  return _impl_.config_delta_;
}
inline ::Config* Input::mutable_config_delta() {
  ::Config* _msg = _internal_mutable_config_delta();
  // @@protoc_insertion_point(field_mutable:Input.config_delta)
  return _msg;
}
inline void Input::set_allocated_config_delta(::Config* config_delta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_delta_);
  }
  if (config_delta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_delta));
    if (message_arena != submessage_arena) {
      config_delta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_delta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.config_delta_ = config_delta;
  // @@protoc_insertion_point(field_set_allocated:Input.config_delta)
}

// optional .ContinueAction continue_action = 4;
inline bool Input::_internal_has_continue_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.continue_action_ != nullptr);
  return value;
}
inline bool Input::has_continue_action() const {
  return _internal_has_continue_action();
}
inline const ::ContinueAction& Input::_internal_continue_action() const {
  const ::ContinueAction* p = _impl_.continue_action_;
  return p != nullptr ? *p : reinterpret_cast<const ::ContinueAction&>(
      ::_ContinueAction_default_instance_);
}
inline const ::ContinueAction& Input::continue_action() const {
  // @@protoc_insertion_point(field_get:Input.continue_action)
  return _internal_continue_action();
}
inline void Input::unsafe_arena_set_allocated_continue_action(
    ::ContinueAction* continue_action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.continue_action_);
  }
  _impl_.continue_action_ = continue_action;
  if (continue_action) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Input.continue_action)
}
inline ::ContinueAction* Input::release_continue_action() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ContinueAction* temp = _impl_.continue_action_;
  _impl_.continue_action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ContinueAction* Input::unsafe_arena_release_continue_action() {
  // @@protoc_insertion_point(field_release:Input.continue_action)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ContinueAction* temp = _impl_.continue_action_;
  _impl_.continue_action_ = nullptr;
  return temp;
}
inline ::ContinueAction* Input::_internal_mutable_continue_action() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.continue_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::ContinueAction>(GetArenaForAllocation());
    _impl_.continue_action_ = p;
  }
  return _impl_.continue_action_;
}
inline ::ContinueAction* Input::mutable_continue_action() {
  ::ContinueAction* _msg = _internal_mutable_continue_action();
  // @@protoc_insertion_point(field_mutable:Input.continue_action)
  return _msg;
}
inline void Input::set_allocated_continue_action(::ContinueAction* continue_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.continue_action_);
  }
  if (continue_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(continue_action));
    if (message_arena != submessage_arena) {
      continue_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continue_action, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.continue_action_ = continue_action;
  // @@protoc_insertion_point(field_set_allocated:Input.continue_action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2fssl_5fgc_5fapi_2eproto
