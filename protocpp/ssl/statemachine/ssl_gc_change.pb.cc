// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statemachine/ssl_gc_change.proto

#include "statemachine/ssl_gc_change.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR StateChange::StateChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_pre_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.change_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.id_)*/0} {}
struct StateChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateChangeDefaultTypeInternal() {}
  union {
    StateChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateChangeDefaultTypeInternal _StateChange_default_instance_;
PROTOBUF_CONSTEXPR Change_NewCommand::Change_NewCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.command_)*/nullptr} {}
struct Change_NewCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_NewCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_NewCommandDefaultTypeInternal() {}
  union {
    Change_NewCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_NewCommandDefaultTypeInternal _Change_NewCommand_default_instance_;
PROTOBUF_CONSTEXPR Change_ChangeStage::Change_ChangeStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_stage_)*/0} {}
struct Change_ChangeStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_ChangeStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_ChangeStageDefaultTypeInternal() {}
  union {
    Change_ChangeStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_ChangeStageDefaultTypeInternal _Change_ChangeStage_default_instance_;
PROTOBUF_CONSTEXPR Change_SetBallPlacementPos::Change_SetBallPlacementPos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pos_)*/nullptr} {}
struct Change_SetBallPlacementPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_SetBallPlacementPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_SetBallPlacementPosDefaultTypeInternal() {}
  union {
    Change_SetBallPlacementPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_SetBallPlacementPosDefaultTypeInternal _Change_SetBallPlacementPos_default_instance_;
PROTOBUF_CONSTEXPR Change_AddYellowCard::Change_AddYellowCard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.caused_by_game_event_)*/nullptr
  , /*decltype(_impl_.for_team_)*/0} {}
struct Change_AddYellowCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_AddYellowCardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_AddYellowCardDefaultTypeInternal() {}
  union {
    Change_AddYellowCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_AddYellowCardDefaultTypeInternal _Change_AddYellowCard_default_instance_;
PROTOBUF_CONSTEXPR Change_AddRedCard::Change_AddRedCard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.caused_by_game_event_)*/nullptr
  , /*decltype(_impl_.for_team_)*/0} {}
struct Change_AddRedCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_AddRedCardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_AddRedCardDefaultTypeInternal() {}
  union {
    Change_AddRedCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_AddRedCardDefaultTypeInternal _Change_AddRedCard_default_instance_;
PROTOBUF_CONSTEXPR Change_YellowCardOver::Change_YellowCardOver(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.for_team_)*/0} {}
struct Change_YellowCardOverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_YellowCardOverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_YellowCardOverDefaultTypeInternal() {}
  union {
    Change_YellowCardOver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_YellowCardOverDefaultTypeInternal _Change_YellowCardOver_default_instance_;
PROTOBUF_CONSTEXPR Change_AddGameEvent::Change_AddGameEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_event_)*/nullptr} {}
struct Change_AddGameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_AddGameEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_AddGameEventDefaultTypeInternal() {}
  union {
    Change_AddGameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_AddGameEventDefaultTypeInternal _Change_AddGameEvent_default_instance_;
PROTOBUF_CONSTEXPR Change_AddPassiveGameEvent::Change_AddPassiveGameEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_event_)*/nullptr} {}
struct Change_AddPassiveGameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_AddPassiveGameEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_AddPassiveGameEventDefaultTypeInternal() {}
  union {
    Change_AddPassiveGameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_AddPassiveGameEventDefaultTypeInternal _Change_AddPassiveGameEvent_default_instance_;
PROTOBUF_CONSTEXPR Change_AddProposal::Change_AddProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proposal_)*/nullptr} {}
struct Change_AddProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_AddProposalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_AddProposalDefaultTypeInternal() {}
  union {
    Change_AddProposal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_AddProposalDefaultTypeInternal _Change_AddProposal_default_instance_;
PROTOBUF_CONSTEXPR Change_AcceptProposalGroup::Change_AcceptProposalGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accepted_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Change_AcceptProposalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_AcceptProposalGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_AcceptProposalGroupDefaultTypeInternal() {}
  union {
    Change_AcceptProposalGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_AcceptProposalGroupDefaultTypeInternal _Change_AcceptProposalGroup_default_instance_;
PROTOBUF_CONSTEXPR Change_UpdateConfig::Change_UpdateConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_robots_per_team_)*/nullptr
  , /*decltype(_impl_.division_)*/0
  , /*decltype(_impl_.first_kickoff_team_)*/0
  , /*decltype(_impl_.match_type_)*/0} {}
struct Change_UpdateConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_UpdateConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_UpdateConfigDefaultTypeInternal() {}
  union {
    Change_UpdateConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_UpdateConfigDefaultTypeInternal _Change_UpdateConfig_default_instance_;
PROTOBUF_CONSTEXPR Change_UpdateTeamState::Change_UpdateTeamState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_name_)*/nullptr
  , /*decltype(_impl_.goals_)*/nullptr
  , /*decltype(_impl_.goalkeeper_)*/nullptr
  , /*decltype(_impl_.timeouts_left_)*/nullptr
  , /*decltype(_impl_.timeout_time_left_)*/nullptr
  , /*decltype(_impl_.on_positive_half_)*/nullptr
  , /*decltype(_impl_.ball_placement_failures_)*/nullptr
  , /*decltype(_impl_.can_place_ball_)*/nullptr
  , /*decltype(_impl_.requests_bot_substitution_)*/nullptr
  , /*decltype(_impl_.red_card_)*/nullptr
  , /*decltype(_impl_.foul_)*/nullptr
  , /*decltype(_impl_.remove_yellow_card_)*/nullptr
  , /*decltype(_impl_.remove_red_card_)*/nullptr
  , /*decltype(_impl_.remove_foul_)*/nullptr
  , /*decltype(_impl_.requests_timeout_)*/nullptr
  , /*decltype(_impl_.requests_challenge_)*/nullptr
  , /*decltype(_impl_.requests_emergency_stop_)*/nullptr
  , /*decltype(_impl_.yellow_card_)*/nullptr
  , /*decltype(_impl_.challenge_flags_left_)*/nullptr
  , /*decltype(_impl_.bot_substitutions_left_)*/nullptr
  , /*decltype(_impl_.for_team_)*/0
  , /*decltype(_impl_.hull_color_)*/0} {}
struct Change_UpdateTeamStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_UpdateTeamStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_UpdateTeamStateDefaultTypeInternal() {}
  union {
    Change_UpdateTeamState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_UpdateTeamStateDefaultTypeInternal _Change_UpdateTeamState_default_instance_;
PROTOBUF_CONSTEXPR Change_SwitchColors::Change_SwitchColors(
    ::_pbi::ConstantInitialized) {}
struct Change_SwitchColorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_SwitchColorsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_SwitchColorsDefaultTypeInternal() {}
  union {
    Change_SwitchColors _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_SwitchColorsDefaultTypeInternal _Change_SwitchColors_default_instance_;
PROTOBUF_CONSTEXPR Change_Revert::Change_Revert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.change_id_)*/0} {}
struct Change_RevertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_RevertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_RevertDefaultTypeInternal() {}
  union {
    Change_Revert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_RevertDefaultTypeInternal _Change_Revert_default_instance_;
PROTOBUF_CONSTEXPR Change_NewGameState::Change_NewGameState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_state_)*/nullptr} {}
struct Change_NewGameStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_NewGameStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_NewGameStateDefaultTypeInternal() {}
  union {
    Change_NewGameState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_NewGameStateDefaultTypeInternal _Change_NewGameState_default_instance_;
PROTOBUF_CONSTEXPR Change_SetStatusMessage::Change_SetStatusMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Change_SetStatusMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Change_SetStatusMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Change_SetStatusMessageDefaultTypeInternal() {}
  union {
    Change_SetStatusMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Change_SetStatusMessageDefaultTypeInternal _Change_SetStatusMessage_default_instance_;
PROTOBUF_CONSTEXPR Change::Change(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.origin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.revertible_)*/false
  , /*decltype(_impl_.change_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeDefaultTypeInternal() {}
  union {
    Change _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeDefaultTypeInternal _Change_default_instance_;
static ::_pb::Metadata file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[18];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_statemachine_2fssl_5fgc_5fchange_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_statemachine_2fssl_5fgc_5fchange_2eproto = nullptr;

const uint32_t TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::StateChange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::StateChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StateChange, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::StateChange, _impl_.state_pre_),
  PROTOBUF_FIELD_OFFSET(::StateChange, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::StateChange, _impl_.change_),
  PROTOBUF_FIELD_OFFSET(::StateChange, _impl_.timestamp_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Change_NewCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_NewCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_NewCommand, _impl_.command_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_ChangeStage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_ChangeStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_ChangeStage, _impl_.new_stage_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_SetBallPlacementPos, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_SetBallPlacementPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_SetBallPlacementPos, _impl_.pos_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AddYellowCard, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AddYellowCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_AddYellowCard, _impl_.for_team_),
  PROTOBUF_FIELD_OFFSET(::Change_AddYellowCard, _impl_.caused_by_game_event_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AddRedCard, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AddRedCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_AddRedCard, _impl_.for_team_),
  PROTOBUF_FIELD_OFFSET(::Change_AddRedCard, _impl_.caused_by_game_event_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Change_YellowCardOver, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_YellowCardOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_YellowCardOver, _impl_.for_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AddGameEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AddGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_AddGameEvent, _impl_.game_event_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AddPassiveGameEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AddPassiveGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_AddPassiveGameEvent, _impl_.game_event_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AddProposal, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AddProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_AddProposal, _impl_.proposal_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AcceptProposalGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AcceptProposalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_AcceptProposalGroup, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::Change_AcceptProposalGroup, _impl_.accepted_by_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, _impl_.division_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, _impl_.first_kickoff_team_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, _impl_.match_type_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, _impl_.max_robots_per_team_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.for_team_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.team_name_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.goals_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.goalkeeper_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.timeouts_left_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.timeout_time_left_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.on_positive_half_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.ball_placement_failures_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.can_place_ball_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.challenge_flags_left_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.bot_substitutions_left_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.requests_bot_substitution_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.requests_timeout_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.requests_challenge_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.requests_emergency_stop_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.yellow_card_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.red_card_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.foul_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.remove_yellow_card_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.remove_red_card_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.remove_foul_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _impl_.hull_color_),
  20,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  18,
  19,
  8,
  14,
  15,
  16,
  17,
  9,
  10,
  11,
  12,
  13,
  21,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Change_SwitchColors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_Revert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_Revert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_Revert, _impl_.change_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_NewGameState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_NewGameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_NewGameState, _impl_.game_state_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_SetStatusMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_SetStatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change_SetStatusMessage, _impl_.status_message_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Change, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Change, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::Change, _impl_.revertible_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Change, _impl_.change_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::StateChange)},
  { 16, 23, -1, sizeof(::Change_NewCommand)},
  { 24, 31, -1, sizeof(::Change_ChangeStage)},
  { 32, 39, -1, sizeof(::Change_SetBallPlacementPos)},
  { 40, 48, -1, sizeof(::Change_AddYellowCard)},
  { 50, 58, -1, sizeof(::Change_AddRedCard)},
  { 60, 67, -1, sizeof(::Change_YellowCardOver)},
  { 68, 75, -1, sizeof(::Change_AddGameEvent)},
  { 76, 83, -1, sizeof(::Change_AddPassiveGameEvent)},
  { 84, 91, -1, sizeof(::Change_AddProposal)},
  { 92, 100, -1, sizeof(::Change_AcceptProposalGroup)},
  { 102, 112, -1, sizeof(::Change_UpdateConfig)},
  { 116, 144, -1, sizeof(::Change_UpdateTeamState)},
  { 166, -1, -1, sizeof(::Change_SwitchColors)},
  { 172, 179, -1, sizeof(::Change_Revert)},
  { 180, 187, -1, sizeof(::Change_NewGameState)},
  { 188, 195, -1, sizeof(::Change_SetStatusMessage)},
  { 196, 221, -1, sizeof(::Change)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_StateChange_default_instance_._instance,
  &::_Change_NewCommand_default_instance_._instance,
  &::_Change_ChangeStage_default_instance_._instance,
  &::_Change_SetBallPlacementPos_default_instance_._instance,
  &::_Change_AddYellowCard_default_instance_._instance,
  &::_Change_AddRedCard_default_instance_._instance,
  &::_Change_YellowCardOver_default_instance_._instance,
  &::_Change_AddGameEvent_default_instance_._instance,
  &::_Change_AddPassiveGameEvent_default_instance_._instance,
  &::_Change_AddProposal_default_instance_._instance,
  &::_Change_AcceptProposalGroup_default_instance_._instance,
  &::_Change_UpdateConfig_default_instance_._instance,
  &::_Change_UpdateTeamState_default_instance_._instance,
  &::_Change_SwitchColors_default_instance_._instance,
  &::_Change_Revert_default_instance_._instance,
  &::_Change_NewGameState_default_instance_._instance,
  &::_Change_SetStatusMessage_default_instance_._instance,
  &::_Change_default_instance_._instance,
};

const char descriptor_table_protodef_statemachine_2fssl_5fgc_5fchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n statemachine/ssl_gc_change.proto\032\030stat"
  "e/ssl_gc_state.proto\032\031state/ssl_gc_commo"
  "n.proto\032\032geom/ssl_gc_geometry.proto\032\035sta"
  "te/ssl_gc_game_event.proto\032\"state/ssl_gc"
  "_referee_message.proto\032\037google/protobuf/"
  "timestamp.proto\032\036google/protobuf/wrapper"
  "s.proto\"\223\001\n\013StateChange\022\n\n\002id\030\001 \001(\005\022\031\n\ts"
  "tate_pre\030\002 \001(\0132\006.State\022\025\n\005state\030\003 \001(\0132\006."
  "State\022\027\n\006change\030\004 \001(\0132\007.Change\022-\n\ttimest"
  "amp\030\005 \001(\0132\032.google.protobuf.Timestamp\"\364\026"
  "\n\006Change\022\016\n\006origin\030\001 \001(\t\022\022\n\nrevertible\030\020"
  " \001(\010\0220\n\022new_command_change\030\002 \001(\0132\022.Chang"
  "e.NewCommandH\000\0222\n\023change_stage_change\030\003 "
  "\001(\0132\023.Change.ChangeStageH\000\022D\n\035set_ball_p"
  "lacement_pos_change\030\004 \001(\0132\033.Change.SetBa"
  "llPlacementPosH\000\0227\n\026add_yellow_card_chan"
  "ge\030\005 \001(\0132\025.Change.AddYellowCardH\000\0221\n\023add"
  "_red_card_change\030\006 \001(\0132\022.Change.AddRedCa"
  "rdH\000\0229\n\027yellow_card_over_change\030\007 \001(\0132\026."
  "Change.YellowCardOverH\000\0225\n\025add_game_even"
  "t_change\030\010 \001(\0132\024.Change.AddGameEventH\000\022D"
  "\n\035add_passive_game_event_change\030\023 \001(\0132\033."
  "Change.AddPassiveGameEventH\000\0222\n\023add_prop"
  "osal_change\030\t \001(\0132\023.Change.AddProposalH\000"
  "\0224\n\024update_config_change\030\014 \001(\0132\024.Change."
  "UpdateConfigH\000\022;\n\030update_team_state_chan"
  "ge\030\r \001(\0132\027.Change.UpdateTeamStateH\000\0224\n\024s"
  "witch_colors_change\030\016 \001(\0132\024.Change.Switc"
  "hColorsH\000\022\'\n\rrevert_change\030\017 \001(\0132\016.Chang"
  "e.RevertH\000\0225\n\025new_game_state_change\030\021 \001("
  "\0132\024.Change.NewGameStateH\000\022C\n\034accept_prop"
  "osal_group_change\030\022 \001(\0132\033.Change.AcceptP"
  "roposalGroupH\000\022=\n\031set_status_message_cha"
  "nge\030\024 \001(\0132\030.Change.SetStatusMessageH\000\032\'\n"
  "\nNewCommand\022\031\n\007command\030\001 \001(\0132\010.Command\0320"
  "\n\013ChangeStage\022!\n\tnew_stage\030\001 \001(\0162\016.Refer"
  "ee.Stage\032,\n\023SetBallPlacementPos\022\025\n\003pos\030\001"
  " \001(\0132\010.Vector2\032R\n\rAddYellowCard\022\027\n\010for_t"
  "eam\030\001 \001(\0162\005.Team\022(\n\024caused_by_game_event"
  "\030\002 \001(\0132\n.GameEvent\032O\n\nAddRedCard\022\027\n\010for_"
  "team\030\001 \001(\0162\005.Team\022(\n\024caused_by_game_even"
  "t\030\002 \001(\0132\n.GameEvent\032)\n\016YellowCardOver\022\027\n"
  "\010for_team\030\001 \001(\0162\005.Team\032.\n\014AddGameEvent\022\036"
  "\n\ngame_event\030\001 \001(\0132\n.GameEvent\0325\n\023AddPas"
  "siveGameEvent\022\036\n\ngame_event\030\001 \001(\0132\n.Game"
  "Event\032*\n\013AddProposal\022\033\n\010proposal\030\001 \001(\0132\t"
  ".Proposal\032<\n\023AcceptProposalGroup\022\020\n\010grou"
  "p_id\030\003 \001(\t\022\023\n\013accepted_by\030\002 \001(\t\032\256\001\n\014Upda"
  "teConfig\022\033\n\010division\030\001 \001(\0162\t.Division\022!\n"
  "\022first_kickoff_team\030\002 \001(\0162\005.Team\022\036\n\nmatc"
  "h_type\030\004 \001(\0162\n.MatchType\0228\n\023max_robots_p"
  "er_team\030\005 \001(\0132\033.google.protobuf.Int32Val"
  "ueJ\004\010\003\020\004\032\306\010\n\017UpdateTeamState\022\027\n\010for_team"
  "\030\001 \001(\0162\005.Team\022/\n\tteam_name\030\002 \001(\0132\034.googl"
  "e.protobuf.StringValue\022*\n\005goals\030\003 \001(\0132\033."
  "google.protobuf.Int32Value\022/\n\ngoalkeeper"
  "\030\004 \001(\0132\033.google.protobuf.Int32Value\0222\n\rt"
  "imeouts_left\030\005 \001(\0132\033.google.protobuf.Int"
  "32Value\0227\n\021timeout_time_left\030\006 \001(\0132\034.goo"
  "gle.protobuf.StringValue\0224\n\020on_positive_"
  "half\030\007 \001(\0132\032.google.protobuf.BoolValue\022<"
  "\n\027ball_placement_failures\030\010 \001(\0132\033.google"
  ".protobuf.Int32Value\0222\n\016can_place_ball\030\t"
  " \001(\0132\032.google.protobuf.BoolValue\0229\n\024chal"
  "lenge_flags_left\030\025 \001(\0132\033.google.protobuf"
  ".Int32Value\022;\n\026bot_substitutions_left\030\026 "
  "\001(\0132\033.google.protobuf.Int32Value\022=\n\031requ"
  "ests_bot_substitution\030\n \001(\0132\032.google.pro"
  "tobuf.BoolValue\0224\n\020requests_timeout\030\021 \001("
  "\0132\032.google.protobuf.BoolValue\0226\n\022request"
  "s_challenge\030\022 \001(\0132\032.google.protobuf.Bool"
  "Value\022;\n\027requests_emergency_stop\030\023 \001(\0132\032"
  ".google.protobuf.BoolValue\022 \n\013yellow_car"
  "d\030\024 \001(\0132\013.YellowCard\022\032\n\010red_card\030\014 \001(\0132\010"
  ".RedCard\022\023\n\004foul\030\r \001(\0132\005.Foul\0228\n\022remove_"
  "yellow_card\030\016 \001(\0132\034.google.protobuf.UInt"
  "32Value\0225\n\017remove_red_card\030\017 \001(\0132\034.googl"
  "e.protobuf.UInt32Value\0221\n\013remove_foul\030\020 "
  "\001(\0132\034.google.protobuf.UInt32Value\022\036\n\nhul"
  "l_color\030\027 \001(\0162\n.HullColor\032\016\n\014SwitchColor"
  "s\032\033\n\006Revert\022\021\n\tchange_id\030\001 \001(\005\032.\n\014NewGam"
  "eState\022\036\n\ngame_state\030\001 \001(\0132\n.GameState\032*"
  "\n\020SetStatusMessage\022\026\n\016status_message\030\001 \001"
  "(\tB\010\n\006change"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_deps[7] = {
  &::descriptor_table_geom_2fssl_5fgc_5fgeometry_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_state_2fssl_5fgc_5fcommon_2eproto,
  &::descriptor_table_state_2fssl_5fgc_5fgame_5fevent_2eproto,
  &::descriptor_table_state_2fssl_5fgc_5freferee_5fmessage_2eproto,
  &::descriptor_table_state_2fssl_5fgc_5fstate_2eproto,
};
static ::_pbi::once_flag descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto = {
    false, false, 3332, descriptor_table_protodef_statemachine_2fssl_5fgc_5fchange_2eproto,
    "statemachine/ssl_gc_change.proto",
    &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once, descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_deps, 7, 18,
    schemas, file_default_instances, TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto::offsets,
    file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto, file_level_enum_descriptors_statemachine_2fssl_5fgc_5fchange_2eproto,
    file_level_service_descriptors_statemachine_2fssl_5fgc_5fchange_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter() {
  return &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_statemachine_2fssl_5fgc_5fchange_2eproto(&descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto);

// ===================================================================

class StateChange::_Internal {
 public:
  using HasBits = decltype(std::declval<StateChange>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::State& state_pre(const StateChange* msg);
  static void set_has_state_pre(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::State& state(const StateChange* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Change& change(const StateChange* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const StateChange* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::State&
StateChange::_Internal::state_pre(const StateChange* msg) {
  return *msg->_impl_.state_pre_;
}
const ::State&
StateChange::_Internal::state(const StateChange* msg) {
  return *msg->_impl_.state_;
}
const ::Change&
StateChange::_Internal::change(const StateChange* msg) {
  return *msg->_impl_.change_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StateChange::_Internal::timestamp(const StateChange* msg) {
  return *msg->_impl_.timestamp_;
}
void StateChange::clear_state_pre() {
  if (_impl_.state_pre_ != nullptr) _impl_.state_pre_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StateChange::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void StateChange::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
StateChange::StateChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StateChange)
}
StateChange::StateChange(const StateChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StateChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_pre_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.change_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state_pre()) {
    _this->_impl_.state_pre_ = new ::State(*from._impl_.state_pre_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::State(*from._impl_.state_);
  }
  if (from._internal_has_change()) {
    _this->_impl_.change_ = new ::Change(*from._impl_.change_);
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:StateChange)
}

inline void StateChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_pre_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.change_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.id_){0}
  };
}

StateChange::~StateChange() {
  // @@protoc_insertion_point(destructor:StateChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StateChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.state_pre_;
  if (this != internal_default_instance()) delete _impl_.state_;
  if (this != internal_default_instance()) delete _impl_.change_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void StateChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:StateChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.state_pre_ != nullptr);
      _impl_.state_pre_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.change_ != nullptr);
      _impl_.change_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .State state_pre = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state_pre(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Change change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StateChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StateChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .State state_pre = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state_pre(this),
        _Internal::state_pre(this).GetCachedSize(), target, stream);
  }

  // optional .State state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // optional .Change change = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::change(this),
        _Internal::change(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StateChange)
  return target;
}

size_t StateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StateChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .State state_pre = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_pre_);
    }

    // optional .State state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_);
    }

    // optional .Change change = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_);
    }

    // optional .google.protobuf.Timestamp timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StateChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StateChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StateChange::GetClassData() const { return &_class_data_; }


void StateChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StateChange*>(&to_msg);
  auto& from = static_cast<const StateChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StateChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_state_pre()->::State::MergeFrom(
          from._internal_state_pre());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_state()->::State::MergeFrom(
          from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_change()->::Change::MergeFrom(
          from._internal_change());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StateChange::CopyFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChange::IsInitialized() const {
  if (_internal_has_state_pre()) {
    if (!_impl_.state_pre_->IsInitialized()) return false;
  }
  if (_internal_has_state()) {
    if (!_impl_.state_->IsInitialized()) return false;
  }
  if (_internal_has_change()) {
    if (!_impl_.change_->IsInitialized()) return false;
  }
  return true;
}

void StateChange::InternalSwap(StateChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateChange, _impl_.id_)
      + sizeof(StateChange::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(StateChange, _impl_.state_pre_)>(
          reinterpret_cast<char*>(&_impl_.state_pre_),
          reinterpret_cast<char*>(&other->_impl_.state_pre_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[0]);
}

// ===================================================================

class Change_NewCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_NewCommand>()._impl_._has_bits_);
  static const ::Command& command(const Change_NewCommand* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Command&
Change_NewCommand::_Internal::command(const Change_NewCommand* msg) {
  return *msg->_impl_.command_;
}
void Change_NewCommand::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Change_NewCommand::Change_NewCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.NewCommand)
}
Change_NewCommand::Change_NewCommand(const Change_NewCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_NewCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command()) {
    _this->_impl_.command_ = new ::Command(*from._impl_.command_);
  }
  // @@protoc_insertion_point(copy_constructor:Change.NewCommand)
}

inline void Change_NewCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){nullptr}
  };
}

Change_NewCommand::~Change_NewCommand() {
  // @@protoc_insertion_point(destructor:Change.NewCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_NewCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.command_;
}

void Change_NewCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_NewCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.NewCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.command_ != nullptr);
    _impl_.command_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_NewCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_NewCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.NewCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Command command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.NewCommand)
  return target;
}

size_t Change_NewCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.NewCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Command command = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.command_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_NewCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_NewCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_NewCommand::GetClassData() const { return &_class_data_; }


void Change_NewCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_NewCommand*>(&to_msg);
  auto& from = static_cast<const Change_NewCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.NewCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_command()) {
    _this->_internal_mutable_command()->::Command::MergeFrom(
        from._internal_command());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_NewCommand::CopyFrom(const Change_NewCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.NewCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_NewCommand::IsInitialized() const {
  if (_internal_has_command()) {
    if (!_impl_.command_->IsInitialized()) return false;
  }
  return true;
}

void Change_NewCommand::InternalSwap(Change_NewCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.command_, other->_impl_.command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_NewCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[1]);
}

// ===================================================================

class Change_ChangeStage::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_ChangeStage>()._impl_._has_bits_);
  static void set_has_new_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Change_ChangeStage::Change_ChangeStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.ChangeStage)
}
Change_ChangeStage::Change_ChangeStage(const Change_ChangeStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_ChangeStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_stage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.new_stage_ = from._impl_.new_stage_;
  // @@protoc_insertion_point(copy_constructor:Change.ChangeStage)
}

inline void Change_ChangeStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_stage_){0}
  };
}

Change_ChangeStage::~Change_ChangeStage() {
  // @@protoc_insertion_point(destructor:Change.ChangeStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_ChangeStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Change_ChangeStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_ChangeStage::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.ChangeStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_stage_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_ChangeStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Referee.Stage new_stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Stage_IsValid(val))) {
            _internal_set_new_stage(static_cast<::Referee_Stage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_ChangeStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.ChangeStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Referee.Stage new_stage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_new_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.ChangeStage)
  return target;
}

size_t Change_ChangeStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.ChangeStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Referee.Stage new_stage = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_stage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_ChangeStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_ChangeStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_ChangeStage::GetClassData() const { return &_class_data_; }


void Change_ChangeStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_ChangeStage*>(&to_msg);
  auto& from = static_cast<const Change_ChangeStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.ChangeStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_new_stage()) {
    _this->_internal_set_new_stage(from._internal_new_stage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_ChangeStage::CopyFrom(const Change_ChangeStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.ChangeStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_ChangeStage::IsInitialized() const {
  return true;
}

void Change_ChangeStage::InternalSwap(Change_ChangeStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.new_stage_, other->_impl_.new_stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_ChangeStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[2]);
}

// ===================================================================

class Change_SetBallPlacementPos::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_SetBallPlacementPos>()._impl_._has_bits_);
  static const ::Vector2& pos(const Change_SetBallPlacementPos* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Vector2&
Change_SetBallPlacementPos::_Internal::pos(const Change_SetBallPlacementPos* msg) {
  return *msg->_impl_.pos_;
}
void Change_SetBallPlacementPos::clear_pos() {
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Change_SetBallPlacementPos::Change_SetBallPlacementPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.SetBallPlacementPos)
}
Change_SetBallPlacementPos::Change_SetBallPlacementPos(const Change_SetBallPlacementPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_SetBallPlacementPos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::Vector2(*from._impl_.pos_);
  }
  // @@protoc_insertion_point(copy_constructor:Change.SetBallPlacementPos)
}

inline void Change_SetBallPlacementPos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
  };
}

Change_SetBallPlacementPos::~Change_SetBallPlacementPos() {
  // @@protoc_insertion_point(destructor:Change.SetBallPlacementPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_SetBallPlacementPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void Change_SetBallPlacementPos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_SetBallPlacementPos::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.SetBallPlacementPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.pos_ != nullptr);
    _impl_.pos_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_SetBallPlacementPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Vector2 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_SetBallPlacementPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.SetBallPlacementPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Vector2 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.SetBallPlacementPos)
  return target;
}

size_t Change_SetBallPlacementPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.SetBallPlacementPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 pos = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_SetBallPlacementPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_SetBallPlacementPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_SetBallPlacementPos::GetClassData() const { return &_class_data_; }


void Change_SetBallPlacementPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_SetBallPlacementPos*>(&to_msg);
  auto& from = static_cast<const Change_SetBallPlacementPos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.SetBallPlacementPos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::Vector2::MergeFrom(
        from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_SetBallPlacementPos::CopyFrom(const Change_SetBallPlacementPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.SetBallPlacementPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_SetBallPlacementPos::IsInitialized() const {
  if (_internal_has_pos()) {
    if (!_impl_.pos_->IsInitialized()) return false;
  }
  return true;
}

void Change_SetBallPlacementPos::InternalSwap(Change_SetBallPlacementPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pos_, other->_impl_.pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_SetBallPlacementPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[3]);
}

// ===================================================================

class Change_AddYellowCard::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AddYellowCard>()._impl_._has_bits_);
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::GameEvent& caused_by_game_event(const Change_AddYellowCard* msg);
  static void set_has_caused_by_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GameEvent&
Change_AddYellowCard::_Internal::caused_by_game_event(const Change_AddYellowCard* msg) {
  return *msg->_impl_.caused_by_game_event_;
}
void Change_AddYellowCard::clear_caused_by_game_event() {
  if (_impl_.caused_by_game_event_ != nullptr) _impl_.caused_by_game_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Change_AddYellowCard::Change_AddYellowCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.AddYellowCard)
}
Change_AddYellowCard::Change_AddYellowCard(const Change_AddYellowCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_AddYellowCard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caused_by_game_event_){nullptr}
    , decltype(_impl_.for_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_caused_by_game_event()) {
    _this->_impl_.caused_by_game_event_ = new ::GameEvent(*from._impl_.caused_by_game_event_);
  }
  _this->_impl_.for_team_ = from._impl_.for_team_;
  // @@protoc_insertion_point(copy_constructor:Change.AddYellowCard)
}

inline void Change_AddYellowCard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caused_by_game_event_){nullptr}
    , decltype(_impl_.for_team_){0}
  };
}

Change_AddYellowCard::~Change_AddYellowCard() {
  // @@protoc_insertion_point(destructor:Change.AddYellowCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_AddYellowCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.caused_by_game_event_;
}

void Change_AddYellowCard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_AddYellowCard::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddYellowCard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.caused_by_game_event_ != nullptr);
    _impl_.caused_by_game_event_->Clear();
  }
  _impl_.for_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AddYellowCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Team for_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .GameEvent caused_by_game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_caused_by_game_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_AddYellowCard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddYellowCard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_for_team(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::caused_by_game_event(this),
        _Internal::caused_by_game_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddYellowCard)
  return target;
}

size_t Change_AddYellowCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddYellowCard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.caused_by_game_event_);
    }

    // optional .Team for_team = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_for_team());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_AddYellowCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_AddYellowCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_AddYellowCard::GetClassData() const { return &_class_data_; }


void Change_AddYellowCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_AddYellowCard*>(&to_msg);
  auto& from = static_cast<const Change_AddYellowCard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.AddYellowCard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_caused_by_game_event()->::GameEvent::MergeFrom(
          from._internal_caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.for_team_ = from._impl_.for_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_AddYellowCard::CopyFrom(const Change_AddYellowCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddYellowCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddYellowCard::IsInitialized() const {
  if (_internal_has_caused_by_game_event()) {
    if (!_impl_.caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddYellowCard::InternalSwap(Change_AddYellowCard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Change_AddYellowCard, _impl_.for_team_)
      + sizeof(Change_AddYellowCard::_impl_.for_team_)
      - PROTOBUF_FIELD_OFFSET(Change_AddYellowCard, _impl_.caused_by_game_event_)>(
          reinterpret_cast<char*>(&_impl_.caused_by_game_event_),
          reinterpret_cast<char*>(&other->_impl_.caused_by_game_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AddYellowCard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[4]);
}

// ===================================================================

class Change_AddRedCard::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AddRedCard>()._impl_._has_bits_);
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::GameEvent& caused_by_game_event(const Change_AddRedCard* msg);
  static void set_has_caused_by_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GameEvent&
Change_AddRedCard::_Internal::caused_by_game_event(const Change_AddRedCard* msg) {
  return *msg->_impl_.caused_by_game_event_;
}
void Change_AddRedCard::clear_caused_by_game_event() {
  if (_impl_.caused_by_game_event_ != nullptr) _impl_.caused_by_game_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Change_AddRedCard::Change_AddRedCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.AddRedCard)
}
Change_AddRedCard::Change_AddRedCard(const Change_AddRedCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_AddRedCard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caused_by_game_event_){nullptr}
    , decltype(_impl_.for_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_caused_by_game_event()) {
    _this->_impl_.caused_by_game_event_ = new ::GameEvent(*from._impl_.caused_by_game_event_);
  }
  _this->_impl_.for_team_ = from._impl_.for_team_;
  // @@protoc_insertion_point(copy_constructor:Change.AddRedCard)
}

inline void Change_AddRedCard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caused_by_game_event_){nullptr}
    , decltype(_impl_.for_team_){0}
  };
}

Change_AddRedCard::~Change_AddRedCard() {
  // @@protoc_insertion_point(destructor:Change.AddRedCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_AddRedCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.caused_by_game_event_;
}

void Change_AddRedCard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_AddRedCard::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddRedCard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.caused_by_game_event_ != nullptr);
    _impl_.caused_by_game_event_->Clear();
  }
  _impl_.for_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AddRedCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Team for_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .GameEvent caused_by_game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_caused_by_game_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_AddRedCard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddRedCard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_for_team(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::caused_by_game_event(this),
        _Internal::caused_by_game_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddRedCard)
  return target;
}

size_t Change_AddRedCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddRedCard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.caused_by_game_event_);
    }

    // optional .Team for_team = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_for_team());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_AddRedCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_AddRedCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_AddRedCard::GetClassData() const { return &_class_data_; }


void Change_AddRedCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_AddRedCard*>(&to_msg);
  auto& from = static_cast<const Change_AddRedCard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.AddRedCard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_caused_by_game_event()->::GameEvent::MergeFrom(
          from._internal_caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.for_team_ = from._impl_.for_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_AddRedCard::CopyFrom(const Change_AddRedCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddRedCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddRedCard::IsInitialized() const {
  if (_internal_has_caused_by_game_event()) {
    if (!_impl_.caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddRedCard::InternalSwap(Change_AddRedCard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Change_AddRedCard, _impl_.for_team_)
      + sizeof(Change_AddRedCard::_impl_.for_team_)
      - PROTOBUF_FIELD_OFFSET(Change_AddRedCard, _impl_.caused_by_game_event_)>(
          reinterpret_cast<char*>(&_impl_.caused_by_game_event_),
          reinterpret_cast<char*>(&other->_impl_.caused_by_game_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AddRedCard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[5]);
}

// ===================================================================

class Change_YellowCardOver::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_YellowCardOver>()._impl_._has_bits_);
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Change_YellowCardOver::Change_YellowCardOver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.YellowCardOver)
}
Change_YellowCardOver::Change_YellowCardOver(const Change_YellowCardOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_YellowCardOver* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.for_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.for_team_ = from._impl_.for_team_;
  // @@protoc_insertion_point(copy_constructor:Change.YellowCardOver)
}

inline void Change_YellowCardOver::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.for_team_){0}
  };
}

Change_YellowCardOver::~Change_YellowCardOver() {
  // @@protoc_insertion_point(destructor:Change.YellowCardOver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_YellowCardOver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Change_YellowCardOver::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_YellowCardOver::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.YellowCardOver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.for_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_YellowCardOver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Team for_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_YellowCardOver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.YellowCardOver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_for_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.YellowCardOver)
  return target;
}

size_t Change_YellowCardOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.YellowCardOver)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Team for_team = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_for_team());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_YellowCardOver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_YellowCardOver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_YellowCardOver::GetClassData() const { return &_class_data_; }


void Change_YellowCardOver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_YellowCardOver*>(&to_msg);
  auto& from = static_cast<const Change_YellowCardOver&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.YellowCardOver)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_for_team()) {
    _this->_internal_set_for_team(from._internal_for_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_YellowCardOver::CopyFrom(const Change_YellowCardOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.YellowCardOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_YellowCardOver::IsInitialized() const {
  return true;
}

void Change_YellowCardOver::InternalSwap(Change_YellowCardOver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.for_team_, other->_impl_.for_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_YellowCardOver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[6]);
}

// ===================================================================

class Change_AddGameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AddGameEvent>()._impl_._has_bits_);
  static const ::GameEvent& game_event(const Change_AddGameEvent* msg);
  static void set_has_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GameEvent&
Change_AddGameEvent::_Internal::game_event(const Change_AddGameEvent* msg) {
  return *msg->_impl_.game_event_;
}
void Change_AddGameEvent::clear_game_event() {
  if (_impl_.game_event_ != nullptr) _impl_.game_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Change_AddGameEvent::Change_AddGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.AddGameEvent)
}
Change_AddGameEvent::Change_AddGameEvent(const Change_AddGameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_AddGameEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_event_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_event()) {
    _this->_impl_.game_event_ = new ::GameEvent(*from._impl_.game_event_);
  }
  // @@protoc_insertion_point(copy_constructor:Change.AddGameEvent)
}

inline void Change_AddGameEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_event_){nullptr}
  };
}

Change_AddGameEvent::~Change_AddGameEvent() {
  // @@protoc_insertion_point(destructor:Change.AddGameEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_AddGameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_event_;
}

void Change_AddGameEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_AddGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddGameEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.game_event_ != nullptr);
    _impl_.game_event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AddGameEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .GameEvent game_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_AddGameEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddGameEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_event(this),
        _Internal::game_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddGameEvent)
  return target;
}

size_t Change_AddGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddGameEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .GameEvent game_event = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_AddGameEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_AddGameEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_AddGameEvent::GetClassData() const { return &_class_data_; }


void Change_AddGameEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_AddGameEvent*>(&to_msg);
  auto& from = static_cast<const Change_AddGameEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.AddGameEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_event()) {
    _this->_internal_mutable_game_event()->::GameEvent::MergeFrom(
        from._internal_game_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_AddGameEvent::CopyFrom(const Change_AddGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddGameEvent::IsInitialized() const {
  if (_internal_has_game_event()) {
    if (!_impl_.game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddGameEvent::InternalSwap(Change_AddGameEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.game_event_, other->_impl_.game_event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AddGameEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[7]);
}

// ===================================================================

class Change_AddPassiveGameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AddPassiveGameEvent>()._impl_._has_bits_);
  static const ::GameEvent& game_event(const Change_AddPassiveGameEvent* msg);
  static void set_has_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GameEvent&
Change_AddPassiveGameEvent::_Internal::game_event(const Change_AddPassiveGameEvent* msg) {
  return *msg->_impl_.game_event_;
}
void Change_AddPassiveGameEvent::clear_game_event() {
  if (_impl_.game_event_ != nullptr) _impl_.game_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Change_AddPassiveGameEvent::Change_AddPassiveGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.AddPassiveGameEvent)
}
Change_AddPassiveGameEvent::Change_AddPassiveGameEvent(const Change_AddPassiveGameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_AddPassiveGameEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_event_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_event()) {
    _this->_impl_.game_event_ = new ::GameEvent(*from._impl_.game_event_);
  }
  // @@protoc_insertion_point(copy_constructor:Change.AddPassiveGameEvent)
}

inline void Change_AddPassiveGameEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_event_){nullptr}
  };
}

Change_AddPassiveGameEvent::~Change_AddPassiveGameEvent() {
  // @@protoc_insertion_point(destructor:Change.AddPassiveGameEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_AddPassiveGameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_event_;
}

void Change_AddPassiveGameEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_AddPassiveGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddPassiveGameEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.game_event_ != nullptr);
    _impl_.game_event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AddPassiveGameEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .GameEvent game_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_AddPassiveGameEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddPassiveGameEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_event(this),
        _Internal::game_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddPassiveGameEvent)
  return target;
}

size_t Change_AddPassiveGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddPassiveGameEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .GameEvent game_event = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_AddPassiveGameEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_AddPassiveGameEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_AddPassiveGameEvent::GetClassData() const { return &_class_data_; }


void Change_AddPassiveGameEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_AddPassiveGameEvent*>(&to_msg);
  auto& from = static_cast<const Change_AddPassiveGameEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.AddPassiveGameEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_event()) {
    _this->_internal_mutable_game_event()->::GameEvent::MergeFrom(
        from._internal_game_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_AddPassiveGameEvent::CopyFrom(const Change_AddPassiveGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddPassiveGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddPassiveGameEvent::IsInitialized() const {
  if (_internal_has_game_event()) {
    if (!_impl_.game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddPassiveGameEvent::InternalSwap(Change_AddPassiveGameEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.game_event_, other->_impl_.game_event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AddPassiveGameEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[8]);
}

// ===================================================================

class Change_AddProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AddProposal>()._impl_._has_bits_);
  static const ::Proposal& proposal(const Change_AddProposal* msg);
  static void set_has_proposal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Proposal&
Change_AddProposal::_Internal::proposal(const Change_AddProposal* msg) {
  return *msg->_impl_.proposal_;
}
void Change_AddProposal::clear_proposal() {
  if (_impl_.proposal_ != nullptr) _impl_.proposal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Change_AddProposal::Change_AddProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.AddProposal)
}
Change_AddProposal::Change_AddProposal(const Change_AddProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_AddProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proposal()) {
    _this->_impl_.proposal_ = new ::Proposal(*from._impl_.proposal_);
  }
  // @@protoc_insertion_point(copy_constructor:Change.AddProposal)
}

inline void Change_AddProposal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_){nullptr}
  };
}

Change_AddProposal::~Change_AddProposal() {
  // @@protoc_insertion_point(destructor:Change.AddProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_AddProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.proposal_;
}

void Change_AddProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_AddProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddProposal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.proposal_ != nullptr);
    _impl_.proposal_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AddProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Proposal proposal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_AddProposal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddProposal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Proposal proposal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::proposal(this),
        _Internal::proposal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddProposal)
  return target;
}

size_t Change_AddProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddProposal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Proposal proposal = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proposal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_AddProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_AddProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_AddProposal::GetClassData() const { return &_class_data_; }


void Change_AddProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_AddProposal*>(&to_msg);
  auto& from = static_cast<const Change_AddProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.AddProposal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proposal()) {
    _this->_internal_mutable_proposal()->::Proposal::MergeFrom(
        from._internal_proposal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_AddProposal::CopyFrom(const Change_AddProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddProposal::IsInitialized() const {
  if (_internal_has_proposal()) {
    if (!_impl_.proposal_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddProposal::InternalSwap(Change_AddProposal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.proposal_, other->_impl_.proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AddProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[9]);
}

// ===================================================================

class Change_AcceptProposalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AcceptProposalGroup>()._impl_._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accepted_by(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Change_AcceptProposalGroup::Change_AcceptProposalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.AcceptProposalGroup)
}
Change_AcceptProposalGroup::Change_AcceptProposalGroup(const Change_AcceptProposalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_AcceptProposalGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accepted_by_){}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accepted_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accepted_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_accepted_by()) {
    _this->_impl_.accepted_by_.Set(from._internal_accepted_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group_id()) {
    _this->_impl_.group_id_.Set(from._internal_group_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Change.AcceptProposalGroup)
}

inline void Change_AcceptProposalGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accepted_by_){}
    , decltype(_impl_.group_id_){}
  };
  _impl_.accepted_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accepted_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Change_AcceptProposalGroup::~Change_AcceptProposalGroup() {
  // @@protoc_insertion_point(destructor:Change.AcceptProposalGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_AcceptProposalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accepted_by_.Destroy();
  _impl_.group_id_.Destroy();
}

void Change_AcceptProposalGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_AcceptProposalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AcceptProposalGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.accepted_by_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.group_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AcceptProposalGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string accepted_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accepted_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Change.AcceptProposalGroup.accepted_by");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_group_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Change.AcceptProposalGroup.group_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_AcceptProposalGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AcceptProposalGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string accepted_by = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accepted_by().data(), static_cast<int>(this->_internal_accepted_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Change.AcceptProposalGroup.accepted_by");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accepted_by(), target);
  }

  // optional string group_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Change.AcceptProposalGroup.group_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AcceptProposalGroup)
  return target;
}

size_t Change_AcceptProposalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AcceptProposalGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string accepted_by = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_accepted_by());
    }

    // optional string group_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_AcceptProposalGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_AcceptProposalGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_AcceptProposalGroup::GetClassData() const { return &_class_data_; }


void Change_AcceptProposalGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_AcceptProposalGroup*>(&to_msg);
  auto& from = static_cast<const Change_AcceptProposalGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.AcceptProposalGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_accepted_by(from._internal_accepted_by());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_group_id(from._internal_group_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_AcceptProposalGroup::CopyFrom(const Change_AcceptProposalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AcceptProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AcceptProposalGroup::IsInitialized() const {
  return true;
}

void Change_AcceptProposalGroup::InternalSwap(Change_AcceptProposalGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accepted_by_, lhs_arena,
      &other->_impl_.accepted_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_id_, lhs_arena,
      &other->_impl_.group_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AcceptProposalGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[10]);
}

// ===================================================================

class Change_UpdateConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_UpdateConfig>()._impl_._has_bits_);
  static void set_has_division(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_first_kickoff_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& max_robots_per_team(const Change_UpdateConfig* msg);
  static void set_has_max_robots_per_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateConfig::_Internal::max_robots_per_team(const Change_UpdateConfig* msg) {
  return *msg->_impl_.max_robots_per_team_;
}
void Change_UpdateConfig::clear_max_robots_per_team() {
  if (_impl_.max_robots_per_team_ != nullptr) _impl_.max_robots_per_team_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Change_UpdateConfig::Change_UpdateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.UpdateConfig)
}
Change_UpdateConfig::Change_UpdateConfig(const Change_UpdateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_UpdateConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_robots_per_team_){nullptr}
    , decltype(_impl_.division_){}
    , decltype(_impl_.first_kickoff_team_){}
    , decltype(_impl_.match_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_max_robots_per_team()) {
    _this->_impl_.max_robots_per_team_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.max_robots_per_team_);
  }
  ::memcpy(&_impl_.division_, &from._impl_.division_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_type_) -
    reinterpret_cast<char*>(&_impl_.division_)) + sizeof(_impl_.match_type_));
  // @@protoc_insertion_point(copy_constructor:Change.UpdateConfig)
}

inline void Change_UpdateConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_robots_per_team_){nullptr}
    , decltype(_impl_.division_){0}
    , decltype(_impl_.first_kickoff_team_){0}
    , decltype(_impl_.match_type_){0}
  };
}

Change_UpdateConfig::~Change_UpdateConfig() {
  // @@protoc_insertion_point(destructor:Change.UpdateConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_UpdateConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.max_robots_per_team_;
}

void Change_UpdateConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_UpdateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.UpdateConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.max_robots_per_team_ != nullptr);
    _impl_.max_robots_per_team_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.division_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_type_) -
        reinterpret_cast<char*>(&_impl_.division_)) + sizeof(_impl_.match_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_UpdateConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Division division = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Division_IsValid(val))) {
            _internal_set_division(static_cast<::Division>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .Team first_kickoff_team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_first_kickoff_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .MatchType match_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value max_robots_per_team = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_robots_per_team(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_UpdateConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.UpdateConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Division division = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_division(), target);
  }

  // optional .Team first_kickoff_team = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_first_kickoff_team(), target);
  }

  // optional .MatchType match_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_match_type(), target);
  }

  // optional .google.protobuf.Int32Value max_robots_per_team = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::max_robots_per_team(this),
        _Internal::max_robots_per_team(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.UpdateConfig)
  return target;
}

size_t Change_UpdateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.UpdateConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .google.protobuf.Int32Value max_robots_per_team = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.max_robots_per_team_);
    }

    // optional .Division division = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_division());
    }

    // optional .Team first_kickoff_team = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_first_kickoff_team());
    }

    // optional .MatchType match_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_UpdateConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_UpdateConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_UpdateConfig::GetClassData() const { return &_class_data_; }


void Change_UpdateConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_UpdateConfig*>(&to_msg);
  auto& from = static_cast<const Change_UpdateConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.UpdateConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_max_robots_per_team()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
          from._internal_max_robots_per_team());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.division_ = from._impl_.division_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.first_kickoff_team_ = from._impl_.first_kickoff_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.match_type_ = from._impl_.match_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_UpdateConfig::CopyFrom(const Change_UpdateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.UpdateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_UpdateConfig::IsInitialized() const {
  return true;
}

void Change_UpdateConfig::InternalSwap(Change_UpdateConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Change_UpdateConfig, _impl_.match_type_)
      + sizeof(Change_UpdateConfig::_impl_.match_type_)
      - PROTOBUF_FIELD_OFFSET(Change_UpdateConfig, _impl_.max_robots_per_team_)>(
          reinterpret_cast<char*>(&_impl_.max_robots_per_team_),
          reinterpret_cast<char*>(&other->_impl_.max_robots_per_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_UpdateConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[11]);
}

// ===================================================================

class Change_UpdateTeamState::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_UpdateTeamState>()._impl_._has_bits_);
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& team_name(const Change_UpdateTeamState* msg);
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& goals(const Change_UpdateTeamState* msg);
  static void set_has_goals(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& goalkeeper(const Change_UpdateTeamState* msg);
  static void set_has_goalkeeper(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& timeouts_left(const Change_UpdateTeamState* msg);
  static void set_has_timeouts_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& timeout_time_left(const Change_UpdateTeamState* msg);
  static void set_has_timeout_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& on_positive_half(const Change_UpdateTeamState* msg);
  static void set_has_on_positive_half(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& ball_placement_failures(const Change_UpdateTeamState* msg);
  static void set_has_ball_placement_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& can_place_ball(const Change_UpdateTeamState* msg);
  static void set_has_can_place_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& challenge_flags_left(const Change_UpdateTeamState* msg);
  static void set_has_challenge_flags_left(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& bot_substitutions_left(const Change_UpdateTeamState* msg);
  static void set_has_bot_substitutions_left(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& requests_bot_substitution(const Change_UpdateTeamState* msg);
  static void set_has_requests_bot_substitution(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& requests_timeout(const Change_UpdateTeamState* msg);
  static void set_has_requests_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& requests_challenge(const Change_UpdateTeamState* msg);
  static void set_has_requests_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& requests_emergency_stop(const Change_UpdateTeamState* msg);
  static void set_has_requests_emergency_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::YellowCard& yellow_card(const Change_UpdateTeamState* msg);
  static void set_has_yellow_card(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::RedCard& red_card(const Change_UpdateTeamState* msg);
  static void set_has_red_card(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::Foul& foul(const Change_UpdateTeamState* msg);
  static void set_has_foul(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& remove_yellow_card(const Change_UpdateTeamState* msg);
  static void set_has_remove_yellow_card(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& remove_red_card(const Change_UpdateTeamState* msg);
  static void set_has_remove_red_card(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& remove_foul(const Change_UpdateTeamState* msg);
  static void set_has_remove_foul(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_hull_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Change_UpdateTeamState::_Internal::team_name(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.team_name_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::goals(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.goals_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::goalkeeper(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.goalkeeper_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::timeouts_left(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.timeouts_left_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Change_UpdateTeamState::_Internal::timeout_time_left(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.timeout_time_left_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::on_positive_half(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.on_positive_half_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::ball_placement_failures(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.ball_placement_failures_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::can_place_ball(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.can_place_ball_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::challenge_flags_left(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.challenge_flags_left_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::bot_substitutions_left(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.bot_substitutions_left_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::requests_bot_substitution(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.requests_bot_substitution_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::requests_timeout(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.requests_timeout_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::requests_challenge(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.requests_challenge_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::requests_emergency_stop(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.requests_emergency_stop_;
}
const ::YellowCard&
Change_UpdateTeamState::_Internal::yellow_card(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.yellow_card_;
}
const ::RedCard&
Change_UpdateTeamState::_Internal::red_card(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.red_card_;
}
const ::Foul&
Change_UpdateTeamState::_Internal::foul(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.foul_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Change_UpdateTeamState::_Internal::remove_yellow_card(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.remove_yellow_card_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Change_UpdateTeamState::_Internal::remove_red_card(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.remove_red_card_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Change_UpdateTeamState::_Internal::remove_foul(const Change_UpdateTeamState* msg) {
  return *msg->_impl_.remove_foul_;
}
void Change_UpdateTeamState::clear_team_name() {
  if (_impl_.team_name_ != nullptr) _impl_.team_name_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Change_UpdateTeamState::clear_goals() {
  if (_impl_.goals_ != nullptr) _impl_.goals_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Change_UpdateTeamState::clear_goalkeeper() {
  if (_impl_.goalkeeper_ != nullptr) _impl_.goalkeeper_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Change_UpdateTeamState::clear_timeouts_left() {
  if (_impl_.timeouts_left_ != nullptr) _impl_.timeouts_left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Change_UpdateTeamState::clear_timeout_time_left() {
  if (_impl_.timeout_time_left_ != nullptr) _impl_.timeout_time_left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Change_UpdateTeamState::clear_on_positive_half() {
  if (_impl_.on_positive_half_ != nullptr) _impl_.on_positive_half_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Change_UpdateTeamState::clear_ball_placement_failures() {
  if (_impl_.ball_placement_failures_ != nullptr) _impl_.ball_placement_failures_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Change_UpdateTeamState::clear_can_place_ball() {
  if (_impl_.can_place_ball_ != nullptr) _impl_.can_place_ball_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Change_UpdateTeamState::clear_challenge_flags_left() {
  if (_impl_.challenge_flags_left_ != nullptr) _impl_.challenge_flags_left_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void Change_UpdateTeamState::clear_bot_substitutions_left() {
  if (_impl_.bot_substitutions_left_ != nullptr) _impl_.bot_substitutions_left_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void Change_UpdateTeamState::clear_requests_bot_substitution() {
  if (_impl_.requests_bot_substitution_ != nullptr) _impl_.requests_bot_substitution_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Change_UpdateTeamState::clear_requests_timeout() {
  if (_impl_.requests_timeout_ != nullptr) _impl_.requests_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void Change_UpdateTeamState::clear_requests_challenge() {
  if (_impl_.requests_challenge_ != nullptr) _impl_.requests_challenge_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void Change_UpdateTeamState::clear_requests_emergency_stop() {
  if (_impl_.requests_emergency_stop_ != nullptr) _impl_.requests_emergency_stop_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void Change_UpdateTeamState::clear_yellow_card() {
  if (_impl_.yellow_card_ != nullptr) _impl_.yellow_card_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void Change_UpdateTeamState::clear_red_card() {
  if (_impl_.red_card_ != nullptr) _impl_.red_card_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Change_UpdateTeamState::clear_foul() {
  if (_impl_.foul_ != nullptr) _impl_.foul_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Change_UpdateTeamState::clear_remove_yellow_card() {
  if (_impl_.remove_yellow_card_ != nullptr) _impl_.remove_yellow_card_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Change_UpdateTeamState::clear_remove_red_card() {
  if (_impl_.remove_red_card_ != nullptr) _impl_.remove_red_card_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void Change_UpdateTeamState::clear_remove_foul() {
  if (_impl_.remove_foul_ != nullptr) _impl_.remove_foul_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
Change_UpdateTeamState::Change_UpdateTeamState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.UpdateTeamState)
}
Change_UpdateTeamState::Change_UpdateTeamState(const Change_UpdateTeamState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_UpdateTeamState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){nullptr}
    , decltype(_impl_.goals_){nullptr}
    , decltype(_impl_.goalkeeper_){nullptr}
    , decltype(_impl_.timeouts_left_){nullptr}
    , decltype(_impl_.timeout_time_left_){nullptr}
    , decltype(_impl_.on_positive_half_){nullptr}
    , decltype(_impl_.ball_placement_failures_){nullptr}
    , decltype(_impl_.can_place_ball_){nullptr}
    , decltype(_impl_.requests_bot_substitution_){nullptr}
    , decltype(_impl_.red_card_){nullptr}
    , decltype(_impl_.foul_){nullptr}
    , decltype(_impl_.remove_yellow_card_){nullptr}
    , decltype(_impl_.remove_red_card_){nullptr}
    , decltype(_impl_.remove_foul_){nullptr}
    , decltype(_impl_.requests_timeout_){nullptr}
    , decltype(_impl_.requests_challenge_){nullptr}
    , decltype(_impl_.requests_emergency_stop_){nullptr}
    , decltype(_impl_.yellow_card_){nullptr}
    , decltype(_impl_.challenge_flags_left_){nullptr}
    , decltype(_impl_.bot_substitutions_left_){nullptr}
    , decltype(_impl_.for_team_){}
    , decltype(_impl_.hull_color_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_team_name()) {
    _this->_impl_.team_name_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from._impl_.team_name_);
  }
  if (from._internal_has_goals()) {
    _this->_impl_.goals_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.goals_);
  }
  if (from._internal_has_goalkeeper()) {
    _this->_impl_.goalkeeper_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.goalkeeper_);
  }
  if (from._internal_has_timeouts_left()) {
    _this->_impl_.timeouts_left_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.timeouts_left_);
  }
  if (from._internal_has_timeout_time_left()) {
    _this->_impl_.timeout_time_left_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from._impl_.timeout_time_left_);
  }
  if (from._internal_has_on_positive_half()) {
    _this->_impl_.on_positive_half_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.on_positive_half_);
  }
  if (from._internal_has_ball_placement_failures()) {
    _this->_impl_.ball_placement_failures_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.ball_placement_failures_);
  }
  if (from._internal_has_can_place_ball()) {
    _this->_impl_.can_place_ball_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.can_place_ball_);
  }
  if (from._internal_has_requests_bot_substitution()) {
    _this->_impl_.requests_bot_substitution_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.requests_bot_substitution_);
  }
  if (from._internal_has_red_card()) {
    _this->_impl_.red_card_ = new ::RedCard(*from._impl_.red_card_);
  }
  if (from._internal_has_foul()) {
    _this->_impl_.foul_ = new ::Foul(*from._impl_.foul_);
  }
  if (from._internal_has_remove_yellow_card()) {
    _this->_impl_.remove_yellow_card_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from._impl_.remove_yellow_card_);
  }
  if (from._internal_has_remove_red_card()) {
    _this->_impl_.remove_red_card_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from._impl_.remove_red_card_);
  }
  if (from._internal_has_remove_foul()) {
    _this->_impl_.remove_foul_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from._impl_.remove_foul_);
  }
  if (from._internal_has_requests_timeout()) {
    _this->_impl_.requests_timeout_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.requests_timeout_);
  }
  if (from._internal_has_requests_challenge()) {
    _this->_impl_.requests_challenge_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.requests_challenge_);
  }
  if (from._internal_has_requests_emergency_stop()) {
    _this->_impl_.requests_emergency_stop_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.requests_emergency_stop_);
  }
  if (from._internal_has_yellow_card()) {
    _this->_impl_.yellow_card_ = new ::YellowCard(*from._impl_.yellow_card_);
  }
  if (from._internal_has_challenge_flags_left()) {
    _this->_impl_.challenge_flags_left_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.challenge_flags_left_);
  }
  if (from._internal_has_bot_substitutions_left()) {
    _this->_impl_.bot_substitutions_left_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.bot_substitutions_left_);
  }
  ::memcpy(&_impl_.for_team_, &from._impl_.for_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hull_color_) -
    reinterpret_cast<char*>(&_impl_.for_team_)) + sizeof(_impl_.hull_color_));
  // @@protoc_insertion_point(copy_constructor:Change.UpdateTeamState)
}

inline void Change_UpdateTeamState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){nullptr}
    , decltype(_impl_.goals_){nullptr}
    , decltype(_impl_.goalkeeper_){nullptr}
    , decltype(_impl_.timeouts_left_){nullptr}
    , decltype(_impl_.timeout_time_left_){nullptr}
    , decltype(_impl_.on_positive_half_){nullptr}
    , decltype(_impl_.ball_placement_failures_){nullptr}
    , decltype(_impl_.can_place_ball_){nullptr}
    , decltype(_impl_.requests_bot_substitution_){nullptr}
    , decltype(_impl_.red_card_){nullptr}
    , decltype(_impl_.foul_){nullptr}
    , decltype(_impl_.remove_yellow_card_){nullptr}
    , decltype(_impl_.remove_red_card_){nullptr}
    , decltype(_impl_.remove_foul_){nullptr}
    , decltype(_impl_.requests_timeout_){nullptr}
    , decltype(_impl_.requests_challenge_){nullptr}
    , decltype(_impl_.requests_emergency_stop_){nullptr}
    , decltype(_impl_.yellow_card_){nullptr}
    , decltype(_impl_.challenge_flags_left_){nullptr}
    , decltype(_impl_.bot_substitutions_left_){nullptr}
    , decltype(_impl_.for_team_){0}
    , decltype(_impl_.hull_color_){0}
  };
}

Change_UpdateTeamState::~Change_UpdateTeamState() {
  // @@protoc_insertion_point(destructor:Change.UpdateTeamState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_UpdateTeamState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.team_name_;
  if (this != internal_default_instance()) delete _impl_.goals_;
  if (this != internal_default_instance()) delete _impl_.goalkeeper_;
  if (this != internal_default_instance()) delete _impl_.timeouts_left_;
  if (this != internal_default_instance()) delete _impl_.timeout_time_left_;
  if (this != internal_default_instance()) delete _impl_.on_positive_half_;
  if (this != internal_default_instance()) delete _impl_.ball_placement_failures_;
  if (this != internal_default_instance()) delete _impl_.can_place_ball_;
  if (this != internal_default_instance()) delete _impl_.requests_bot_substitution_;
  if (this != internal_default_instance()) delete _impl_.red_card_;
  if (this != internal_default_instance()) delete _impl_.foul_;
  if (this != internal_default_instance()) delete _impl_.remove_yellow_card_;
  if (this != internal_default_instance()) delete _impl_.remove_red_card_;
  if (this != internal_default_instance()) delete _impl_.remove_foul_;
  if (this != internal_default_instance()) delete _impl_.requests_timeout_;
  if (this != internal_default_instance()) delete _impl_.requests_challenge_;
  if (this != internal_default_instance()) delete _impl_.requests_emergency_stop_;
  if (this != internal_default_instance()) delete _impl_.yellow_card_;
  if (this != internal_default_instance()) delete _impl_.challenge_flags_left_;
  if (this != internal_default_instance()) delete _impl_.bot_substitutions_left_;
}

void Change_UpdateTeamState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_UpdateTeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.UpdateTeamState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.team_name_ != nullptr);
      _impl_.team_name_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.goals_ != nullptr);
      _impl_.goals_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.goalkeeper_ != nullptr);
      _impl_.goalkeeper_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.timeouts_left_ != nullptr);
      _impl_.timeouts_left_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.timeout_time_left_ != nullptr);
      _impl_.timeout_time_left_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.on_positive_half_ != nullptr);
      _impl_.on_positive_half_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.ball_placement_failures_ != nullptr);
      _impl_.ball_placement_failures_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.can_place_ball_ != nullptr);
      _impl_.can_place_ball_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.requests_bot_substitution_ != nullptr);
      _impl_.requests_bot_substitution_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.red_card_ != nullptr);
      _impl_.red_card_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.foul_ != nullptr);
      _impl_.foul_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.remove_yellow_card_ != nullptr);
      _impl_.remove_yellow_card_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.remove_red_card_ != nullptr);
      _impl_.remove_red_card_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.remove_foul_ != nullptr);
      _impl_.remove_foul_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.requests_timeout_ != nullptr);
      _impl_.requests_timeout_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.requests_challenge_ != nullptr);
      _impl_.requests_challenge_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.requests_emergency_stop_ != nullptr);
      _impl_.requests_emergency_stop_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.yellow_card_ != nullptr);
      _impl_.yellow_card_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.challenge_flags_left_ != nullptr);
      _impl_.challenge_flags_left_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.bot_substitutions_left_ != nullptr);
      _impl_.bot_substitutions_left_->Clear();
    }
  }
  if (cached_has_bits & 0x00300000u) {
    ::memset(&_impl_.for_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hull_color_) -
        reinterpret_cast<char*>(&_impl_.for_team_)) + sizeof(_impl_.hull_color_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_UpdateTeamState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Team for_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.StringValue team_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value goals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_goals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value goalkeeper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_goalkeeper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value timeouts_left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeouts_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.StringValue timeout_time_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout_time_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue on_positive_half = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_on_positive_half(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value ball_placement_failures = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_placement_failures(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue can_place_ball = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_place_ball(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue requests_bot_substitution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests_bot_substitution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RedCard red_card = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_red_card(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Foul foul = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_foul(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.UInt32Value remove_yellow_card = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_yellow_card(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.UInt32Value remove_red_card = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_red_card(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.UInt32Value remove_foul = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_foul(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue requests_timeout = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue requests_challenge = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests_challenge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue requests_emergency_stop = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests_emergency_stop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .YellowCard yellow_card = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_yellow_card(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value challenge_flags_left = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenge_flags_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value bot_substitutions_left = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_substitutions_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .HullColor hull_color = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HullColor_IsValid(val))) {
            _internal_set_hull_color(static_cast<::HullColor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_UpdateTeamState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.UpdateTeamState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_for_team(), target);
  }

  // optional .google.protobuf.StringValue team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::team_name(this),
        _Internal::team_name(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Int32Value goals = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::goals(this),
        _Internal::goals(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Int32Value goalkeeper = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::goalkeeper(this),
        _Internal::goalkeeper(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Int32Value timeouts_left = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::timeouts_left(this),
        _Internal::timeouts_left(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.StringValue timeout_time_left = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::timeout_time_left(this),
        _Internal::timeout_time_left(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.BoolValue on_positive_half = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::on_positive_half(this),
        _Internal::on_positive_half(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Int32Value ball_placement_failures = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ball_placement_failures(this),
        _Internal::ball_placement_failures(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.BoolValue can_place_ball = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::can_place_ball(this),
        _Internal::can_place_ball(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.BoolValue requests_bot_substitution = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::requests_bot_substitution(this),
        _Internal::requests_bot_substitution(this).GetCachedSize(), target, stream);
  }

  // optional .RedCard red_card = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::red_card(this),
        _Internal::red_card(this).GetCachedSize(), target, stream);
  }

  // optional .Foul foul = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::foul(this),
        _Internal::foul(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.UInt32Value remove_yellow_card = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::remove_yellow_card(this),
        _Internal::remove_yellow_card(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.UInt32Value remove_red_card = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::remove_red_card(this),
        _Internal::remove_red_card(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.UInt32Value remove_foul = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::remove_foul(this),
        _Internal::remove_foul(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.BoolValue requests_timeout = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::requests_timeout(this),
        _Internal::requests_timeout(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.BoolValue requests_challenge = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::requests_challenge(this),
        _Internal::requests_challenge(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.BoolValue requests_emergency_stop = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::requests_emergency_stop(this),
        _Internal::requests_emergency_stop(this).GetCachedSize(), target, stream);
  }

  // optional .YellowCard yellow_card = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::yellow_card(this),
        _Internal::yellow_card(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Int32Value challenge_flags_left = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::challenge_flags_left(this),
        _Internal::challenge_flags_left(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Int32Value bot_substitutions_left = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::bot_substitutions_left(this),
        _Internal::bot_substitutions_left(this).GetCachedSize(), target, stream);
  }

  // optional .HullColor hull_color = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_hull_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.UpdateTeamState)
  return target;
}

size_t Change_UpdateTeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.UpdateTeamState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .google.protobuf.StringValue team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.team_name_);
    }

    // optional .google.protobuf.Int32Value goals = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.goals_);
    }

    // optional .google.protobuf.Int32Value goalkeeper = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.goalkeeper_);
    }

    // optional .google.protobuf.Int32Value timeouts_left = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timeouts_left_);
    }

    // optional .google.protobuf.StringValue timeout_time_left = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timeout_time_left_);
    }

    // optional .google.protobuf.BoolValue on_positive_half = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.on_positive_half_);
    }

    // optional .google.protobuf.Int32Value ball_placement_failures = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ball_placement_failures_);
    }

    // optional .google.protobuf.BoolValue can_place_ball = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.can_place_ball_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .google.protobuf.BoolValue requests_bot_substitution = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requests_bot_substitution_);
    }

    // optional .RedCard red_card = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.red_card_);
    }

    // optional .Foul foul = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.foul_);
    }

    // optional .google.protobuf.UInt32Value remove_yellow_card = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.remove_yellow_card_);
    }

    // optional .google.protobuf.UInt32Value remove_red_card = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.remove_red_card_);
    }

    // optional .google.protobuf.UInt32Value remove_foul = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.remove_foul_);
    }

    // optional .google.protobuf.BoolValue requests_timeout = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requests_timeout_);
    }

    // optional .google.protobuf.BoolValue requests_challenge = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requests_challenge_);
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional .google.protobuf.BoolValue requests_emergency_stop = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requests_emergency_stop_);
    }

    // optional .YellowCard yellow_card = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.yellow_card_);
    }

    // optional .google.protobuf.Int32Value challenge_flags_left = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.challenge_flags_left_);
    }

    // optional .google.protobuf.Int32Value bot_substitutions_left = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bot_substitutions_left_);
    }

    // optional .Team for_team = 1;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_for_team());
    }

    // optional .HullColor hull_color = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_hull_color());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_UpdateTeamState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_UpdateTeamState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_UpdateTeamState::GetClassData() const { return &_class_data_; }


void Change_UpdateTeamState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_UpdateTeamState*>(&to_msg);
  auto& from = static_cast<const Change_UpdateTeamState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.UpdateTeamState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_team_name()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(
          from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_goals()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
          from._internal_goals());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_goalkeeper()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
          from._internal_goalkeeper());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_timeouts_left()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
          from._internal_timeouts_left());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_timeout_time_left()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(
          from._internal_timeout_time_left());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_on_positive_half()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
          from._internal_on_positive_half());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_ball_placement_failures()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
          from._internal_ball_placement_failures());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_can_place_ball()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
          from._internal_can_place_ball());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_requests_bot_substitution()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
          from._internal_requests_bot_substitution());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_red_card()->::RedCard::MergeFrom(
          from._internal_red_card());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_foul()->::Foul::MergeFrom(
          from._internal_foul());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_remove_yellow_card()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(
          from._internal_remove_yellow_card());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_remove_red_card()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(
          from._internal_remove_red_card());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_remove_foul()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(
          from._internal_remove_foul());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_requests_timeout()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
          from._internal_requests_timeout());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_requests_challenge()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
          from._internal_requests_challenge());
    }
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_requests_emergency_stop()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
          from._internal_requests_emergency_stop());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_yellow_card()->::YellowCard::MergeFrom(
          from._internal_yellow_card());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_challenge_flags_left()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
          from._internal_challenge_flags_left());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_bot_substitutions_left()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
          from._internal_bot_substitutions_left());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.for_team_ = from._impl_.for_team_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.hull_color_ = from._impl_.hull_color_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_UpdateTeamState::CopyFrom(const Change_UpdateTeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.UpdateTeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_UpdateTeamState::IsInitialized() const {
  if (_internal_has_red_card()) {
    if (!_impl_.red_card_->IsInitialized()) return false;
  }
  if (_internal_has_foul()) {
    if (!_impl_.foul_->IsInitialized()) return false;
  }
  if (_internal_has_yellow_card()) {
    if (!_impl_.yellow_card_->IsInitialized()) return false;
  }
  return true;
}

void Change_UpdateTeamState::InternalSwap(Change_UpdateTeamState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Change_UpdateTeamState, _impl_.hull_color_)
      + sizeof(Change_UpdateTeamState::_impl_.hull_color_)
      - PROTOBUF_FIELD_OFFSET(Change_UpdateTeamState, _impl_.team_name_)>(
          reinterpret_cast<char*>(&_impl_.team_name_),
          reinterpret_cast<char*>(&other->_impl_.team_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_UpdateTeamState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[12]);
}

// ===================================================================

class Change_SwitchColors::_Internal {
 public:
};

Change_SwitchColors::Change_SwitchColors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Change.SwitchColors)
}
Change_SwitchColors::Change_SwitchColors(const Change_SwitchColors& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Change_SwitchColors* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Change.SwitchColors)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_SwitchColors::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_SwitchColors::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Change_SwitchColors::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[13]);
}

// ===================================================================

class Change_Revert::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_Revert>()._impl_._has_bits_);
  static void set_has_change_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Change_Revert::Change_Revert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.Revert)
}
Change_Revert::Change_Revert(const Change_Revert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_Revert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.change_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.change_id_ = from._impl_.change_id_;
  // @@protoc_insertion_point(copy_constructor:Change.Revert)
}

inline void Change_Revert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.change_id_){0}
  };
}

Change_Revert::~Change_Revert() {
  // @@protoc_insertion_point(destructor:Change.Revert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_Revert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Change_Revert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_Revert::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.Revert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.change_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_Revert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 change_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_change_id(&has_bits);
          _impl_.change_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_Revert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.Revert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 change_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_change_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.Revert)
  return target;
}

size_t Change_Revert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.Revert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 change_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_change_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_Revert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_Revert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_Revert::GetClassData() const { return &_class_data_; }


void Change_Revert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_Revert*>(&to_msg);
  auto& from = static_cast<const Change_Revert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.Revert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_change_id()) {
    _this->_internal_set_change_id(from._internal_change_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_Revert::CopyFrom(const Change_Revert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.Revert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_Revert::IsInitialized() const {
  return true;
}

void Change_Revert::InternalSwap(Change_Revert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.change_id_, other->_impl_.change_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_Revert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[14]);
}

// ===================================================================

class Change_NewGameState::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_NewGameState>()._impl_._has_bits_);
  static const ::GameState& game_state(const Change_NewGameState* msg);
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GameState&
Change_NewGameState::_Internal::game_state(const Change_NewGameState* msg) {
  return *msg->_impl_.game_state_;
}
void Change_NewGameState::clear_game_state() {
  if (_impl_.game_state_ != nullptr) _impl_.game_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Change_NewGameState::Change_NewGameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.NewGameState)
}
Change_NewGameState::Change_NewGameState(const Change_NewGameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_NewGameState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_state()) {
    _this->_impl_.game_state_ = new ::GameState(*from._impl_.game_state_);
  }
  // @@protoc_insertion_point(copy_constructor:Change.NewGameState)
}

inline void Change_NewGameState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_state_){nullptr}
  };
}

Change_NewGameState::~Change_NewGameState() {
  // @@protoc_insertion_point(destructor:Change.NewGameState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_NewGameState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_state_;
}

void Change_NewGameState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_NewGameState::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.NewGameState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.game_state_ != nullptr);
    _impl_.game_state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_NewGameState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .GameState game_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_NewGameState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.NewGameState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .GameState game_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_state(this),
        _Internal::game_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.NewGameState)
  return target;
}

size_t Change_NewGameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.NewGameState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .GameState game_state = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_NewGameState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_NewGameState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_NewGameState::GetClassData() const { return &_class_data_; }


void Change_NewGameState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_NewGameState*>(&to_msg);
  auto& from = static_cast<const Change_NewGameState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.NewGameState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_state()) {
    _this->_internal_mutable_game_state()->::GameState::MergeFrom(
        from._internal_game_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_NewGameState::CopyFrom(const Change_NewGameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.NewGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_NewGameState::IsInitialized() const {
  if (_internal_has_game_state()) {
    if (!_impl_.game_state_->IsInitialized()) return false;
  }
  return true;
}

void Change_NewGameState::InternalSwap(Change_NewGameState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.game_state_, other->_impl_.game_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_NewGameState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[15]);
}

// ===================================================================

class Change_SetStatusMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_SetStatusMessage>()._impl_._has_bits_);
  static void set_has_status_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Change_SetStatusMessage::Change_SetStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change.SetStatusMessage)
}
Change_SetStatusMessage::Change_SetStatusMessage(const Change_SetStatusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change_SetStatusMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_message_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status_message()) {
    _this->_impl_.status_message_.Set(from._internal_status_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Change.SetStatusMessage)
}

inline void Change_SetStatusMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_message_){}
  };
  _impl_.status_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Change_SetStatusMessage::~Change_SetStatusMessage() {
  // @@protoc_insertion_point(destructor:Change.SetStatusMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change_SetStatusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_message_.Destroy();
}

void Change_SetStatusMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change_SetStatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.SetStatusMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.status_message_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_SetStatusMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string status_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Change.SetStatusMessage.status_message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change_SetStatusMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.SetStatusMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string status_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status_message().data(), static_cast<int>(this->_internal_status_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Change.SetStatusMessage.status_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.SetStatusMessage)
  return target;
}

size_t Change_SetStatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.SetStatusMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string status_message = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change_SetStatusMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change_SetStatusMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change_SetStatusMessage::GetClassData() const { return &_class_data_; }


void Change_SetStatusMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change_SetStatusMessage*>(&to_msg);
  auto& from = static_cast<const Change_SetStatusMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change.SetStatusMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status_message()) {
    _this->_internal_set_status_message(from._internal_status_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change_SetStatusMessage::CopyFrom(const Change_SetStatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.SetStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_SetStatusMessage::IsInitialized() const {
  return true;
}

void Change_SetStatusMessage::InternalSwap(Change_SetStatusMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_message_, lhs_arena,
      &other->_impl_.status_message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_SetStatusMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[16]);
}

// ===================================================================

class Change::_Internal {
 public:
  using HasBits = decltype(std::declval<Change>()._impl_._has_bits_);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_revertible(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Change_NewCommand& new_command_change(const Change* msg);
  static const ::Change_ChangeStage& change_stage_change(const Change* msg);
  static const ::Change_SetBallPlacementPos& set_ball_placement_pos_change(const Change* msg);
  static const ::Change_AddYellowCard& add_yellow_card_change(const Change* msg);
  static const ::Change_AddRedCard& add_red_card_change(const Change* msg);
  static const ::Change_YellowCardOver& yellow_card_over_change(const Change* msg);
  static const ::Change_AddGameEvent& add_game_event_change(const Change* msg);
  static const ::Change_AddPassiveGameEvent& add_passive_game_event_change(const Change* msg);
  static const ::Change_AddProposal& add_proposal_change(const Change* msg);
  static const ::Change_UpdateConfig& update_config_change(const Change* msg);
  static const ::Change_UpdateTeamState& update_team_state_change(const Change* msg);
  static const ::Change_SwitchColors& switch_colors_change(const Change* msg);
  static const ::Change_Revert& revert_change(const Change* msg);
  static const ::Change_NewGameState& new_game_state_change(const Change* msg);
  static const ::Change_AcceptProposalGroup& accept_proposal_group_change(const Change* msg);
  static const ::Change_SetStatusMessage& set_status_message_change(const Change* msg);
};

const ::Change_NewCommand&
Change::_Internal::new_command_change(const Change* msg) {
  return *msg->_impl_.change_.new_command_change_;
}
const ::Change_ChangeStage&
Change::_Internal::change_stage_change(const Change* msg) {
  return *msg->_impl_.change_.change_stage_change_;
}
const ::Change_SetBallPlacementPos&
Change::_Internal::set_ball_placement_pos_change(const Change* msg) {
  return *msg->_impl_.change_.set_ball_placement_pos_change_;
}
const ::Change_AddYellowCard&
Change::_Internal::add_yellow_card_change(const Change* msg) {
  return *msg->_impl_.change_.add_yellow_card_change_;
}
const ::Change_AddRedCard&
Change::_Internal::add_red_card_change(const Change* msg) {
  return *msg->_impl_.change_.add_red_card_change_;
}
const ::Change_YellowCardOver&
Change::_Internal::yellow_card_over_change(const Change* msg) {
  return *msg->_impl_.change_.yellow_card_over_change_;
}
const ::Change_AddGameEvent&
Change::_Internal::add_game_event_change(const Change* msg) {
  return *msg->_impl_.change_.add_game_event_change_;
}
const ::Change_AddPassiveGameEvent&
Change::_Internal::add_passive_game_event_change(const Change* msg) {
  return *msg->_impl_.change_.add_passive_game_event_change_;
}
const ::Change_AddProposal&
Change::_Internal::add_proposal_change(const Change* msg) {
  return *msg->_impl_.change_.add_proposal_change_;
}
const ::Change_UpdateConfig&
Change::_Internal::update_config_change(const Change* msg) {
  return *msg->_impl_.change_.update_config_change_;
}
const ::Change_UpdateTeamState&
Change::_Internal::update_team_state_change(const Change* msg) {
  return *msg->_impl_.change_.update_team_state_change_;
}
const ::Change_SwitchColors&
Change::_Internal::switch_colors_change(const Change* msg) {
  return *msg->_impl_.change_.switch_colors_change_;
}
const ::Change_Revert&
Change::_Internal::revert_change(const Change* msg) {
  return *msg->_impl_.change_.revert_change_;
}
const ::Change_NewGameState&
Change::_Internal::new_game_state_change(const Change* msg) {
  return *msg->_impl_.change_.new_game_state_change_;
}
const ::Change_AcceptProposalGroup&
Change::_Internal::accept_proposal_group_change(const Change* msg) {
  return *msg->_impl_.change_.accept_proposal_group_change_;
}
const ::Change_SetStatusMessage&
Change::_Internal::set_status_message_change(const Change* msg) {
  return *msg->_impl_.change_.set_status_message_change_;
}
void Change::set_allocated_new_command_change(::Change_NewCommand* new_command_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (new_command_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_command_change);
    if (message_arena != submessage_arena) {
      new_command_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_command_change, submessage_arena);
    }
    set_has_new_command_change();
    _impl_.change_.new_command_change_ = new_command_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.new_command_change)
}
void Change::set_allocated_change_stage_change(::Change_ChangeStage* change_stage_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (change_stage_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(change_stage_change);
    if (message_arena != submessage_arena) {
      change_stage_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_stage_change, submessage_arena);
    }
    set_has_change_stage_change();
    _impl_.change_.change_stage_change_ = change_stage_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.change_stage_change)
}
void Change::set_allocated_set_ball_placement_pos_change(::Change_SetBallPlacementPos* set_ball_placement_pos_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (set_ball_placement_pos_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_ball_placement_pos_change);
    if (message_arena != submessage_arena) {
      set_ball_placement_pos_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_ball_placement_pos_change, submessage_arena);
    }
    set_has_set_ball_placement_pos_change();
    _impl_.change_.set_ball_placement_pos_change_ = set_ball_placement_pos_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.set_ball_placement_pos_change)
}
void Change::set_allocated_add_yellow_card_change(::Change_AddYellowCard* add_yellow_card_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (add_yellow_card_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_yellow_card_change);
    if (message_arena != submessage_arena) {
      add_yellow_card_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_yellow_card_change, submessage_arena);
    }
    set_has_add_yellow_card_change();
    _impl_.change_.add_yellow_card_change_ = add_yellow_card_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_yellow_card_change)
}
void Change::set_allocated_add_red_card_change(::Change_AddRedCard* add_red_card_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (add_red_card_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_red_card_change);
    if (message_arena != submessage_arena) {
      add_red_card_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_red_card_change, submessage_arena);
    }
    set_has_add_red_card_change();
    _impl_.change_.add_red_card_change_ = add_red_card_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_red_card_change)
}
void Change::set_allocated_yellow_card_over_change(::Change_YellowCardOver* yellow_card_over_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (yellow_card_over_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(yellow_card_over_change);
    if (message_arena != submessage_arena) {
      yellow_card_over_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yellow_card_over_change, submessage_arena);
    }
    set_has_yellow_card_over_change();
    _impl_.change_.yellow_card_over_change_ = yellow_card_over_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.yellow_card_over_change)
}
void Change::set_allocated_add_game_event_change(::Change_AddGameEvent* add_game_event_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (add_game_event_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_game_event_change);
    if (message_arena != submessage_arena) {
      add_game_event_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_game_event_change, submessage_arena);
    }
    set_has_add_game_event_change();
    _impl_.change_.add_game_event_change_ = add_game_event_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_game_event_change)
}
void Change::set_allocated_add_passive_game_event_change(::Change_AddPassiveGameEvent* add_passive_game_event_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (add_passive_game_event_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_passive_game_event_change);
    if (message_arena != submessage_arena) {
      add_passive_game_event_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_passive_game_event_change, submessage_arena);
    }
    set_has_add_passive_game_event_change();
    _impl_.change_.add_passive_game_event_change_ = add_passive_game_event_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_passive_game_event_change)
}
void Change::set_allocated_add_proposal_change(::Change_AddProposal* add_proposal_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (add_proposal_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_proposal_change);
    if (message_arena != submessage_arena) {
      add_proposal_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_proposal_change, submessage_arena);
    }
    set_has_add_proposal_change();
    _impl_.change_.add_proposal_change_ = add_proposal_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_proposal_change)
}
void Change::set_allocated_update_config_change(::Change_UpdateConfig* update_config_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (update_config_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_config_change);
    if (message_arena != submessage_arena) {
      update_config_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_config_change, submessage_arena);
    }
    set_has_update_config_change();
    _impl_.change_.update_config_change_ = update_config_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.update_config_change)
}
void Change::set_allocated_update_team_state_change(::Change_UpdateTeamState* update_team_state_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (update_team_state_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_team_state_change);
    if (message_arena != submessage_arena) {
      update_team_state_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_team_state_change, submessage_arena);
    }
    set_has_update_team_state_change();
    _impl_.change_.update_team_state_change_ = update_team_state_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.update_team_state_change)
}
void Change::set_allocated_switch_colors_change(::Change_SwitchColors* switch_colors_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (switch_colors_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(switch_colors_change);
    if (message_arena != submessage_arena) {
      switch_colors_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switch_colors_change, submessage_arena);
    }
    set_has_switch_colors_change();
    _impl_.change_.switch_colors_change_ = switch_colors_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.switch_colors_change)
}
void Change::set_allocated_revert_change(::Change_Revert* revert_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (revert_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(revert_change);
    if (message_arena != submessage_arena) {
      revert_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revert_change, submessage_arena);
    }
    set_has_revert_change();
    _impl_.change_.revert_change_ = revert_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.revert_change)
}
void Change::set_allocated_new_game_state_change(::Change_NewGameState* new_game_state_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (new_game_state_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_game_state_change);
    if (message_arena != submessage_arena) {
      new_game_state_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_game_state_change, submessage_arena);
    }
    set_has_new_game_state_change();
    _impl_.change_.new_game_state_change_ = new_game_state_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.new_game_state_change)
}
void Change::set_allocated_accept_proposal_group_change(::Change_AcceptProposalGroup* accept_proposal_group_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (accept_proposal_group_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(accept_proposal_group_change);
    if (message_arena != submessage_arena) {
      accept_proposal_group_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accept_proposal_group_change, submessage_arena);
    }
    set_has_accept_proposal_group_change();
    _impl_.change_.accept_proposal_group_change_ = accept_proposal_group_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.accept_proposal_group_change)
}
void Change::set_allocated_set_status_message_change(::Change_SetStatusMessage* set_status_message_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_change();
  if (set_status_message_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_status_message_change);
    if (message_arena != submessage_arena) {
      set_status_message_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_status_message_change, submessage_arena);
    }
    set_has_set_status_message_change();
    _impl_.change_.set_status_message_change_ = set_status_message_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.set_status_message_change)
}
Change::Change(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Change)
}
Change::Change(const Change& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Change* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){}
    , decltype(_impl_.revertible_){}
    , decltype(_impl_.change_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_origin()) {
    _this->_impl_.origin_.Set(from._internal_origin(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.revertible_ = from._impl_.revertible_;
  clear_has_change();
  switch (from.change_case()) {
    case kNewCommandChange: {
      _this->_internal_mutable_new_command_change()->::Change_NewCommand::MergeFrom(
          from._internal_new_command_change());
      break;
    }
    case kChangeStageChange: {
      _this->_internal_mutable_change_stage_change()->::Change_ChangeStage::MergeFrom(
          from._internal_change_stage_change());
      break;
    }
    case kSetBallPlacementPosChange: {
      _this->_internal_mutable_set_ball_placement_pos_change()->::Change_SetBallPlacementPos::MergeFrom(
          from._internal_set_ball_placement_pos_change());
      break;
    }
    case kAddYellowCardChange: {
      _this->_internal_mutable_add_yellow_card_change()->::Change_AddYellowCard::MergeFrom(
          from._internal_add_yellow_card_change());
      break;
    }
    case kAddRedCardChange: {
      _this->_internal_mutable_add_red_card_change()->::Change_AddRedCard::MergeFrom(
          from._internal_add_red_card_change());
      break;
    }
    case kYellowCardOverChange: {
      _this->_internal_mutable_yellow_card_over_change()->::Change_YellowCardOver::MergeFrom(
          from._internal_yellow_card_over_change());
      break;
    }
    case kAddGameEventChange: {
      _this->_internal_mutable_add_game_event_change()->::Change_AddGameEvent::MergeFrom(
          from._internal_add_game_event_change());
      break;
    }
    case kAddPassiveGameEventChange: {
      _this->_internal_mutable_add_passive_game_event_change()->::Change_AddPassiveGameEvent::MergeFrom(
          from._internal_add_passive_game_event_change());
      break;
    }
    case kAddProposalChange: {
      _this->_internal_mutable_add_proposal_change()->::Change_AddProposal::MergeFrom(
          from._internal_add_proposal_change());
      break;
    }
    case kUpdateConfigChange: {
      _this->_internal_mutable_update_config_change()->::Change_UpdateConfig::MergeFrom(
          from._internal_update_config_change());
      break;
    }
    case kUpdateTeamStateChange: {
      _this->_internal_mutable_update_team_state_change()->::Change_UpdateTeamState::MergeFrom(
          from._internal_update_team_state_change());
      break;
    }
    case kSwitchColorsChange: {
      _this->_internal_mutable_switch_colors_change()->::Change_SwitchColors::MergeFrom(
          from._internal_switch_colors_change());
      break;
    }
    case kRevertChange: {
      _this->_internal_mutable_revert_change()->::Change_Revert::MergeFrom(
          from._internal_revert_change());
      break;
    }
    case kNewGameStateChange: {
      _this->_internal_mutable_new_game_state_change()->::Change_NewGameState::MergeFrom(
          from._internal_new_game_state_change());
      break;
    }
    case kAcceptProposalGroupChange: {
      _this->_internal_mutable_accept_proposal_group_change()->::Change_AcceptProposalGroup::MergeFrom(
          from._internal_accept_proposal_group_change());
      break;
    }
    case kSetStatusMessageChange: {
      _this->_internal_mutable_set_status_message_change()->::Change_SetStatusMessage::MergeFrom(
          from._internal_set_status_message_change());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Change)
}

inline void Change::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){}
    , decltype(_impl_.revertible_){false}
    , decltype(_impl_.change_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_change();
}

Change::~Change() {
  // @@protoc_insertion_point(destructor:Change)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Change::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.origin_.Destroy();
  if (has_change()) {
    clear_change();
  }
}

void Change::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Change::clear_change() {
// @@protoc_insertion_point(one_of_clear_start:Change)
  switch (change_case()) {
    case kNewCommandChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.new_command_change_;
      }
      break;
    }
    case kChangeStageChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.change_stage_change_;
      }
      break;
    }
    case kSetBallPlacementPosChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.set_ball_placement_pos_change_;
      }
      break;
    }
    case kAddYellowCardChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.add_yellow_card_change_;
      }
      break;
    }
    case kAddRedCardChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.add_red_card_change_;
      }
      break;
    }
    case kYellowCardOverChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.yellow_card_over_change_;
      }
      break;
    }
    case kAddGameEventChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.add_game_event_change_;
      }
      break;
    }
    case kAddPassiveGameEventChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.add_passive_game_event_change_;
      }
      break;
    }
    case kAddProposalChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.add_proposal_change_;
      }
      break;
    }
    case kUpdateConfigChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.update_config_change_;
      }
      break;
    }
    case kUpdateTeamStateChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.update_team_state_change_;
      }
      break;
    }
    case kSwitchColorsChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.switch_colors_change_;
      }
      break;
    }
    case kRevertChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.revert_change_;
      }
      break;
    }
    case kNewGameStateChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.new_game_state_change_;
      }
      break;
    }
    case kAcceptProposalGroupChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.accept_proposal_group_change_;
      }
      break;
    }
    case kSetStatusMessageChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.change_.set_status_message_change_;
      }
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CHANGE_NOT_SET;
}


void Change::Clear() {
// @@protoc_insertion_point(message_clear_start:Change)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.origin_.ClearNonDefaultToEmpty();
  }
  _impl_.revertible_ = false;
  clear_change();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Change.origin");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .Change.NewCommand new_command_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_command_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.ChangeStage change_stage_change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_stage_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.SetBallPlacementPos set_ball_placement_pos_change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_ball_placement_pos_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.AddYellowCard add_yellow_card_change = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_yellow_card_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.AddRedCard add_red_card_change = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_red_card_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.YellowCardOver yellow_card_over_change = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_yellow_card_over_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.AddGameEvent add_game_event_change = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_game_event_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.AddProposal add_proposal_change = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_proposal_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.UpdateConfig update_config_change = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_config_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.UpdateTeamState update_team_state_change = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_team_state_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.SwitchColors switch_colors_change = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_switch_colors_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.Revert revert_change = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_revert_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool revertible = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_revertible(&has_bits);
          _impl_.revertible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.NewGameState new_game_state_change = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_game_state_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.AcceptProposalGroup accept_proposal_group_change = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_accept_proposal_group_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.AddPassiveGameEvent add_passive_game_event_change = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_passive_game_event_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Change.SetStatusMessage set_status_message_change = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_status_message_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Change::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_origin().data(), static_cast<int>(this->_internal_origin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Change.origin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_origin(), target);
  }

  switch (change_case()) {
    case kNewCommandChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::new_command_change(this),
          _Internal::new_command_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kChangeStageChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::change_stage_change(this),
          _Internal::change_stage_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetBallPlacementPosChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::set_ball_placement_pos_change(this),
          _Internal::set_ball_placement_pos_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kAddYellowCardChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::add_yellow_card_change(this),
          _Internal::add_yellow_card_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kAddRedCardChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::add_red_card_change(this),
          _Internal::add_red_card_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kYellowCardOverChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::yellow_card_over_change(this),
          _Internal::yellow_card_over_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kAddGameEventChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::add_game_event_change(this),
          _Internal::add_game_event_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kAddProposalChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::add_proposal_change(this),
          _Internal::add_proposal_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kUpdateConfigChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::update_config_change(this),
          _Internal::update_config_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kUpdateTeamStateChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::update_team_state_change(this),
          _Internal::update_team_state_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kSwitchColorsChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::switch_colors_change(this),
          _Internal::switch_colors_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kRevertChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::revert_change(this),
          _Internal::revert_change(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional bool revertible = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_revertible(), target);
  }

  switch (change_case()) {
    case kNewGameStateChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::new_game_state_change(this),
          _Internal::new_game_state_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kAcceptProposalGroupChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::accept_proposal_group_change(this),
          _Internal::accept_proposal_group_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kAddPassiveGameEventChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::add_passive_game_event_change(this),
          _Internal::add_passive_game_event_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetStatusMessageChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::set_status_message_change(this),
          _Internal::set_status_message_change(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change)
  return target;
}

size_t Change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_origin());
    }

    // optional bool revertible = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

  }
  switch (change_case()) {
    // .Change.NewCommand new_command_change = 2;
    case kNewCommandChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.new_command_change_);
      break;
    }
    // .Change.ChangeStage change_stage_change = 3;
    case kChangeStageChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.change_stage_change_);
      break;
    }
    // .Change.SetBallPlacementPos set_ball_placement_pos_change = 4;
    case kSetBallPlacementPosChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.set_ball_placement_pos_change_);
      break;
    }
    // .Change.AddYellowCard add_yellow_card_change = 5;
    case kAddYellowCardChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.add_yellow_card_change_);
      break;
    }
    // .Change.AddRedCard add_red_card_change = 6;
    case kAddRedCardChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.add_red_card_change_);
      break;
    }
    // .Change.YellowCardOver yellow_card_over_change = 7;
    case kYellowCardOverChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.yellow_card_over_change_);
      break;
    }
    // .Change.AddGameEvent add_game_event_change = 8;
    case kAddGameEventChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.add_game_event_change_);
      break;
    }
    // .Change.AddPassiveGameEvent add_passive_game_event_change = 19;
    case kAddPassiveGameEventChange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.add_passive_game_event_change_);
      break;
    }
    // .Change.AddProposal add_proposal_change = 9;
    case kAddProposalChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.add_proposal_change_);
      break;
    }
    // .Change.UpdateConfig update_config_change = 12;
    case kUpdateConfigChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.update_config_change_);
      break;
    }
    // .Change.UpdateTeamState update_team_state_change = 13;
    case kUpdateTeamStateChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.update_team_state_change_);
      break;
    }
    // .Change.SwitchColors switch_colors_change = 14;
    case kSwitchColorsChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.switch_colors_change_);
      break;
    }
    // .Change.Revert revert_change = 15;
    case kRevertChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.revert_change_);
      break;
    }
    // .Change.NewGameState new_game_state_change = 17;
    case kNewGameStateChange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.new_game_state_change_);
      break;
    }
    // .Change.AcceptProposalGroup accept_proposal_group_change = 18;
    case kAcceptProposalGroupChange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.accept_proposal_group_change_);
      break;
    }
    // .Change.SetStatusMessage set_status_message_change = 20;
    case kSetStatusMessageChange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_.set_status_message_change_);
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Change::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Change::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Change::GetClassData() const { return &_class_data_; }


void Change::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Change*>(&to_msg);
  auto& from = static_cast<const Change&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Change)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_origin(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.revertible_ = from._impl_.revertible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.change_case()) {
    case kNewCommandChange: {
      _this->_internal_mutable_new_command_change()->::Change_NewCommand::MergeFrom(
          from._internal_new_command_change());
      break;
    }
    case kChangeStageChange: {
      _this->_internal_mutable_change_stage_change()->::Change_ChangeStage::MergeFrom(
          from._internal_change_stage_change());
      break;
    }
    case kSetBallPlacementPosChange: {
      _this->_internal_mutable_set_ball_placement_pos_change()->::Change_SetBallPlacementPos::MergeFrom(
          from._internal_set_ball_placement_pos_change());
      break;
    }
    case kAddYellowCardChange: {
      _this->_internal_mutable_add_yellow_card_change()->::Change_AddYellowCard::MergeFrom(
          from._internal_add_yellow_card_change());
      break;
    }
    case kAddRedCardChange: {
      _this->_internal_mutable_add_red_card_change()->::Change_AddRedCard::MergeFrom(
          from._internal_add_red_card_change());
      break;
    }
    case kYellowCardOverChange: {
      _this->_internal_mutable_yellow_card_over_change()->::Change_YellowCardOver::MergeFrom(
          from._internal_yellow_card_over_change());
      break;
    }
    case kAddGameEventChange: {
      _this->_internal_mutable_add_game_event_change()->::Change_AddGameEvent::MergeFrom(
          from._internal_add_game_event_change());
      break;
    }
    case kAddPassiveGameEventChange: {
      _this->_internal_mutable_add_passive_game_event_change()->::Change_AddPassiveGameEvent::MergeFrom(
          from._internal_add_passive_game_event_change());
      break;
    }
    case kAddProposalChange: {
      _this->_internal_mutable_add_proposal_change()->::Change_AddProposal::MergeFrom(
          from._internal_add_proposal_change());
      break;
    }
    case kUpdateConfigChange: {
      _this->_internal_mutable_update_config_change()->::Change_UpdateConfig::MergeFrom(
          from._internal_update_config_change());
      break;
    }
    case kUpdateTeamStateChange: {
      _this->_internal_mutable_update_team_state_change()->::Change_UpdateTeamState::MergeFrom(
          from._internal_update_team_state_change());
      break;
    }
    case kSwitchColorsChange: {
      _this->_internal_mutable_switch_colors_change()->::Change_SwitchColors::MergeFrom(
          from._internal_switch_colors_change());
      break;
    }
    case kRevertChange: {
      _this->_internal_mutable_revert_change()->::Change_Revert::MergeFrom(
          from._internal_revert_change());
      break;
    }
    case kNewGameStateChange: {
      _this->_internal_mutable_new_game_state_change()->::Change_NewGameState::MergeFrom(
          from._internal_new_game_state_change());
      break;
    }
    case kAcceptProposalGroupChange: {
      _this->_internal_mutable_accept_proposal_group_change()->::Change_AcceptProposalGroup::MergeFrom(
          from._internal_accept_proposal_group_change());
      break;
    }
    case kSetStatusMessageChange: {
      _this->_internal_mutable_set_status_message_change()->::Change_SetStatusMessage::MergeFrom(
          from._internal_set_status_message_change());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Change::CopyFrom(const Change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change::IsInitialized() const {
  switch (change_case()) {
    case kNewCommandChange: {
      if (_internal_has_new_command_change()) {
        if (!_impl_.change_.new_command_change_->IsInitialized()) return false;
      }
      break;
    }
    case kChangeStageChange: {
      break;
    }
    case kSetBallPlacementPosChange: {
      if (_internal_has_set_ball_placement_pos_change()) {
        if (!_impl_.change_.set_ball_placement_pos_change_->IsInitialized()) return false;
      }
      break;
    }
    case kAddYellowCardChange: {
      if (_internal_has_add_yellow_card_change()) {
        if (!_impl_.change_.add_yellow_card_change_->IsInitialized()) return false;
      }
      break;
    }
    case kAddRedCardChange: {
      if (_internal_has_add_red_card_change()) {
        if (!_impl_.change_.add_red_card_change_->IsInitialized()) return false;
      }
      break;
    }
    case kYellowCardOverChange: {
      break;
    }
    case kAddGameEventChange: {
      if (_internal_has_add_game_event_change()) {
        if (!_impl_.change_.add_game_event_change_->IsInitialized()) return false;
      }
      break;
    }
    case kAddPassiveGameEventChange: {
      if (_internal_has_add_passive_game_event_change()) {
        if (!_impl_.change_.add_passive_game_event_change_->IsInitialized()) return false;
      }
      break;
    }
    case kAddProposalChange: {
      if (_internal_has_add_proposal_change()) {
        if (!_impl_.change_.add_proposal_change_->IsInitialized()) return false;
      }
      break;
    }
    case kUpdateConfigChange: {
      break;
    }
    case kUpdateTeamStateChange: {
      if (_internal_has_update_team_state_change()) {
        if (!_impl_.change_.update_team_state_change_->IsInitialized()) return false;
      }
      break;
    }
    case kSwitchColorsChange: {
      break;
    }
    case kRevertChange: {
      break;
    }
    case kNewGameStateChange: {
      if (_internal_has_new_game_state_change()) {
        if (!_impl_.change_.new_game_state_change_->IsInitialized()) return false;
      }
      break;
    }
    case kAcceptProposalGroupChange: {
      break;
    }
    case kSetStatusMessageChange: {
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Change::InternalSwap(Change* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.origin_, lhs_arena,
      &other->_impl_.origin_, rhs_arena
  );
  swap(_impl_.revertible_, other->_impl_.revertible_);
  swap(_impl_.change_, other->_impl_.change_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_getter, &descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto_once,
      file_level_metadata_statemachine_2fssl_5fgc_5fchange_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::StateChange*
Arena::CreateMaybeMessage< ::StateChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StateChange >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_NewCommand*
Arena::CreateMaybeMessage< ::Change_NewCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_NewCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_ChangeStage*
Arena::CreateMaybeMessage< ::Change_ChangeStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_ChangeStage >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_SetBallPlacementPos*
Arena::CreateMaybeMessage< ::Change_SetBallPlacementPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_SetBallPlacementPos >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AddYellowCard*
Arena::CreateMaybeMessage< ::Change_AddYellowCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AddYellowCard >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AddRedCard*
Arena::CreateMaybeMessage< ::Change_AddRedCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AddRedCard >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_YellowCardOver*
Arena::CreateMaybeMessage< ::Change_YellowCardOver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_YellowCardOver >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AddGameEvent*
Arena::CreateMaybeMessage< ::Change_AddGameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AddGameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AddPassiveGameEvent*
Arena::CreateMaybeMessage< ::Change_AddPassiveGameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AddPassiveGameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AddProposal*
Arena::CreateMaybeMessage< ::Change_AddProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AddProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AcceptProposalGroup*
Arena::CreateMaybeMessage< ::Change_AcceptProposalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AcceptProposalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_UpdateConfig*
Arena::CreateMaybeMessage< ::Change_UpdateConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_UpdateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_UpdateTeamState*
Arena::CreateMaybeMessage< ::Change_UpdateTeamState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_UpdateTeamState >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_SwitchColors*
Arena::CreateMaybeMessage< ::Change_SwitchColors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_SwitchColors >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_Revert*
Arena::CreateMaybeMessage< ::Change_Revert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_Revert >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_NewGameState*
Arena::CreateMaybeMessage< ::Change_NewGameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_NewGameState >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_SetStatusMessage*
Arena::CreateMaybeMessage< ::Change_SetStatusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_SetStatusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Change*
Arena::CreateMaybeMessage< ::Change >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
