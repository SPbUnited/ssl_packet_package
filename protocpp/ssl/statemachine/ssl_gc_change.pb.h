// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statemachine/ssl_gc_change.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_statemachine_2fssl_5fgc_5fchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_statemachine_2fssl_5fgc_5fchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "state/ssl_gc_state.pb.h"
#include "state/ssl_gc_common.pb.h"
#include "geom/ssl_gc_geometry.pb.h"
#include "state/ssl_gc_game_event.pb.h"
#include "state/ssl_gc_referee_message.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_statemachine_2fssl_5fgc_5fchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_statemachine_2fssl_5fgc_5fchange_2eproto;
class Change;
struct ChangeDefaultTypeInternal;
extern ChangeDefaultTypeInternal _Change_default_instance_;
class Change_AcceptProposalGroup;
struct Change_AcceptProposalGroupDefaultTypeInternal;
extern Change_AcceptProposalGroupDefaultTypeInternal _Change_AcceptProposalGroup_default_instance_;
class Change_AddGameEvent;
struct Change_AddGameEventDefaultTypeInternal;
extern Change_AddGameEventDefaultTypeInternal _Change_AddGameEvent_default_instance_;
class Change_AddPassiveGameEvent;
struct Change_AddPassiveGameEventDefaultTypeInternal;
extern Change_AddPassiveGameEventDefaultTypeInternal _Change_AddPassiveGameEvent_default_instance_;
class Change_AddProposal;
struct Change_AddProposalDefaultTypeInternal;
extern Change_AddProposalDefaultTypeInternal _Change_AddProposal_default_instance_;
class Change_AddRedCard;
struct Change_AddRedCardDefaultTypeInternal;
extern Change_AddRedCardDefaultTypeInternal _Change_AddRedCard_default_instance_;
class Change_AddYellowCard;
struct Change_AddYellowCardDefaultTypeInternal;
extern Change_AddYellowCardDefaultTypeInternal _Change_AddYellowCard_default_instance_;
class Change_ChangeStage;
struct Change_ChangeStageDefaultTypeInternal;
extern Change_ChangeStageDefaultTypeInternal _Change_ChangeStage_default_instance_;
class Change_NewCommand;
struct Change_NewCommandDefaultTypeInternal;
extern Change_NewCommandDefaultTypeInternal _Change_NewCommand_default_instance_;
class Change_NewGameState;
struct Change_NewGameStateDefaultTypeInternal;
extern Change_NewGameStateDefaultTypeInternal _Change_NewGameState_default_instance_;
class Change_Revert;
struct Change_RevertDefaultTypeInternal;
extern Change_RevertDefaultTypeInternal _Change_Revert_default_instance_;
class Change_SetBallPlacementPos;
struct Change_SetBallPlacementPosDefaultTypeInternal;
extern Change_SetBallPlacementPosDefaultTypeInternal _Change_SetBallPlacementPos_default_instance_;
class Change_SetStatusMessage;
struct Change_SetStatusMessageDefaultTypeInternal;
extern Change_SetStatusMessageDefaultTypeInternal _Change_SetStatusMessage_default_instance_;
class Change_SwitchColors;
struct Change_SwitchColorsDefaultTypeInternal;
extern Change_SwitchColorsDefaultTypeInternal _Change_SwitchColors_default_instance_;
class Change_UpdateConfig;
struct Change_UpdateConfigDefaultTypeInternal;
extern Change_UpdateConfigDefaultTypeInternal _Change_UpdateConfig_default_instance_;
class Change_UpdateTeamState;
struct Change_UpdateTeamStateDefaultTypeInternal;
extern Change_UpdateTeamStateDefaultTypeInternal _Change_UpdateTeamState_default_instance_;
class Change_YellowCardOver;
struct Change_YellowCardOverDefaultTypeInternal;
extern Change_YellowCardOverDefaultTypeInternal _Change_YellowCardOver_default_instance_;
class StateChange;
struct StateChangeDefaultTypeInternal;
extern StateChangeDefaultTypeInternal _StateChange_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Change* Arena::CreateMaybeMessage<::Change>(Arena*);
template<> ::Change_AcceptProposalGroup* Arena::CreateMaybeMessage<::Change_AcceptProposalGroup>(Arena*);
template<> ::Change_AddGameEvent* Arena::CreateMaybeMessage<::Change_AddGameEvent>(Arena*);
template<> ::Change_AddPassiveGameEvent* Arena::CreateMaybeMessage<::Change_AddPassiveGameEvent>(Arena*);
template<> ::Change_AddProposal* Arena::CreateMaybeMessage<::Change_AddProposal>(Arena*);
template<> ::Change_AddRedCard* Arena::CreateMaybeMessage<::Change_AddRedCard>(Arena*);
template<> ::Change_AddYellowCard* Arena::CreateMaybeMessage<::Change_AddYellowCard>(Arena*);
template<> ::Change_ChangeStage* Arena::CreateMaybeMessage<::Change_ChangeStage>(Arena*);
template<> ::Change_NewCommand* Arena::CreateMaybeMessage<::Change_NewCommand>(Arena*);
template<> ::Change_NewGameState* Arena::CreateMaybeMessage<::Change_NewGameState>(Arena*);
template<> ::Change_Revert* Arena::CreateMaybeMessage<::Change_Revert>(Arena*);
template<> ::Change_SetBallPlacementPos* Arena::CreateMaybeMessage<::Change_SetBallPlacementPos>(Arena*);
template<> ::Change_SetStatusMessage* Arena::CreateMaybeMessage<::Change_SetStatusMessage>(Arena*);
template<> ::Change_SwitchColors* Arena::CreateMaybeMessage<::Change_SwitchColors>(Arena*);
template<> ::Change_UpdateConfig* Arena::CreateMaybeMessage<::Change_UpdateConfig>(Arena*);
template<> ::Change_UpdateTeamState* Arena::CreateMaybeMessage<::Change_UpdateTeamState>(Arena*);
template<> ::Change_YellowCardOver* Arena::CreateMaybeMessage<::Change_YellowCardOver>(Arena*);
template<> ::StateChange* Arena::CreateMaybeMessage<::StateChange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class StateChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StateChange) */ {
 public:
  inline StateChange() : StateChange(nullptr) {}
  ~StateChange() override;
  explicit PROTOBUF_CONSTEXPR StateChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateChange(const StateChange& from);
  StateChange(StateChange&& from) noexcept
    : StateChange() {
    *this = ::std::move(from);
  }

  inline StateChange& operator=(const StateChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateChange& operator=(StateChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateChange* internal_default_instance() {
    return reinterpret_cast<const StateChange*>(
               &_StateChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StateChange& a, StateChange& b) {
    a.Swap(&b);
  }
  inline void Swap(StateChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StateChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StateChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StateChange& from) {
    StateChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StateChange";
  }
  protected:
  explicit StateChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatePreFieldNumber = 2,
    kStateFieldNumber = 3,
    kChangeFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // optional .State state_pre = 2;
  bool has_state_pre() const;
  private:
  bool _internal_has_state_pre() const;
  public:
  void clear_state_pre();
  const ::State& state_pre() const;
  PROTOBUF_NODISCARD ::State* release_state_pre();
  ::State* mutable_state_pre();
  void set_allocated_state_pre(::State* state_pre);
  private:
  const ::State& _internal_state_pre() const;
  ::State* _internal_mutable_state_pre();
  public:
  void unsafe_arena_set_allocated_state_pre(
      ::State* state_pre);
  ::State* unsafe_arena_release_state_pre();

  // optional .State state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::State& state() const;
  PROTOBUF_NODISCARD ::State* release_state();
  ::State* mutable_state();
  void set_allocated_state(::State* state);
  private:
  const ::State& _internal_state() const;
  ::State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::State* state);
  ::State* unsafe_arena_release_state();

  // optional .Change change = 4;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  const ::Change& change() const;
  PROTOBUF_NODISCARD ::Change* release_change();
  ::Change* mutable_change();
  void set_allocated_change(::Change* change);
  private:
  const ::Change& _internal_change() const;
  ::Change* _internal_mutable_change();
  public:
  void unsafe_arena_set_allocated_change(
      ::Change* change);
  ::Change* unsafe_arena_release_change();

  // optional .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StateChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::State* state_pre_;
    ::State* state_;
    ::Change* change_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_NewCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.NewCommand) */ {
 public:
  inline Change_NewCommand() : Change_NewCommand(nullptr) {}
  ~Change_NewCommand() override;
  explicit PROTOBUF_CONSTEXPR Change_NewCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_NewCommand(const Change_NewCommand& from);
  Change_NewCommand(Change_NewCommand&& from) noexcept
    : Change_NewCommand() {
    *this = ::std::move(from);
  }

  inline Change_NewCommand& operator=(const Change_NewCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_NewCommand& operator=(Change_NewCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_NewCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_NewCommand* internal_default_instance() {
    return reinterpret_cast<const Change_NewCommand*>(
               &_Change_NewCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Change_NewCommand& a, Change_NewCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_NewCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_NewCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_NewCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_NewCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_NewCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_NewCommand& from) {
    Change_NewCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_NewCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.NewCommand";
  }
  protected:
  explicit Change_NewCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // optional .Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::Command& command() const;
  PROTOBUF_NODISCARD ::Command* release_command();
  ::Command* mutable_command();
  void set_allocated_command(::Command* command);
  private:
  const ::Command& _internal_command() const;
  ::Command* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::Command* command);
  ::Command* unsafe_arena_release_command();

  // @@protoc_insertion_point(class_scope:Change.NewCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Command* command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_ChangeStage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.ChangeStage) */ {
 public:
  inline Change_ChangeStage() : Change_ChangeStage(nullptr) {}
  ~Change_ChangeStage() override;
  explicit PROTOBUF_CONSTEXPR Change_ChangeStage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_ChangeStage(const Change_ChangeStage& from);
  Change_ChangeStage(Change_ChangeStage&& from) noexcept
    : Change_ChangeStage() {
    *this = ::std::move(from);
  }

  inline Change_ChangeStage& operator=(const Change_ChangeStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_ChangeStage& operator=(Change_ChangeStage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_ChangeStage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_ChangeStage* internal_default_instance() {
    return reinterpret_cast<const Change_ChangeStage*>(
               &_Change_ChangeStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Change_ChangeStage& a, Change_ChangeStage& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_ChangeStage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_ChangeStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_ChangeStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_ChangeStage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_ChangeStage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_ChangeStage& from) {
    Change_ChangeStage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_ChangeStage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.ChangeStage";
  }
  protected:
  explicit Change_ChangeStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewStageFieldNumber = 1,
  };
  // optional .Referee.Stage new_stage = 1;
  bool has_new_stage() const;
  private:
  bool _internal_has_new_stage() const;
  public:
  void clear_new_stage();
  ::Referee_Stage new_stage() const;
  void set_new_stage(::Referee_Stage value);
  private:
  ::Referee_Stage _internal_new_stage() const;
  void _internal_set_new_stage(::Referee_Stage value);
  public:

  // @@protoc_insertion_point(class_scope:Change.ChangeStage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int new_stage_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_SetBallPlacementPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.SetBallPlacementPos) */ {
 public:
  inline Change_SetBallPlacementPos() : Change_SetBallPlacementPos(nullptr) {}
  ~Change_SetBallPlacementPos() override;
  explicit PROTOBUF_CONSTEXPR Change_SetBallPlacementPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_SetBallPlacementPos(const Change_SetBallPlacementPos& from);
  Change_SetBallPlacementPos(Change_SetBallPlacementPos&& from) noexcept
    : Change_SetBallPlacementPos() {
    *this = ::std::move(from);
  }

  inline Change_SetBallPlacementPos& operator=(const Change_SetBallPlacementPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_SetBallPlacementPos& operator=(Change_SetBallPlacementPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_SetBallPlacementPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_SetBallPlacementPos* internal_default_instance() {
    return reinterpret_cast<const Change_SetBallPlacementPos*>(
               &_Change_SetBallPlacementPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Change_SetBallPlacementPos& a, Change_SetBallPlacementPos& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_SetBallPlacementPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_SetBallPlacementPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_SetBallPlacementPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_SetBallPlacementPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_SetBallPlacementPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_SetBallPlacementPos& from) {
    Change_SetBallPlacementPos::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_SetBallPlacementPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.SetBallPlacementPos";
  }
  protected:
  explicit Change_SetBallPlacementPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
  };
  // optional .Vector2 pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Vector2& pos() const;
  PROTOBUF_NODISCARD ::Vector2* release_pos();
  ::Vector2* mutable_pos();
  void set_allocated_pos(::Vector2* pos);
  private:
  const ::Vector2& _internal_pos() const;
  ::Vector2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Vector2* pos);
  ::Vector2* unsafe_arena_release_pos();

  // @@protoc_insertion_point(class_scope:Change.SetBallPlacementPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Vector2* pos_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_AddYellowCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.AddYellowCard) */ {
 public:
  inline Change_AddYellowCard() : Change_AddYellowCard(nullptr) {}
  ~Change_AddYellowCard() override;
  explicit PROTOBUF_CONSTEXPR Change_AddYellowCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_AddYellowCard(const Change_AddYellowCard& from);
  Change_AddYellowCard(Change_AddYellowCard&& from) noexcept
    : Change_AddYellowCard() {
    *this = ::std::move(from);
  }

  inline Change_AddYellowCard& operator=(const Change_AddYellowCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_AddYellowCard& operator=(Change_AddYellowCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_AddYellowCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_AddYellowCard* internal_default_instance() {
    return reinterpret_cast<const Change_AddYellowCard*>(
               &_Change_AddYellowCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Change_AddYellowCard& a, Change_AddYellowCard& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_AddYellowCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_AddYellowCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_AddYellowCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_AddYellowCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_AddYellowCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_AddYellowCard& from) {
    Change_AddYellowCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_AddYellowCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.AddYellowCard";
  }
  protected:
  explicit Change_AddYellowCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCausedByGameEventFieldNumber = 2,
    kForTeamFieldNumber = 1,
  };
  // optional .GameEvent caused_by_game_event = 2;
  bool has_caused_by_game_event() const;
  private:
  bool _internal_has_caused_by_game_event() const;
  public:
  void clear_caused_by_game_event();
  const ::GameEvent& caused_by_game_event() const;
  PROTOBUF_NODISCARD ::GameEvent* release_caused_by_game_event();
  ::GameEvent* mutable_caused_by_game_event();
  void set_allocated_caused_by_game_event(::GameEvent* caused_by_game_event);
  private:
  const ::GameEvent& _internal_caused_by_game_event() const;
  ::GameEvent* _internal_mutable_caused_by_game_event();
  public:
  void unsafe_arena_set_allocated_caused_by_game_event(
      ::GameEvent* caused_by_game_event);
  ::GameEvent* unsafe_arena_release_caused_by_game_event();

  // optional .Team for_team = 1;
  bool has_for_team() const;
  private:
  bool _internal_has_for_team() const;
  public:
  void clear_for_team();
  ::Team for_team() const;
  void set_for_team(::Team value);
  private:
  ::Team _internal_for_team() const;
  void _internal_set_for_team(::Team value);
  public:

  // @@protoc_insertion_point(class_scope:Change.AddYellowCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::GameEvent* caused_by_game_event_;
    int for_team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_AddRedCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.AddRedCard) */ {
 public:
  inline Change_AddRedCard() : Change_AddRedCard(nullptr) {}
  ~Change_AddRedCard() override;
  explicit PROTOBUF_CONSTEXPR Change_AddRedCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_AddRedCard(const Change_AddRedCard& from);
  Change_AddRedCard(Change_AddRedCard&& from) noexcept
    : Change_AddRedCard() {
    *this = ::std::move(from);
  }

  inline Change_AddRedCard& operator=(const Change_AddRedCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_AddRedCard& operator=(Change_AddRedCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_AddRedCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_AddRedCard* internal_default_instance() {
    return reinterpret_cast<const Change_AddRedCard*>(
               &_Change_AddRedCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Change_AddRedCard& a, Change_AddRedCard& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_AddRedCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_AddRedCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_AddRedCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_AddRedCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_AddRedCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_AddRedCard& from) {
    Change_AddRedCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_AddRedCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.AddRedCard";
  }
  protected:
  explicit Change_AddRedCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCausedByGameEventFieldNumber = 2,
    kForTeamFieldNumber = 1,
  };
  // optional .GameEvent caused_by_game_event = 2;
  bool has_caused_by_game_event() const;
  private:
  bool _internal_has_caused_by_game_event() const;
  public:
  void clear_caused_by_game_event();
  const ::GameEvent& caused_by_game_event() const;
  PROTOBUF_NODISCARD ::GameEvent* release_caused_by_game_event();
  ::GameEvent* mutable_caused_by_game_event();
  void set_allocated_caused_by_game_event(::GameEvent* caused_by_game_event);
  private:
  const ::GameEvent& _internal_caused_by_game_event() const;
  ::GameEvent* _internal_mutable_caused_by_game_event();
  public:
  void unsafe_arena_set_allocated_caused_by_game_event(
      ::GameEvent* caused_by_game_event);
  ::GameEvent* unsafe_arena_release_caused_by_game_event();

  // optional .Team for_team = 1;
  bool has_for_team() const;
  private:
  bool _internal_has_for_team() const;
  public:
  void clear_for_team();
  ::Team for_team() const;
  void set_for_team(::Team value);
  private:
  ::Team _internal_for_team() const;
  void _internal_set_for_team(::Team value);
  public:

  // @@protoc_insertion_point(class_scope:Change.AddRedCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::GameEvent* caused_by_game_event_;
    int for_team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_YellowCardOver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.YellowCardOver) */ {
 public:
  inline Change_YellowCardOver() : Change_YellowCardOver(nullptr) {}
  ~Change_YellowCardOver() override;
  explicit PROTOBUF_CONSTEXPR Change_YellowCardOver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_YellowCardOver(const Change_YellowCardOver& from);
  Change_YellowCardOver(Change_YellowCardOver&& from) noexcept
    : Change_YellowCardOver() {
    *this = ::std::move(from);
  }

  inline Change_YellowCardOver& operator=(const Change_YellowCardOver& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_YellowCardOver& operator=(Change_YellowCardOver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_YellowCardOver& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_YellowCardOver* internal_default_instance() {
    return reinterpret_cast<const Change_YellowCardOver*>(
               &_Change_YellowCardOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Change_YellowCardOver& a, Change_YellowCardOver& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_YellowCardOver* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_YellowCardOver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_YellowCardOver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_YellowCardOver>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_YellowCardOver& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_YellowCardOver& from) {
    Change_YellowCardOver::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_YellowCardOver* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.YellowCardOver";
  }
  protected:
  explicit Change_YellowCardOver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForTeamFieldNumber = 1,
  };
  // optional .Team for_team = 1;
  bool has_for_team() const;
  private:
  bool _internal_has_for_team() const;
  public:
  void clear_for_team();
  ::Team for_team() const;
  void set_for_team(::Team value);
  private:
  ::Team _internal_for_team() const;
  void _internal_set_for_team(::Team value);
  public:

  // @@protoc_insertion_point(class_scope:Change.YellowCardOver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int for_team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_AddGameEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.AddGameEvent) */ {
 public:
  inline Change_AddGameEvent() : Change_AddGameEvent(nullptr) {}
  ~Change_AddGameEvent() override;
  explicit PROTOBUF_CONSTEXPR Change_AddGameEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_AddGameEvent(const Change_AddGameEvent& from);
  Change_AddGameEvent(Change_AddGameEvent&& from) noexcept
    : Change_AddGameEvent() {
    *this = ::std::move(from);
  }

  inline Change_AddGameEvent& operator=(const Change_AddGameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_AddGameEvent& operator=(Change_AddGameEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_AddGameEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_AddGameEvent* internal_default_instance() {
    return reinterpret_cast<const Change_AddGameEvent*>(
               &_Change_AddGameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Change_AddGameEvent& a, Change_AddGameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_AddGameEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_AddGameEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_AddGameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_AddGameEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_AddGameEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_AddGameEvent& from) {
    Change_AddGameEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_AddGameEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.AddGameEvent";
  }
  protected:
  explicit Change_AddGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameEventFieldNumber = 1,
  };
  // optional .GameEvent game_event = 1;
  bool has_game_event() const;
  private:
  bool _internal_has_game_event() const;
  public:
  void clear_game_event();
  const ::GameEvent& game_event() const;
  PROTOBUF_NODISCARD ::GameEvent* release_game_event();
  ::GameEvent* mutable_game_event();
  void set_allocated_game_event(::GameEvent* game_event);
  private:
  const ::GameEvent& _internal_game_event() const;
  ::GameEvent* _internal_mutable_game_event();
  public:
  void unsafe_arena_set_allocated_game_event(
      ::GameEvent* game_event);
  ::GameEvent* unsafe_arena_release_game_event();

  // @@protoc_insertion_point(class_scope:Change.AddGameEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::GameEvent* game_event_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_AddPassiveGameEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.AddPassiveGameEvent) */ {
 public:
  inline Change_AddPassiveGameEvent() : Change_AddPassiveGameEvent(nullptr) {}
  ~Change_AddPassiveGameEvent() override;
  explicit PROTOBUF_CONSTEXPR Change_AddPassiveGameEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_AddPassiveGameEvent(const Change_AddPassiveGameEvent& from);
  Change_AddPassiveGameEvent(Change_AddPassiveGameEvent&& from) noexcept
    : Change_AddPassiveGameEvent() {
    *this = ::std::move(from);
  }

  inline Change_AddPassiveGameEvent& operator=(const Change_AddPassiveGameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_AddPassiveGameEvent& operator=(Change_AddPassiveGameEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_AddPassiveGameEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_AddPassiveGameEvent* internal_default_instance() {
    return reinterpret_cast<const Change_AddPassiveGameEvent*>(
               &_Change_AddPassiveGameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Change_AddPassiveGameEvent& a, Change_AddPassiveGameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_AddPassiveGameEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_AddPassiveGameEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_AddPassiveGameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_AddPassiveGameEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_AddPassiveGameEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_AddPassiveGameEvent& from) {
    Change_AddPassiveGameEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_AddPassiveGameEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.AddPassiveGameEvent";
  }
  protected:
  explicit Change_AddPassiveGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameEventFieldNumber = 1,
  };
  // optional .GameEvent game_event = 1;
  bool has_game_event() const;
  private:
  bool _internal_has_game_event() const;
  public:
  void clear_game_event();
  const ::GameEvent& game_event() const;
  PROTOBUF_NODISCARD ::GameEvent* release_game_event();
  ::GameEvent* mutable_game_event();
  void set_allocated_game_event(::GameEvent* game_event);
  private:
  const ::GameEvent& _internal_game_event() const;
  ::GameEvent* _internal_mutable_game_event();
  public:
  void unsafe_arena_set_allocated_game_event(
      ::GameEvent* game_event);
  ::GameEvent* unsafe_arena_release_game_event();

  // @@protoc_insertion_point(class_scope:Change.AddPassiveGameEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::GameEvent* game_event_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_AddProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.AddProposal) */ {
 public:
  inline Change_AddProposal() : Change_AddProposal(nullptr) {}
  ~Change_AddProposal() override;
  explicit PROTOBUF_CONSTEXPR Change_AddProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_AddProposal(const Change_AddProposal& from);
  Change_AddProposal(Change_AddProposal&& from) noexcept
    : Change_AddProposal() {
    *this = ::std::move(from);
  }

  inline Change_AddProposal& operator=(const Change_AddProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_AddProposal& operator=(Change_AddProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_AddProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_AddProposal* internal_default_instance() {
    return reinterpret_cast<const Change_AddProposal*>(
               &_Change_AddProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Change_AddProposal& a, Change_AddProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_AddProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_AddProposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_AddProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_AddProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_AddProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_AddProposal& from) {
    Change_AddProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_AddProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.AddProposal";
  }
  protected:
  explicit Change_AddProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 1,
  };
  // optional .Proposal proposal = 1;
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::Proposal& proposal() const;
  PROTOBUF_NODISCARD ::Proposal* release_proposal();
  ::Proposal* mutable_proposal();
  void set_allocated_proposal(::Proposal* proposal);
  private:
  const ::Proposal& _internal_proposal() const;
  ::Proposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::Proposal* proposal);
  ::Proposal* unsafe_arena_release_proposal();

  // @@protoc_insertion_point(class_scope:Change.AddProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Proposal* proposal_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_AcceptProposalGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.AcceptProposalGroup) */ {
 public:
  inline Change_AcceptProposalGroup() : Change_AcceptProposalGroup(nullptr) {}
  ~Change_AcceptProposalGroup() override;
  explicit PROTOBUF_CONSTEXPR Change_AcceptProposalGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_AcceptProposalGroup(const Change_AcceptProposalGroup& from);
  Change_AcceptProposalGroup(Change_AcceptProposalGroup&& from) noexcept
    : Change_AcceptProposalGroup() {
    *this = ::std::move(from);
  }

  inline Change_AcceptProposalGroup& operator=(const Change_AcceptProposalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_AcceptProposalGroup& operator=(Change_AcceptProposalGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_AcceptProposalGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_AcceptProposalGroup* internal_default_instance() {
    return reinterpret_cast<const Change_AcceptProposalGroup*>(
               &_Change_AcceptProposalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Change_AcceptProposalGroup& a, Change_AcceptProposalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_AcceptProposalGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_AcceptProposalGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_AcceptProposalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_AcceptProposalGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_AcceptProposalGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_AcceptProposalGroup& from) {
    Change_AcceptProposalGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_AcceptProposalGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.AcceptProposalGroup";
  }
  protected:
  explicit Change_AcceptProposalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptedByFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // optional string accepted_by = 2;
  bool has_accepted_by() const;
  private:
  bool _internal_has_accepted_by() const;
  public:
  void clear_accepted_by();
  const std::string& accepted_by() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accepted_by(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accepted_by();
  PROTOBUF_NODISCARD std::string* release_accepted_by();
  void set_allocated_accepted_by(std::string* accepted_by);
  private:
  const std::string& _internal_accepted_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accepted_by(const std::string& value);
  std::string* _internal_mutable_accepted_by();
  public:

  // optional string group_id = 3;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:Change.AcceptProposalGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accepted_by_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_UpdateConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.UpdateConfig) */ {
 public:
  inline Change_UpdateConfig() : Change_UpdateConfig(nullptr) {}
  ~Change_UpdateConfig() override;
  explicit PROTOBUF_CONSTEXPR Change_UpdateConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_UpdateConfig(const Change_UpdateConfig& from);
  Change_UpdateConfig(Change_UpdateConfig&& from) noexcept
    : Change_UpdateConfig() {
    *this = ::std::move(from);
  }

  inline Change_UpdateConfig& operator=(const Change_UpdateConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_UpdateConfig& operator=(Change_UpdateConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_UpdateConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_UpdateConfig* internal_default_instance() {
    return reinterpret_cast<const Change_UpdateConfig*>(
               &_Change_UpdateConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Change_UpdateConfig& a, Change_UpdateConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_UpdateConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_UpdateConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_UpdateConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_UpdateConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_UpdateConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_UpdateConfig& from) {
    Change_UpdateConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_UpdateConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.UpdateConfig";
  }
  protected:
  explicit Change_UpdateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxRobotsPerTeamFieldNumber = 5,
    kDivisionFieldNumber = 1,
    kFirstKickoffTeamFieldNumber = 2,
    kMatchTypeFieldNumber = 4,
  };
  // optional .google.protobuf.Int32Value max_robots_per_team = 5;
  bool has_max_robots_per_team() const;
  private:
  bool _internal_has_max_robots_per_team() const;
  public:
  void clear_max_robots_per_team();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& max_robots_per_team() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_max_robots_per_team();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_max_robots_per_team();
  void set_allocated_max_robots_per_team(::PROTOBUF_NAMESPACE_ID::Int32Value* max_robots_per_team);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_max_robots_per_team() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_max_robots_per_team();
  public:
  void unsafe_arena_set_allocated_max_robots_per_team(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* max_robots_per_team);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_max_robots_per_team();

  // optional .Division division = 1;
  bool has_division() const;
  private:
  bool _internal_has_division() const;
  public:
  void clear_division();
  ::Division division() const;
  void set_division(::Division value);
  private:
  ::Division _internal_division() const;
  void _internal_set_division(::Division value);
  public:

  // optional .Team first_kickoff_team = 2;
  bool has_first_kickoff_team() const;
  private:
  bool _internal_has_first_kickoff_team() const;
  public:
  void clear_first_kickoff_team();
  ::Team first_kickoff_team() const;
  void set_first_kickoff_team(::Team value);
  private:
  ::Team _internal_first_kickoff_team() const;
  void _internal_set_first_kickoff_team(::Team value);
  public:

  // optional .MatchType match_type = 4;
  bool has_match_type() const;
  private:
  bool _internal_has_match_type() const;
  public:
  void clear_match_type();
  ::MatchType match_type() const;
  void set_match_type(::MatchType value);
  private:
  ::MatchType _internal_match_type() const;
  void _internal_set_match_type(::MatchType value);
  public:

  // @@protoc_insertion_point(class_scope:Change.UpdateConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* max_robots_per_team_;
    int division_;
    int first_kickoff_team_;
    int match_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_UpdateTeamState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.UpdateTeamState) */ {
 public:
  inline Change_UpdateTeamState() : Change_UpdateTeamState(nullptr) {}
  ~Change_UpdateTeamState() override;
  explicit PROTOBUF_CONSTEXPR Change_UpdateTeamState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_UpdateTeamState(const Change_UpdateTeamState& from);
  Change_UpdateTeamState(Change_UpdateTeamState&& from) noexcept
    : Change_UpdateTeamState() {
    *this = ::std::move(from);
  }

  inline Change_UpdateTeamState& operator=(const Change_UpdateTeamState& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_UpdateTeamState& operator=(Change_UpdateTeamState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_UpdateTeamState& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_UpdateTeamState* internal_default_instance() {
    return reinterpret_cast<const Change_UpdateTeamState*>(
               &_Change_UpdateTeamState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Change_UpdateTeamState& a, Change_UpdateTeamState& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_UpdateTeamState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_UpdateTeamState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_UpdateTeamState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_UpdateTeamState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_UpdateTeamState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_UpdateTeamState& from) {
    Change_UpdateTeamState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_UpdateTeamState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.UpdateTeamState";
  }
  protected:
  explicit Change_UpdateTeamState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 2,
    kGoalsFieldNumber = 3,
    kGoalkeeperFieldNumber = 4,
    kTimeoutsLeftFieldNumber = 5,
    kTimeoutTimeLeftFieldNumber = 6,
    kOnPositiveHalfFieldNumber = 7,
    kBallPlacementFailuresFieldNumber = 8,
    kCanPlaceBallFieldNumber = 9,
    kRequestsBotSubstitutionFieldNumber = 10,
    kRedCardFieldNumber = 12,
    kFoulFieldNumber = 13,
    kRemoveYellowCardFieldNumber = 14,
    kRemoveRedCardFieldNumber = 15,
    kRemoveFoulFieldNumber = 16,
    kRequestsTimeoutFieldNumber = 17,
    kRequestsChallengeFieldNumber = 18,
    kRequestsEmergencyStopFieldNumber = 19,
    kYellowCardFieldNumber = 20,
    kChallengeFlagsLeftFieldNumber = 21,
    kBotSubstitutionsLeftFieldNumber = 22,
    kForTeamFieldNumber = 1,
    kHullColorFieldNumber = 23,
  };
  // optional .google.protobuf.StringValue team_name = 2;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& team_name() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_team_name();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_team_name();
  void set_allocated_team_name(::PROTOBUF_NAMESPACE_ID::StringValue* team_name);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_team_name() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_team_name();
  public:
  void unsafe_arena_set_allocated_team_name(
      ::PROTOBUF_NAMESPACE_ID::StringValue* team_name);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_team_name();

  // optional .google.protobuf.Int32Value goals = 3;
  bool has_goals() const;
  private:
  bool _internal_has_goals() const;
  public:
  void clear_goals();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& goals() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_goals();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_goals();
  void set_allocated_goals(::PROTOBUF_NAMESPACE_ID::Int32Value* goals);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_goals() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_goals();
  public:
  void unsafe_arena_set_allocated_goals(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* goals);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_goals();

  // optional .google.protobuf.Int32Value goalkeeper = 4;
  bool has_goalkeeper() const;
  private:
  bool _internal_has_goalkeeper() const;
  public:
  void clear_goalkeeper();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& goalkeeper() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_goalkeeper();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_goalkeeper();
  void set_allocated_goalkeeper(::PROTOBUF_NAMESPACE_ID::Int32Value* goalkeeper);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_goalkeeper() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_goalkeeper();
  public:
  void unsafe_arena_set_allocated_goalkeeper(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* goalkeeper);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_goalkeeper();

  // optional .google.protobuf.Int32Value timeouts_left = 5;
  bool has_timeouts_left() const;
  private:
  bool _internal_has_timeouts_left() const;
  public:
  void clear_timeouts_left();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& timeouts_left() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_timeouts_left();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_timeouts_left();
  void set_allocated_timeouts_left(::PROTOBUF_NAMESPACE_ID::Int32Value* timeouts_left);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_timeouts_left() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_timeouts_left();
  public:
  void unsafe_arena_set_allocated_timeouts_left(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* timeouts_left);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_timeouts_left();

  // optional .google.protobuf.StringValue timeout_time_left = 6;
  bool has_timeout_time_left() const;
  private:
  bool _internal_has_timeout_time_left() const;
  public:
  void clear_timeout_time_left();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& timeout_time_left() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_timeout_time_left();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_timeout_time_left();
  void set_allocated_timeout_time_left(::PROTOBUF_NAMESPACE_ID::StringValue* timeout_time_left);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_timeout_time_left() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_timeout_time_left();
  public:
  void unsafe_arena_set_allocated_timeout_time_left(
      ::PROTOBUF_NAMESPACE_ID::StringValue* timeout_time_left);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_timeout_time_left();

  // optional .google.protobuf.BoolValue on_positive_half = 7;
  bool has_on_positive_half() const;
  private:
  bool _internal_has_on_positive_half() const;
  public:
  void clear_on_positive_half();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& on_positive_half() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_on_positive_half();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_on_positive_half();
  void set_allocated_on_positive_half(::PROTOBUF_NAMESPACE_ID::BoolValue* on_positive_half);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_on_positive_half() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_on_positive_half();
  public:
  void unsafe_arena_set_allocated_on_positive_half(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* on_positive_half);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_on_positive_half();

  // optional .google.protobuf.Int32Value ball_placement_failures = 8;
  bool has_ball_placement_failures() const;
  private:
  bool _internal_has_ball_placement_failures() const;
  public:
  void clear_ball_placement_failures();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& ball_placement_failures() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_ball_placement_failures();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_ball_placement_failures();
  void set_allocated_ball_placement_failures(::PROTOBUF_NAMESPACE_ID::Int32Value* ball_placement_failures);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_ball_placement_failures() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_ball_placement_failures();
  public:
  void unsafe_arena_set_allocated_ball_placement_failures(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* ball_placement_failures);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_ball_placement_failures();

  // optional .google.protobuf.BoolValue can_place_ball = 9;
  bool has_can_place_ball() const;
  private:
  bool _internal_has_can_place_ball() const;
  public:
  void clear_can_place_ball();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& can_place_ball() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_can_place_ball();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_can_place_ball();
  void set_allocated_can_place_ball(::PROTOBUF_NAMESPACE_ID::BoolValue* can_place_ball);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_can_place_ball() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_can_place_ball();
  public:
  void unsafe_arena_set_allocated_can_place_ball(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* can_place_ball);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_can_place_ball();

  // optional .google.protobuf.BoolValue requests_bot_substitution = 10;
  bool has_requests_bot_substitution() const;
  private:
  bool _internal_has_requests_bot_substitution() const;
  public:
  void clear_requests_bot_substitution();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& requests_bot_substitution() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_requests_bot_substitution();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_requests_bot_substitution();
  void set_allocated_requests_bot_substitution(::PROTOBUF_NAMESPACE_ID::BoolValue* requests_bot_substitution);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_requests_bot_substitution() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_requests_bot_substitution();
  public:
  void unsafe_arena_set_allocated_requests_bot_substitution(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_bot_substitution);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_requests_bot_substitution();

  // optional .RedCard red_card = 12;
  bool has_red_card() const;
  private:
  bool _internal_has_red_card() const;
  public:
  void clear_red_card();
  const ::RedCard& red_card() const;
  PROTOBUF_NODISCARD ::RedCard* release_red_card();
  ::RedCard* mutable_red_card();
  void set_allocated_red_card(::RedCard* red_card);
  private:
  const ::RedCard& _internal_red_card() const;
  ::RedCard* _internal_mutable_red_card();
  public:
  void unsafe_arena_set_allocated_red_card(
      ::RedCard* red_card);
  ::RedCard* unsafe_arena_release_red_card();

  // optional .Foul foul = 13;
  bool has_foul() const;
  private:
  bool _internal_has_foul() const;
  public:
  void clear_foul();
  const ::Foul& foul() const;
  PROTOBUF_NODISCARD ::Foul* release_foul();
  ::Foul* mutable_foul();
  void set_allocated_foul(::Foul* foul);
  private:
  const ::Foul& _internal_foul() const;
  ::Foul* _internal_mutable_foul();
  public:
  void unsafe_arena_set_allocated_foul(
      ::Foul* foul);
  ::Foul* unsafe_arena_release_foul();

  // optional .google.protobuf.UInt32Value remove_yellow_card = 14;
  bool has_remove_yellow_card() const;
  private:
  bool _internal_has_remove_yellow_card() const;
  public:
  void clear_remove_yellow_card();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& remove_yellow_card() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_remove_yellow_card();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_remove_yellow_card();
  void set_allocated_remove_yellow_card(::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_yellow_card);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_remove_yellow_card() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_remove_yellow_card();
  public:
  void unsafe_arena_set_allocated_remove_yellow_card(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_yellow_card);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_remove_yellow_card();

  // optional .google.protobuf.UInt32Value remove_red_card = 15;
  bool has_remove_red_card() const;
  private:
  bool _internal_has_remove_red_card() const;
  public:
  void clear_remove_red_card();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& remove_red_card() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_remove_red_card();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_remove_red_card();
  void set_allocated_remove_red_card(::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_red_card);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_remove_red_card() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_remove_red_card();
  public:
  void unsafe_arena_set_allocated_remove_red_card(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_red_card);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_remove_red_card();

  // optional .google.protobuf.UInt32Value remove_foul = 16;
  bool has_remove_foul() const;
  private:
  bool _internal_has_remove_foul() const;
  public:
  void clear_remove_foul();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& remove_foul() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_remove_foul();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_remove_foul();
  void set_allocated_remove_foul(::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_foul);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_remove_foul() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_remove_foul();
  public:
  void unsafe_arena_set_allocated_remove_foul(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_foul);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_remove_foul();

  // optional .google.protobuf.BoolValue requests_timeout = 17;
  bool has_requests_timeout() const;
  private:
  bool _internal_has_requests_timeout() const;
  public:
  void clear_requests_timeout();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& requests_timeout() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_requests_timeout();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_requests_timeout();
  void set_allocated_requests_timeout(::PROTOBUF_NAMESPACE_ID::BoolValue* requests_timeout);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_requests_timeout() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_requests_timeout();
  public:
  void unsafe_arena_set_allocated_requests_timeout(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_timeout);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_requests_timeout();

  // optional .google.protobuf.BoolValue requests_challenge = 18;
  bool has_requests_challenge() const;
  private:
  bool _internal_has_requests_challenge() const;
  public:
  void clear_requests_challenge();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& requests_challenge() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_requests_challenge();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_requests_challenge();
  void set_allocated_requests_challenge(::PROTOBUF_NAMESPACE_ID::BoolValue* requests_challenge);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_requests_challenge() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_requests_challenge();
  public:
  void unsafe_arena_set_allocated_requests_challenge(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_challenge);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_requests_challenge();

  // optional .google.protobuf.BoolValue requests_emergency_stop = 19;
  bool has_requests_emergency_stop() const;
  private:
  bool _internal_has_requests_emergency_stop() const;
  public:
  void clear_requests_emergency_stop();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& requests_emergency_stop() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_requests_emergency_stop();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_requests_emergency_stop();
  void set_allocated_requests_emergency_stop(::PROTOBUF_NAMESPACE_ID::BoolValue* requests_emergency_stop);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_requests_emergency_stop() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_requests_emergency_stop();
  public:
  void unsafe_arena_set_allocated_requests_emergency_stop(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_emergency_stop);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_requests_emergency_stop();

  // optional .YellowCard yellow_card = 20;
  bool has_yellow_card() const;
  private:
  bool _internal_has_yellow_card() const;
  public:
  void clear_yellow_card();
  const ::YellowCard& yellow_card() const;
  PROTOBUF_NODISCARD ::YellowCard* release_yellow_card();
  ::YellowCard* mutable_yellow_card();
  void set_allocated_yellow_card(::YellowCard* yellow_card);
  private:
  const ::YellowCard& _internal_yellow_card() const;
  ::YellowCard* _internal_mutable_yellow_card();
  public:
  void unsafe_arena_set_allocated_yellow_card(
      ::YellowCard* yellow_card);
  ::YellowCard* unsafe_arena_release_yellow_card();

  // optional .google.protobuf.Int32Value challenge_flags_left = 21;
  bool has_challenge_flags_left() const;
  private:
  bool _internal_has_challenge_flags_left() const;
  public:
  void clear_challenge_flags_left();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& challenge_flags_left() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_challenge_flags_left();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_challenge_flags_left();
  void set_allocated_challenge_flags_left(::PROTOBUF_NAMESPACE_ID::Int32Value* challenge_flags_left);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_challenge_flags_left() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_challenge_flags_left();
  public:
  void unsafe_arena_set_allocated_challenge_flags_left(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* challenge_flags_left);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_challenge_flags_left();

  // optional .google.protobuf.Int32Value bot_substitutions_left = 22;
  bool has_bot_substitutions_left() const;
  private:
  bool _internal_has_bot_substitutions_left() const;
  public:
  void clear_bot_substitutions_left();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& bot_substitutions_left() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_bot_substitutions_left();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_bot_substitutions_left();
  void set_allocated_bot_substitutions_left(::PROTOBUF_NAMESPACE_ID::Int32Value* bot_substitutions_left);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_bot_substitutions_left() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_bot_substitutions_left();
  public:
  void unsafe_arena_set_allocated_bot_substitutions_left(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* bot_substitutions_left);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_bot_substitutions_left();

  // optional .Team for_team = 1;
  bool has_for_team() const;
  private:
  bool _internal_has_for_team() const;
  public:
  void clear_for_team();
  ::Team for_team() const;
  void set_for_team(::Team value);
  private:
  ::Team _internal_for_team() const;
  void _internal_set_for_team(::Team value);
  public:

  // optional .HullColor hull_color = 23;
  bool has_hull_color() const;
  private:
  bool _internal_has_hull_color() const;
  public:
  void clear_hull_color();
  ::HullColor hull_color() const;
  void set_hull_color(::HullColor value);
  private:
  ::HullColor _internal_hull_color() const;
  void _internal_set_hull_color(::HullColor value);
  public:

  // @@protoc_insertion_point(class_scope:Change.UpdateTeamState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::StringValue* team_name_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* goals_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* goalkeeper_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* timeouts_left_;
    ::PROTOBUF_NAMESPACE_ID::StringValue* timeout_time_left_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* on_positive_half_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* ball_placement_failures_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* can_place_ball_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_bot_substitution_;
    ::RedCard* red_card_;
    ::Foul* foul_;
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_yellow_card_;
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_red_card_;
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_foul_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_timeout_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_challenge_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_emergency_stop_;
    ::YellowCard* yellow_card_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* challenge_flags_left_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* bot_substitutions_left_;
    int for_team_;
    int hull_color_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_SwitchColors final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Change.SwitchColors) */ {
 public:
  inline Change_SwitchColors() : Change_SwitchColors(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Change_SwitchColors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_SwitchColors(const Change_SwitchColors& from);
  Change_SwitchColors(Change_SwitchColors&& from) noexcept
    : Change_SwitchColors() {
    *this = ::std::move(from);
  }

  inline Change_SwitchColors& operator=(const Change_SwitchColors& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_SwitchColors& operator=(Change_SwitchColors&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_SwitchColors& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_SwitchColors* internal_default_instance() {
    return reinterpret_cast<const Change_SwitchColors*>(
               &_Change_SwitchColors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Change_SwitchColors& a, Change_SwitchColors& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_SwitchColors* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_SwitchColors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_SwitchColors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_SwitchColors>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Change_SwitchColors& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Change_SwitchColors& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.SwitchColors";
  }
  protected:
  explicit Change_SwitchColors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Change.SwitchColors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_Revert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.Revert) */ {
 public:
  inline Change_Revert() : Change_Revert(nullptr) {}
  ~Change_Revert() override;
  explicit PROTOBUF_CONSTEXPR Change_Revert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_Revert(const Change_Revert& from);
  Change_Revert(Change_Revert&& from) noexcept
    : Change_Revert() {
    *this = ::std::move(from);
  }

  inline Change_Revert& operator=(const Change_Revert& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_Revert& operator=(Change_Revert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_Revert& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_Revert* internal_default_instance() {
    return reinterpret_cast<const Change_Revert*>(
               &_Change_Revert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Change_Revert& a, Change_Revert& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_Revert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_Revert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_Revert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_Revert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_Revert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_Revert& from) {
    Change_Revert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_Revert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.Revert";
  }
  protected:
  explicit Change_Revert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeIdFieldNumber = 1,
  };
  // optional int32 change_id = 1;
  bool has_change_id() const;
  private:
  bool _internal_has_change_id() const;
  public:
  void clear_change_id();
  int32_t change_id() const;
  void set_change_id(int32_t value);
  private:
  int32_t _internal_change_id() const;
  void _internal_set_change_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Change.Revert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t change_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_NewGameState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.NewGameState) */ {
 public:
  inline Change_NewGameState() : Change_NewGameState(nullptr) {}
  ~Change_NewGameState() override;
  explicit PROTOBUF_CONSTEXPR Change_NewGameState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_NewGameState(const Change_NewGameState& from);
  Change_NewGameState(Change_NewGameState&& from) noexcept
    : Change_NewGameState() {
    *this = ::std::move(from);
  }

  inline Change_NewGameState& operator=(const Change_NewGameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_NewGameState& operator=(Change_NewGameState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_NewGameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_NewGameState* internal_default_instance() {
    return reinterpret_cast<const Change_NewGameState*>(
               &_Change_NewGameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Change_NewGameState& a, Change_NewGameState& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_NewGameState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_NewGameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_NewGameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_NewGameState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_NewGameState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_NewGameState& from) {
    Change_NewGameState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_NewGameState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.NewGameState";
  }
  protected:
  explicit Change_NewGameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameStateFieldNumber = 1,
  };
  // optional .GameState game_state = 1;
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  const ::GameState& game_state() const;
  PROTOBUF_NODISCARD ::GameState* release_game_state();
  ::GameState* mutable_game_state();
  void set_allocated_game_state(::GameState* game_state);
  private:
  const ::GameState& _internal_game_state() const;
  ::GameState* _internal_mutable_game_state();
  public:
  void unsafe_arena_set_allocated_game_state(
      ::GameState* game_state);
  ::GameState* unsafe_arena_release_game_state();

  // @@protoc_insertion_point(class_scope:Change.NewGameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::GameState* game_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change_SetStatusMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change.SetStatusMessage) */ {
 public:
  inline Change_SetStatusMessage() : Change_SetStatusMessage(nullptr) {}
  ~Change_SetStatusMessage() override;
  explicit PROTOBUF_CONSTEXPR Change_SetStatusMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change_SetStatusMessage(const Change_SetStatusMessage& from);
  Change_SetStatusMessage(Change_SetStatusMessage&& from) noexcept
    : Change_SetStatusMessage() {
    *this = ::std::move(from);
  }

  inline Change_SetStatusMessage& operator=(const Change_SetStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change_SetStatusMessage& operator=(Change_SetStatusMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change_SetStatusMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change_SetStatusMessage* internal_default_instance() {
    return reinterpret_cast<const Change_SetStatusMessage*>(
               &_Change_SetStatusMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Change_SetStatusMessage& a, Change_SetStatusMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Change_SetStatusMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change_SetStatusMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change_SetStatusMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change_SetStatusMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change_SetStatusMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change_SetStatusMessage& from) {
    Change_SetStatusMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change_SetStatusMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change.SetStatusMessage";
  }
  protected:
  explicit Change_SetStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusMessageFieldNumber = 1,
  };
  // optional string status_message = 1;
  bool has_status_message() const;
  private:
  bool _internal_has_status_message() const;
  public:
  void clear_status_message();
  const std::string& status_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_message();
  PROTOBUF_NODISCARD std::string* release_status_message();
  void set_allocated_status_message(std::string* status_message);
  private:
  const std::string& _internal_status_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_message(const std::string& value);
  std::string* _internal_mutable_status_message();
  public:

  // @@protoc_insertion_point(class_scope:Change.SetStatusMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_message_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// -------------------------------------------------------------------

class Change final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Change) */ {
 public:
  inline Change() : Change(nullptr) {}
  ~Change() override;
  explicit PROTOBUF_CONSTEXPR Change(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change(const Change& from);
  Change(Change&& from) noexcept
    : Change() {
    *this = ::std::move(from);
  }

  inline Change& operator=(const Change& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change& operator=(Change&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change& default_instance() {
    return *internal_default_instance();
  }
  enum ChangeCase {
    kNewCommandChange = 2,
    kChangeStageChange = 3,
    kSetBallPlacementPosChange = 4,
    kAddYellowCardChange = 5,
    kAddRedCardChange = 6,
    kYellowCardOverChange = 7,
    kAddGameEventChange = 8,
    kAddPassiveGameEventChange = 19,
    kAddProposalChange = 9,
    kUpdateConfigChange = 12,
    kUpdateTeamStateChange = 13,
    kSwitchColorsChange = 14,
    kRevertChange = 15,
    kNewGameStateChange = 17,
    kAcceptProposalGroupChange = 18,
    kSetStatusMessageChange = 20,
    CHANGE_NOT_SET = 0,
  };

  static inline const Change* internal_default_instance() {
    return reinterpret_cast<const Change*>(
               &_Change_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Change& a, Change& b) {
    a.Swap(&b);
  }
  inline void Swap(Change* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change& from) {
    Change::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Change";
  }
  protected:
  explicit Change(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Change_NewCommand NewCommand;
  typedef Change_ChangeStage ChangeStage;
  typedef Change_SetBallPlacementPos SetBallPlacementPos;
  typedef Change_AddYellowCard AddYellowCard;
  typedef Change_AddRedCard AddRedCard;
  typedef Change_YellowCardOver YellowCardOver;
  typedef Change_AddGameEvent AddGameEvent;
  typedef Change_AddPassiveGameEvent AddPassiveGameEvent;
  typedef Change_AddProposal AddProposal;
  typedef Change_AcceptProposalGroup AcceptProposalGroup;
  typedef Change_UpdateConfig UpdateConfig;
  typedef Change_UpdateTeamState UpdateTeamState;
  typedef Change_SwitchColors SwitchColors;
  typedef Change_Revert Revert;
  typedef Change_NewGameState NewGameState;
  typedef Change_SetStatusMessage SetStatusMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
    kRevertibleFieldNumber = 16,
    kNewCommandChangeFieldNumber = 2,
    kChangeStageChangeFieldNumber = 3,
    kSetBallPlacementPosChangeFieldNumber = 4,
    kAddYellowCardChangeFieldNumber = 5,
    kAddRedCardChangeFieldNumber = 6,
    kYellowCardOverChangeFieldNumber = 7,
    kAddGameEventChangeFieldNumber = 8,
    kAddPassiveGameEventChangeFieldNumber = 19,
    kAddProposalChangeFieldNumber = 9,
    kUpdateConfigChangeFieldNumber = 12,
    kUpdateTeamStateChangeFieldNumber = 13,
    kSwitchColorsChangeFieldNumber = 14,
    kRevertChangeFieldNumber = 15,
    kNewGameStateChangeFieldNumber = 17,
    kAcceptProposalGroupChangeFieldNumber = 18,
    kSetStatusMessageChangeFieldNumber = 20,
  };
  // optional string origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const std::string& origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin();
  PROTOBUF_NODISCARD std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // optional bool revertible = 16;
  bool has_revertible() const;
  private:
  bool _internal_has_revertible() const;
  public:
  void clear_revertible();
  bool revertible() const;
  void set_revertible(bool value);
  private:
  bool _internal_revertible() const;
  void _internal_set_revertible(bool value);
  public:

  // .Change.NewCommand new_command_change = 2;
  bool has_new_command_change() const;
  private:
  bool _internal_has_new_command_change() const;
  public:
  void clear_new_command_change();
  const ::Change_NewCommand& new_command_change() const;
  PROTOBUF_NODISCARD ::Change_NewCommand* release_new_command_change();
  ::Change_NewCommand* mutable_new_command_change();
  void set_allocated_new_command_change(::Change_NewCommand* new_command_change);
  private:
  const ::Change_NewCommand& _internal_new_command_change() const;
  ::Change_NewCommand* _internal_mutable_new_command_change();
  public:
  void unsafe_arena_set_allocated_new_command_change(
      ::Change_NewCommand* new_command_change);
  ::Change_NewCommand* unsafe_arena_release_new_command_change();

  // .Change.ChangeStage change_stage_change = 3;
  bool has_change_stage_change() const;
  private:
  bool _internal_has_change_stage_change() const;
  public:
  void clear_change_stage_change();
  const ::Change_ChangeStage& change_stage_change() const;
  PROTOBUF_NODISCARD ::Change_ChangeStage* release_change_stage_change();
  ::Change_ChangeStage* mutable_change_stage_change();
  void set_allocated_change_stage_change(::Change_ChangeStage* change_stage_change);
  private:
  const ::Change_ChangeStage& _internal_change_stage_change() const;
  ::Change_ChangeStage* _internal_mutable_change_stage_change();
  public:
  void unsafe_arena_set_allocated_change_stage_change(
      ::Change_ChangeStage* change_stage_change);
  ::Change_ChangeStage* unsafe_arena_release_change_stage_change();

  // .Change.SetBallPlacementPos set_ball_placement_pos_change = 4;
  bool has_set_ball_placement_pos_change() const;
  private:
  bool _internal_has_set_ball_placement_pos_change() const;
  public:
  void clear_set_ball_placement_pos_change();
  const ::Change_SetBallPlacementPos& set_ball_placement_pos_change() const;
  PROTOBUF_NODISCARD ::Change_SetBallPlacementPos* release_set_ball_placement_pos_change();
  ::Change_SetBallPlacementPos* mutable_set_ball_placement_pos_change();
  void set_allocated_set_ball_placement_pos_change(::Change_SetBallPlacementPos* set_ball_placement_pos_change);
  private:
  const ::Change_SetBallPlacementPos& _internal_set_ball_placement_pos_change() const;
  ::Change_SetBallPlacementPos* _internal_mutable_set_ball_placement_pos_change();
  public:
  void unsafe_arena_set_allocated_set_ball_placement_pos_change(
      ::Change_SetBallPlacementPos* set_ball_placement_pos_change);
  ::Change_SetBallPlacementPos* unsafe_arena_release_set_ball_placement_pos_change();

  // .Change.AddYellowCard add_yellow_card_change = 5;
  bool has_add_yellow_card_change() const;
  private:
  bool _internal_has_add_yellow_card_change() const;
  public:
  void clear_add_yellow_card_change();
  const ::Change_AddYellowCard& add_yellow_card_change() const;
  PROTOBUF_NODISCARD ::Change_AddYellowCard* release_add_yellow_card_change();
  ::Change_AddYellowCard* mutable_add_yellow_card_change();
  void set_allocated_add_yellow_card_change(::Change_AddYellowCard* add_yellow_card_change);
  private:
  const ::Change_AddYellowCard& _internal_add_yellow_card_change() const;
  ::Change_AddYellowCard* _internal_mutable_add_yellow_card_change();
  public:
  void unsafe_arena_set_allocated_add_yellow_card_change(
      ::Change_AddYellowCard* add_yellow_card_change);
  ::Change_AddYellowCard* unsafe_arena_release_add_yellow_card_change();

  // .Change.AddRedCard add_red_card_change = 6;
  bool has_add_red_card_change() const;
  private:
  bool _internal_has_add_red_card_change() const;
  public:
  void clear_add_red_card_change();
  const ::Change_AddRedCard& add_red_card_change() const;
  PROTOBUF_NODISCARD ::Change_AddRedCard* release_add_red_card_change();
  ::Change_AddRedCard* mutable_add_red_card_change();
  void set_allocated_add_red_card_change(::Change_AddRedCard* add_red_card_change);
  private:
  const ::Change_AddRedCard& _internal_add_red_card_change() const;
  ::Change_AddRedCard* _internal_mutable_add_red_card_change();
  public:
  void unsafe_arena_set_allocated_add_red_card_change(
      ::Change_AddRedCard* add_red_card_change);
  ::Change_AddRedCard* unsafe_arena_release_add_red_card_change();

  // .Change.YellowCardOver yellow_card_over_change = 7;
  bool has_yellow_card_over_change() const;
  private:
  bool _internal_has_yellow_card_over_change() const;
  public:
  void clear_yellow_card_over_change();
  const ::Change_YellowCardOver& yellow_card_over_change() const;
  PROTOBUF_NODISCARD ::Change_YellowCardOver* release_yellow_card_over_change();
  ::Change_YellowCardOver* mutable_yellow_card_over_change();
  void set_allocated_yellow_card_over_change(::Change_YellowCardOver* yellow_card_over_change);
  private:
  const ::Change_YellowCardOver& _internal_yellow_card_over_change() const;
  ::Change_YellowCardOver* _internal_mutable_yellow_card_over_change();
  public:
  void unsafe_arena_set_allocated_yellow_card_over_change(
      ::Change_YellowCardOver* yellow_card_over_change);
  ::Change_YellowCardOver* unsafe_arena_release_yellow_card_over_change();

  // .Change.AddGameEvent add_game_event_change = 8;
  bool has_add_game_event_change() const;
  private:
  bool _internal_has_add_game_event_change() const;
  public:
  void clear_add_game_event_change();
  const ::Change_AddGameEvent& add_game_event_change() const;
  PROTOBUF_NODISCARD ::Change_AddGameEvent* release_add_game_event_change();
  ::Change_AddGameEvent* mutable_add_game_event_change();
  void set_allocated_add_game_event_change(::Change_AddGameEvent* add_game_event_change);
  private:
  const ::Change_AddGameEvent& _internal_add_game_event_change() const;
  ::Change_AddGameEvent* _internal_mutable_add_game_event_change();
  public:
  void unsafe_arena_set_allocated_add_game_event_change(
      ::Change_AddGameEvent* add_game_event_change);
  ::Change_AddGameEvent* unsafe_arena_release_add_game_event_change();

  // .Change.AddPassiveGameEvent add_passive_game_event_change = 19;
  bool has_add_passive_game_event_change() const;
  private:
  bool _internal_has_add_passive_game_event_change() const;
  public:
  void clear_add_passive_game_event_change();
  const ::Change_AddPassiveGameEvent& add_passive_game_event_change() const;
  PROTOBUF_NODISCARD ::Change_AddPassiveGameEvent* release_add_passive_game_event_change();
  ::Change_AddPassiveGameEvent* mutable_add_passive_game_event_change();
  void set_allocated_add_passive_game_event_change(::Change_AddPassiveGameEvent* add_passive_game_event_change);
  private:
  const ::Change_AddPassiveGameEvent& _internal_add_passive_game_event_change() const;
  ::Change_AddPassiveGameEvent* _internal_mutable_add_passive_game_event_change();
  public:
  void unsafe_arena_set_allocated_add_passive_game_event_change(
      ::Change_AddPassiveGameEvent* add_passive_game_event_change);
  ::Change_AddPassiveGameEvent* unsafe_arena_release_add_passive_game_event_change();

  // .Change.AddProposal add_proposal_change = 9;
  bool has_add_proposal_change() const;
  private:
  bool _internal_has_add_proposal_change() const;
  public:
  void clear_add_proposal_change();
  const ::Change_AddProposal& add_proposal_change() const;
  PROTOBUF_NODISCARD ::Change_AddProposal* release_add_proposal_change();
  ::Change_AddProposal* mutable_add_proposal_change();
  void set_allocated_add_proposal_change(::Change_AddProposal* add_proposal_change);
  private:
  const ::Change_AddProposal& _internal_add_proposal_change() const;
  ::Change_AddProposal* _internal_mutable_add_proposal_change();
  public:
  void unsafe_arena_set_allocated_add_proposal_change(
      ::Change_AddProposal* add_proposal_change);
  ::Change_AddProposal* unsafe_arena_release_add_proposal_change();

  // .Change.UpdateConfig update_config_change = 12;
  bool has_update_config_change() const;
  private:
  bool _internal_has_update_config_change() const;
  public:
  void clear_update_config_change();
  const ::Change_UpdateConfig& update_config_change() const;
  PROTOBUF_NODISCARD ::Change_UpdateConfig* release_update_config_change();
  ::Change_UpdateConfig* mutable_update_config_change();
  void set_allocated_update_config_change(::Change_UpdateConfig* update_config_change);
  private:
  const ::Change_UpdateConfig& _internal_update_config_change() const;
  ::Change_UpdateConfig* _internal_mutable_update_config_change();
  public:
  void unsafe_arena_set_allocated_update_config_change(
      ::Change_UpdateConfig* update_config_change);
  ::Change_UpdateConfig* unsafe_arena_release_update_config_change();

  // .Change.UpdateTeamState update_team_state_change = 13;
  bool has_update_team_state_change() const;
  private:
  bool _internal_has_update_team_state_change() const;
  public:
  void clear_update_team_state_change();
  const ::Change_UpdateTeamState& update_team_state_change() const;
  PROTOBUF_NODISCARD ::Change_UpdateTeamState* release_update_team_state_change();
  ::Change_UpdateTeamState* mutable_update_team_state_change();
  void set_allocated_update_team_state_change(::Change_UpdateTeamState* update_team_state_change);
  private:
  const ::Change_UpdateTeamState& _internal_update_team_state_change() const;
  ::Change_UpdateTeamState* _internal_mutable_update_team_state_change();
  public:
  void unsafe_arena_set_allocated_update_team_state_change(
      ::Change_UpdateTeamState* update_team_state_change);
  ::Change_UpdateTeamState* unsafe_arena_release_update_team_state_change();

  // .Change.SwitchColors switch_colors_change = 14;
  bool has_switch_colors_change() const;
  private:
  bool _internal_has_switch_colors_change() const;
  public:
  void clear_switch_colors_change();
  const ::Change_SwitchColors& switch_colors_change() const;
  PROTOBUF_NODISCARD ::Change_SwitchColors* release_switch_colors_change();
  ::Change_SwitchColors* mutable_switch_colors_change();
  void set_allocated_switch_colors_change(::Change_SwitchColors* switch_colors_change);
  private:
  const ::Change_SwitchColors& _internal_switch_colors_change() const;
  ::Change_SwitchColors* _internal_mutable_switch_colors_change();
  public:
  void unsafe_arena_set_allocated_switch_colors_change(
      ::Change_SwitchColors* switch_colors_change);
  ::Change_SwitchColors* unsafe_arena_release_switch_colors_change();

  // .Change.Revert revert_change = 15;
  bool has_revert_change() const;
  private:
  bool _internal_has_revert_change() const;
  public:
  void clear_revert_change();
  const ::Change_Revert& revert_change() const;
  PROTOBUF_NODISCARD ::Change_Revert* release_revert_change();
  ::Change_Revert* mutable_revert_change();
  void set_allocated_revert_change(::Change_Revert* revert_change);
  private:
  const ::Change_Revert& _internal_revert_change() const;
  ::Change_Revert* _internal_mutable_revert_change();
  public:
  void unsafe_arena_set_allocated_revert_change(
      ::Change_Revert* revert_change);
  ::Change_Revert* unsafe_arena_release_revert_change();

  // .Change.NewGameState new_game_state_change = 17;
  bool has_new_game_state_change() const;
  private:
  bool _internal_has_new_game_state_change() const;
  public:
  void clear_new_game_state_change();
  const ::Change_NewGameState& new_game_state_change() const;
  PROTOBUF_NODISCARD ::Change_NewGameState* release_new_game_state_change();
  ::Change_NewGameState* mutable_new_game_state_change();
  void set_allocated_new_game_state_change(::Change_NewGameState* new_game_state_change);
  private:
  const ::Change_NewGameState& _internal_new_game_state_change() const;
  ::Change_NewGameState* _internal_mutable_new_game_state_change();
  public:
  void unsafe_arena_set_allocated_new_game_state_change(
      ::Change_NewGameState* new_game_state_change);
  ::Change_NewGameState* unsafe_arena_release_new_game_state_change();

  // .Change.AcceptProposalGroup accept_proposal_group_change = 18;
  bool has_accept_proposal_group_change() const;
  private:
  bool _internal_has_accept_proposal_group_change() const;
  public:
  void clear_accept_proposal_group_change();
  const ::Change_AcceptProposalGroup& accept_proposal_group_change() const;
  PROTOBUF_NODISCARD ::Change_AcceptProposalGroup* release_accept_proposal_group_change();
  ::Change_AcceptProposalGroup* mutable_accept_proposal_group_change();
  void set_allocated_accept_proposal_group_change(::Change_AcceptProposalGroup* accept_proposal_group_change);
  private:
  const ::Change_AcceptProposalGroup& _internal_accept_proposal_group_change() const;
  ::Change_AcceptProposalGroup* _internal_mutable_accept_proposal_group_change();
  public:
  void unsafe_arena_set_allocated_accept_proposal_group_change(
      ::Change_AcceptProposalGroup* accept_proposal_group_change);
  ::Change_AcceptProposalGroup* unsafe_arena_release_accept_proposal_group_change();

  // .Change.SetStatusMessage set_status_message_change = 20;
  bool has_set_status_message_change() const;
  private:
  bool _internal_has_set_status_message_change() const;
  public:
  void clear_set_status_message_change();
  const ::Change_SetStatusMessage& set_status_message_change() const;
  PROTOBUF_NODISCARD ::Change_SetStatusMessage* release_set_status_message_change();
  ::Change_SetStatusMessage* mutable_set_status_message_change();
  void set_allocated_set_status_message_change(::Change_SetStatusMessage* set_status_message_change);
  private:
  const ::Change_SetStatusMessage& _internal_set_status_message_change() const;
  ::Change_SetStatusMessage* _internal_mutable_set_status_message_change();
  public:
  void unsafe_arena_set_allocated_set_status_message_change(
      ::Change_SetStatusMessage* set_status_message_change);
  ::Change_SetStatusMessage* unsafe_arena_release_set_status_message_change();

  void clear_change();
  ChangeCase change_case() const;
  // @@protoc_insertion_point(class_scope:Change)
 private:
  class _Internal;
  void set_has_new_command_change();
  void set_has_change_stage_change();
  void set_has_set_ball_placement_pos_change();
  void set_has_add_yellow_card_change();
  void set_has_add_red_card_change();
  void set_has_yellow_card_over_change();
  void set_has_add_game_event_change();
  void set_has_add_passive_game_event_change();
  void set_has_add_proposal_change();
  void set_has_update_config_change();
  void set_has_update_team_state_change();
  void set_has_switch_colors_change();
  void set_has_revert_change();
  void set_has_new_game_state_change();
  void set_has_accept_proposal_group_change();
  void set_has_set_status_message_change();

  inline bool has_change() const;
  inline void clear_has_change();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
    bool revertible_;
    union ChangeUnion {
      constexpr ChangeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Change_NewCommand* new_command_change_;
      ::Change_ChangeStage* change_stage_change_;
      ::Change_SetBallPlacementPos* set_ball_placement_pos_change_;
      ::Change_AddYellowCard* add_yellow_card_change_;
      ::Change_AddRedCard* add_red_card_change_;
      ::Change_YellowCardOver* yellow_card_over_change_;
      ::Change_AddGameEvent* add_game_event_change_;
      ::Change_AddPassiveGameEvent* add_passive_game_event_change_;
      ::Change_AddProposal* add_proposal_change_;
      ::Change_UpdateConfig* update_config_change_;
      ::Change_UpdateTeamState* update_team_state_change_;
      ::Change_SwitchColors* switch_colors_change_;
      ::Change_Revert* revert_change_;
      ::Change_NewGameState* new_game_state_change_;
      ::Change_AcceptProposalGroup* accept_proposal_group_change_;
      ::Change_SetStatusMessage* set_status_message_change_;
    } change_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_statemachine_2fssl_5fgc_5fchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StateChange

// optional int32 id = 1;
inline bool StateChange::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StateChange::has_id() const {
  return _internal_has_id();
}
inline void StateChange::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t StateChange::_internal_id() const {
  return _impl_.id_;
}
inline int32_t StateChange::id() const {
  // @@protoc_insertion_point(field_get:StateChange.id)
  return _internal_id();
}
inline void StateChange::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.id_ = value;
}
inline void StateChange::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:StateChange.id)
}

// optional .State state_pre = 2;
inline bool StateChange::_internal_has_state_pre() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_pre_ != nullptr);
  return value;
}
inline bool StateChange::has_state_pre() const {
  return _internal_has_state_pre();
}
inline const ::State& StateChange::_internal_state_pre() const {
  const ::State* p = _impl_.state_pre_;
  return p != nullptr ? *p : reinterpret_cast<const ::State&>(
      ::_State_default_instance_);
}
inline const ::State& StateChange::state_pre() const {
  // @@protoc_insertion_point(field_get:StateChange.state_pre)
  return _internal_state_pre();
}
inline void StateChange::unsafe_arena_set_allocated_state_pre(
    ::State* state_pre) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_pre_);
  }
  _impl_.state_pre_ = state_pre;
  if (state_pre) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StateChange.state_pre)
}
inline ::State* StateChange::release_state_pre() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::State* temp = _impl_.state_pre_;
  _impl_.state_pre_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::State* StateChange::unsafe_arena_release_state_pre() {
  // @@protoc_insertion_point(field_release:StateChange.state_pre)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::State* temp = _impl_.state_pre_;
  _impl_.state_pre_ = nullptr;
  return temp;
}
inline ::State* StateChange::_internal_mutable_state_pre() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_pre_ == nullptr) {
    auto* p = CreateMaybeMessage<::State>(GetArenaForAllocation());
    _impl_.state_pre_ = p;
  }
  return _impl_.state_pre_;
}
inline ::State* StateChange::mutable_state_pre() {
  ::State* _msg = _internal_mutable_state_pre();
  // @@protoc_insertion_point(field_mutable:StateChange.state_pre)
  return _msg;
}
inline void StateChange::set_allocated_state_pre(::State* state_pre) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_pre_);
  }
  if (state_pre) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_pre));
    if (message_arena != submessage_arena) {
      state_pre = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state_pre, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_pre_ = state_pre;
  // @@protoc_insertion_point(field_set_allocated:StateChange.state_pre)
}

// optional .State state = 3;
inline bool StateChange::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline bool StateChange::has_state() const {
  return _internal_has_state();
}
inline const ::State& StateChange::_internal_state() const {
  const ::State* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::State&>(
      ::_State_default_instance_);
}
inline const ::State& StateChange::state() const {
  // @@protoc_insertion_point(field_get:StateChange.state)
  return _internal_state();
}
inline void StateChange::unsafe_arena_set_allocated_state(
    ::State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StateChange.state)
}
inline ::State* StateChange::release_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::State* StateChange::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:StateChange.state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::State* StateChange::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::State>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::State* StateChange::mutable_state() {
  ::State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:StateChange.state)
  return _msg;
}
inline void StateChange::set_allocated_state(::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:StateChange.state)
}

// optional .Change change = 4;
inline bool StateChange::_internal_has_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.change_ != nullptr);
  return value;
}
inline bool StateChange::has_change() const {
  return _internal_has_change();
}
inline void StateChange::clear_change() {
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Change& StateChange::_internal_change() const {
  const ::Change* p = _impl_.change_;
  return p != nullptr ? *p : reinterpret_cast<const ::Change&>(
      ::_Change_default_instance_);
}
inline const ::Change& StateChange::change() const {
  // @@protoc_insertion_point(field_get:StateChange.change)
  return _internal_change();
}
inline void StateChange::unsafe_arena_set_allocated_change(
    ::Change* change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.change_);
  }
  _impl_.change_ = change;
  if (change) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StateChange.change)
}
inline ::Change* StateChange::release_change() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Change* temp = _impl_.change_;
  _impl_.change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Change* StateChange::unsafe_arena_release_change() {
  // @@protoc_insertion_point(field_release:StateChange.change)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Change* temp = _impl_.change_;
  _impl_.change_ = nullptr;
  return temp;
}
inline ::Change* StateChange::_internal_mutable_change() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.change_ == nullptr) {
    auto* p = CreateMaybeMessage<::Change>(GetArenaForAllocation());
    _impl_.change_ = p;
  }
  return _impl_.change_;
}
inline ::Change* StateChange::mutable_change() {
  ::Change* _msg = _internal_mutable_change();
  // @@protoc_insertion_point(field_mutable:StateChange.change)
  return _msg;
}
inline void StateChange::set_allocated_change(::Change* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.change_;
  }
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(change);
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.change_ = change;
  // @@protoc_insertion_point(field_set_allocated:StateChange.change)
}

// optional .google.protobuf.Timestamp timestamp = 5;
inline bool StateChange::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline bool StateChange::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StateChange::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StateChange::timestamp() const {
  // @@protoc_insertion_point(field_get:StateChange.timestamp)
  return _internal_timestamp();
}
inline void StateChange::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StateChange.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StateChange::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StateChange::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:StateChange.timestamp)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StateChange::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StateChange::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:StateChange.timestamp)
  return _msg;
}
inline void StateChange::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:StateChange.timestamp)
}

// -------------------------------------------------------------------

// Change_NewCommand

// optional .Command command = 1;
inline bool Change_NewCommand::_internal_has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.command_ != nullptr);
  return value;
}
inline bool Change_NewCommand::has_command() const {
  return _internal_has_command();
}
inline const ::Command& Change_NewCommand::_internal_command() const {
  const ::Command* p = _impl_.command_;
  return p != nullptr ? *p : reinterpret_cast<const ::Command&>(
      ::_Command_default_instance_);
}
inline const ::Command& Change_NewCommand::command() const {
  // @@protoc_insertion_point(field_get:Change.NewCommand.command)
  return _internal_command();
}
inline void Change_NewCommand::unsafe_arena_set_allocated_command(
    ::Command* command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.command_);
  }
  _impl_.command_ = command;
  if (command) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.NewCommand.command)
}
inline ::Command* Change_NewCommand::release_command() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Command* temp = _impl_.command_;
  _impl_.command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Command* Change_NewCommand::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:Change.NewCommand.command)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Command* temp = _impl_.command_;
  _impl_.command_ = nullptr;
  return temp;
}
inline ::Command* Change_NewCommand::_internal_mutable_command() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.command_ == nullptr) {
    auto* p = CreateMaybeMessage<::Command>(GetArenaForAllocation());
    _impl_.command_ = p;
  }
  return _impl_.command_;
}
inline ::Command* Change_NewCommand::mutable_command() {
  ::Command* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:Change.NewCommand.command)
  return _msg;
}
inline void Change_NewCommand::set_allocated_command(::Command* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.command_);
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command));
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.command_ = command;
  // @@protoc_insertion_point(field_set_allocated:Change.NewCommand.command)
}

// -------------------------------------------------------------------

// Change_ChangeStage

// optional .Referee.Stage new_stage = 1;
inline bool Change_ChangeStage::_internal_has_new_stage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Change_ChangeStage::has_new_stage() const {
  return _internal_has_new_stage();
}
inline void Change_ChangeStage::clear_new_stage() {
  _impl_.new_stage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Referee_Stage Change_ChangeStage::_internal_new_stage() const {
  return static_cast< ::Referee_Stage >(_impl_.new_stage_);
}
inline ::Referee_Stage Change_ChangeStage::new_stage() const {
  // @@protoc_insertion_point(field_get:Change.ChangeStage.new_stage)
  return _internal_new_stage();
}
inline void Change_ChangeStage::_internal_set_new_stage(::Referee_Stage value) {
  assert(::Referee_Stage_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.new_stage_ = value;
}
inline void Change_ChangeStage::set_new_stage(::Referee_Stage value) {
  _internal_set_new_stage(value);
  // @@protoc_insertion_point(field_set:Change.ChangeStage.new_stage)
}

// -------------------------------------------------------------------

// Change_SetBallPlacementPos

// optional .Vector2 pos = 1;
inline bool Change_SetBallPlacementPos::_internal_has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline bool Change_SetBallPlacementPos::has_pos() const {
  return _internal_has_pos();
}
inline const ::Vector2& Change_SetBallPlacementPos::_internal_pos() const {
  const ::Vector2* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(
      ::_Vector2_default_instance_);
}
inline const ::Vector2& Change_SetBallPlacementPos::pos() const {
  // @@protoc_insertion_point(field_get:Change.SetBallPlacementPos.pos)
  return _internal_pos();
}
inline void Change_SetBallPlacementPos::unsafe_arena_set_allocated_pos(
    ::Vector2* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.SetBallPlacementPos.pos)
}
inline ::Vector2* Change_SetBallPlacementPos::release_pos() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector2* Change_SetBallPlacementPos::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Change.SetBallPlacementPos.pos)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::Vector2* Change_SetBallPlacementPos::_internal_mutable_pos() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::Vector2* Change_SetBallPlacementPos::mutable_pos() {
  ::Vector2* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:Change.SetBallPlacementPos.pos)
  return _msg;
}
inline void Change_SetBallPlacementPos::set_allocated_pos(::Vector2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Change.SetBallPlacementPos.pos)
}

// -------------------------------------------------------------------

// Change_AddYellowCard

// optional .Team for_team = 1;
inline bool Change_AddYellowCard::_internal_has_for_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Change_AddYellowCard::has_for_team() const {
  return _internal_has_for_team();
}
inline void Change_AddYellowCard::clear_for_team() {
  _impl_.for_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team Change_AddYellowCard::_internal_for_team() const {
  return static_cast< ::Team >(_impl_.for_team_);
}
inline ::Team Change_AddYellowCard::for_team() const {
  // @@protoc_insertion_point(field_get:Change.AddYellowCard.for_team)
  return _internal_for_team();
}
inline void Change_AddYellowCard::_internal_set_for_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.for_team_ = value;
}
inline void Change_AddYellowCard::set_for_team(::Team value) {
  _internal_set_for_team(value);
  // @@protoc_insertion_point(field_set:Change.AddYellowCard.for_team)
}

// optional .GameEvent caused_by_game_event = 2;
inline bool Change_AddYellowCard::_internal_has_caused_by_game_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.caused_by_game_event_ != nullptr);
  return value;
}
inline bool Change_AddYellowCard::has_caused_by_game_event() const {
  return _internal_has_caused_by_game_event();
}
inline const ::GameEvent& Change_AddYellowCard::_internal_caused_by_game_event() const {
  const ::GameEvent* p = _impl_.caused_by_game_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent&>(
      ::_GameEvent_default_instance_);
}
inline const ::GameEvent& Change_AddYellowCard::caused_by_game_event() const {
  // @@protoc_insertion_point(field_get:Change.AddYellowCard.caused_by_game_event)
  return _internal_caused_by_game_event();
}
inline void Change_AddYellowCard::unsafe_arena_set_allocated_caused_by_game_event(
    ::GameEvent* caused_by_game_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caused_by_game_event_);
  }
  _impl_.caused_by_game_event_ = caused_by_game_event;
  if (caused_by_game_event) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.AddYellowCard.caused_by_game_event)
}
inline ::GameEvent* Change_AddYellowCard::release_caused_by_game_event() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.caused_by_game_event_;
  _impl_.caused_by_game_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameEvent* Change_AddYellowCard::unsafe_arena_release_caused_by_game_event() {
  // @@protoc_insertion_point(field_release:Change.AddYellowCard.caused_by_game_event)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.caused_by_game_event_;
  _impl_.caused_by_game_event_ = nullptr;
  return temp;
}
inline ::GameEvent* Change_AddYellowCard::_internal_mutable_caused_by_game_event() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.caused_by_game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent>(GetArenaForAllocation());
    _impl_.caused_by_game_event_ = p;
  }
  return _impl_.caused_by_game_event_;
}
inline ::GameEvent* Change_AddYellowCard::mutable_caused_by_game_event() {
  ::GameEvent* _msg = _internal_mutable_caused_by_game_event();
  // @@protoc_insertion_point(field_mutable:Change.AddYellowCard.caused_by_game_event)
  return _msg;
}
inline void Change_AddYellowCard::set_allocated_caused_by_game_event(::GameEvent* caused_by_game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caused_by_game_event_);
  }
  if (caused_by_game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caused_by_game_event));
    if (message_arena != submessage_arena) {
      caused_by_game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caused_by_game_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.caused_by_game_event_ = caused_by_game_event;
  // @@protoc_insertion_point(field_set_allocated:Change.AddYellowCard.caused_by_game_event)
}

// -------------------------------------------------------------------

// Change_AddRedCard

// optional .Team for_team = 1;
inline bool Change_AddRedCard::_internal_has_for_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Change_AddRedCard::has_for_team() const {
  return _internal_has_for_team();
}
inline void Change_AddRedCard::clear_for_team() {
  _impl_.for_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team Change_AddRedCard::_internal_for_team() const {
  return static_cast< ::Team >(_impl_.for_team_);
}
inline ::Team Change_AddRedCard::for_team() const {
  // @@protoc_insertion_point(field_get:Change.AddRedCard.for_team)
  return _internal_for_team();
}
inline void Change_AddRedCard::_internal_set_for_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.for_team_ = value;
}
inline void Change_AddRedCard::set_for_team(::Team value) {
  _internal_set_for_team(value);
  // @@protoc_insertion_point(field_set:Change.AddRedCard.for_team)
}

// optional .GameEvent caused_by_game_event = 2;
inline bool Change_AddRedCard::_internal_has_caused_by_game_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.caused_by_game_event_ != nullptr);
  return value;
}
inline bool Change_AddRedCard::has_caused_by_game_event() const {
  return _internal_has_caused_by_game_event();
}
inline const ::GameEvent& Change_AddRedCard::_internal_caused_by_game_event() const {
  const ::GameEvent* p = _impl_.caused_by_game_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent&>(
      ::_GameEvent_default_instance_);
}
inline const ::GameEvent& Change_AddRedCard::caused_by_game_event() const {
  // @@protoc_insertion_point(field_get:Change.AddRedCard.caused_by_game_event)
  return _internal_caused_by_game_event();
}
inline void Change_AddRedCard::unsafe_arena_set_allocated_caused_by_game_event(
    ::GameEvent* caused_by_game_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caused_by_game_event_);
  }
  _impl_.caused_by_game_event_ = caused_by_game_event;
  if (caused_by_game_event) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.AddRedCard.caused_by_game_event)
}
inline ::GameEvent* Change_AddRedCard::release_caused_by_game_event() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.caused_by_game_event_;
  _impl_.caused_by_game_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameEvent* Change_AddRedCard::unsafe_arena_release_caused_by_game_event() {
  // @@protoc_insertion_point(field_release:Change.AddRedCard.caused_by_game_event)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.caused_by_game_event_;
  _impl_.caused_by_game_event_ = nullptr;
  return temp;
}
inline ::GameEvent* Change_AddRedCard::_internal_mutable_caused_by_game_event() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.caused_by_game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent>(GetArenaForAllocation());
    _impl_.caused_by_game_event_ = p;
  }
  return _impl_.caused_by_game_event_;
}
inline ::GameEvent* Change_AddRedCard::mutable_caused_by_game_event() {
  ::GameEvent* _msg = _internal_mutable_caused_by_game_event();
  // @@protoc_insertion_point(field_mutable:Change.AddRedCard.caused_by_game_event)
  return _msg;
}
inline void Change_AddRedCard::set_allocated_caused_by_game_event(::GameEvent* caused_by_game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caused_by_game_event_);
  }
  if (caused_by_game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caused_by_game_event));
    if (message_arena != submessage_arena) {
      caused_by_game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caused_by_game_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.caused_by_game_event_ = caused_by_game_event;
  // @@protoc_insertion_point(field_set_allocated:Change.AddRedCard.caused_by_game_event)
}

// -------------------------------------------------------------------

// Change_YellowCardOver

// optional .Team for_team = 1;
inline bool Change_YellowCardOver::_internal_has_for_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Change_YellowCardOver::has_for_team() const {
  return _internal_has_for_team();
}
inline void Change_YellowCardOver::clear_for_team() {
  _impl_.for_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Team Change_YellowCardOver::_internal_for_team() const {
  return static_cast< ::Team >(_impl_.for_team_);
}
inline ::Team Change_YellowCardOver::for_team() const {
  // @@protoc_insertion_point(field_get:Change.YellowCardOver.for_team)
  return _internal_for_team();
}
inline void Change_YellowCardOver::_internal_set_for_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.for_team_ = value;
}
inline void Change_YellowCardOver::set_for_team(::Team value) {
  _internal_set_for_team(value);
  // @@protoc_insertion_point(field_set:Change.YellowCardOver.for_team)
}

// -------------------------------------------------------------------

// Change_AddGameEvent

// optional .GameEvent game_event = 1;
inline bool Change_AddGameEvent::_internal_has_game_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.game_event_ != nullptr);
  return value;
}
inline bool Change_AddGameEvent::has_game_event() const {
  return _internal_has_game_event();
}
inline const ::GameEvent& Change_AddGameEvent::_internal_game_event() const {
  const ::GameEvent* p = _impl_.game_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent&>(
      ::_GameEvent_default_instance_);
}
inline const ::GameEvent& Change_AddGameEvent::game_event() const {
  // @@protoc_insertion_point(field_get:Change.AddGameEvent.game_event)
  return _internal_game_event();
}
inline void Change_AddGameEvent::unsafe_arena_set_allocated_game_event(
    ::GameEvent* game_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_event_);
  }
  _impl_.game_event_ = game_event;
  if (game_event) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.AddGameEvent.game_event)
}
inline ::GameEvent* Change_AddGameEvent::release_game_event() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.game_event_;
  _impl_.game_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameEvent* Change_AddGameEvent::unsafe_arena_release_game_event() {
  // @@protoc_insertion_point(field_release:Change.AddGameEvent.game_event)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.game_event_;
  _impl_.game_event_ = nullptr;
  return temp;
}
inline ::GameEvent* Change_AddGameEvent::_internal_mutable_game_event() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent>(GetArenaForAllocation());
    _impl_.game_event_ = p;
  }
  return _impl_.game_event_;
}
inline ::GameEvent* Change_AddGameEvent::mutable_game_event() {
  ::GameEvent* _msg = _internal_mutable_game_event();
  // @@protoc_insertion_point(field_mutable:Change.AddGameEvent.game_event)
  return _msg;
}
inline void Change_AddGameEvent::set_allocated_game_event(::GameEvent* game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_event_);
  }
  if (game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event));
    if (message_arena != submessage_arena) {
      game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.game_event_ = game_event;
  // @@protoc_insertion_point(field_set_allocated:Change.AddGameEvent.game_event)
}

// -------------------------------------------------------------------

// Change_AddPassiveGameEvent

// optional .GameEvent game_event = 1;
inline bool Change_AddPassiveGameEvent::_internal_has_game_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.game_event_ != nullptr);
  return value;
}
inline bool Change_AddPassiveGameEvent::has_game_event() const {
  return _internal_has_game_event();
}
inline const ::GameEvent& Change_AddPassiveGameEvent::_internal_game_event() const {
  const ::GameEvent* p = _impl_.game_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent&>(
      ::_GameEvent_default_instance_);
}
inline const ::GameEvent& Change_AddPassiveGameEvent::game_event() const {
  // @@protoc_insertion_point(field_get:Change.AddPassiveGameEvent.game_event)
  return _internal_game_event();
}
inline void Change_AddPassiveGameEvent::unsafe_arena_set_allocated_game_event(
    ::GameEvent* game_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_event_);
  }
  _impl_.game_event_ = game_event;
  if (game_event) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.AddPassiveGameEvent.game_event)
}
inline ::GameEvent* Change_AddPassiveGameEvent::release_game_event() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.game_event_;
  _impl_.game_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameEvent* Change_AddPassiveGameEvent::unsafe_arena_release_game_event() {
  // @@protoc_insertion_point(field_release:Change.AddPassiveGameEvent.game_event)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.game_event_;
  _impl_.game_event_ = nullptr;
  return temp;
}
inline ::GameEvent* Change_AddPassiveGameEvent::_internal_mutable_game_event() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent>(GetArenaForAllocation());
    _impl_.game_event_ = p;
  }
  return _impl_.game_event_;
}
inline ::GameEvent* Change_AddPassiveGameEvent::mutable_game_event() {
  ::GameEvent* _msg = _internal_mutable_game_event();
  // @@protoc_insertion_point(field_mutable:Change.AddPassiveGameEvent.game_event)
  return _msg;
}
inline void Change_AddPassiveGameEvent::set_allocated_game_event(::GameEvent* game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_event_);
  }
  if (game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event));
    if (message_arena != submessage_arena) {
      game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.game_event_ = game_event;
  // @@protoc_insertion_point(field_set_allocated:Change.AddPassiveGameEvent.game_event)
}

// -------------------------------------------------------------------

// Change_AddProposal

// optional .Proposal proposal = 1;
inline bool Change_AddProposal::_internal_has_proposal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proposal_ != nullptr);
  return value;
}
inline bool Change_AddProposal::has_proposal() const {
  return _internal_has_proposal();
}
inline const ::Proposal& Change_AddProposal::_internal_proposal() const {
  const ::Proposal* p = _impl_.proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proposal&>(
      ::_Proposal_default_instance_);
}
inline const ::Proposal& Change_AddProposal::proposal() const {
  // @@protoc_insertion_point(field_get:Change.AddProposal.proposal)
  return _internal_proposal();
}
inline void Change_AddProposal::unsafe_arena_set_allocated_proposal(
    ::Proposal* proposal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proposal_);
  }
  _impl_.proposal_ = proposal;
  if (proposal) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.AddProposal.proposal)
}
inline ::Proposal* Change_AddProposal::release_proposal() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Proposal* temp = _impl_.proposal_;
  _impl_.proposal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Proposal* Change_AddProposal::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_release:Change.AddProposal.proposal)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Proposal* temp = _impl_.proposal_;
  _impl_.proposal_ = nullptr;
  return temp;
}
inline ::Proposal* Change_AddProposal::_internal_mutable_proposal() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proposal>(GetArenaForAllocation());
    _impl_.proposal_ = p;
  }
  return _impl_.proposal_;
}
inline ::Proposal* Change_AddProposal::mutable_proposal() {
  ::Proposal* _msg = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:Change.AddProposal.proposal)
  return _msg;
}
inline void Change_AddProposal::set_allocated_proposal(::Proposal* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proposal_);
  }
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal));
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proposal_ = proposal;
  // @@protoc_insertion_point(field_set_allocated:Change.AddProposal.proposal)
}

// -------------------------------------------------------------------

// Change_AcceptProposalGroup

// optional string group_id = 3;
inline bool Change_AcceptProposalGroup::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Change_AcceptProposalGroup::has_group_id() const {
  return _internal_has_group_id();
}
inline void Change_AcceptProposalGroup::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Change_AcceptProposalGroup::group_id() const {
  // @@protoc_insertion_point(field_get:Change.AcceptProposalGroup.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Change_AcceptProposalGroup::set_group_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.group_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Change.AcceptProposalGroup.group_id)
}
inline std::string* Change_AcceptProposalGroup::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:Change.AcceptProposalGroup.group_id)
  return _s;
}
inline const std::string& Change_AcceptProposalGroup::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void Change_AcceptProposalGroup::_internal_set_group_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Change_AcceptProposalGroup::_internal_mutable_group_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Change_AcceptProposalGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:Change.AcceptProposalGroup.group_id)
  if (!_internal_has_group_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.group_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Change_AcceptProposalGroup::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Change.AcceptProposalGroup.group_id)
}

// optional string accepted_by = 2;
inline bool Change_AcceptProposalGroup::_internal_has_accepted_by() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Change_AcceptProposalGroup::has_accepted_by() const {
  return _internal_has_accepted_by();
}
inline void Change_AcceptProposalGroup::clear_accepted_by() {
  _impl_.accepted_by_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Change_AcceptProposalGroup::accepted_by() const {
  // @@protoc_insertion_point(field_get:Change.AcceptProposalGroup.accepted_by)
  return _internal_accepted_by();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Change_AcceptProposalGroup::set_accepted_by(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.accepted_by_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Change.AcceptProposalGroup.accepted_by)
}
inline std::string* Change_AcceptProposalGroup::mutable_accepted_by() {
  std::string* _s = _internal_mutable_accepted_by();
  // @@protoc_insertion_point(field_mutable:Change.AcceptProposalGroup.accepted_by)
  return _s;
}
inline const std::string& Change_AcceptProposalGroup::_internal_accepted_by() const {
  return _impl_.accepted_by_.Get();
}
inline void Change_AcceptProposalGroup::_internal_set_accepted_by(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.accepted_by_.Set(value, GetArenaForAllocation());
}
inline std::string* Change_AcceptProposalGroup::_internal_mutable_accepted_by() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.accepted_by_.Mutable(GetArenaForAllocation());
}
inline std::string* Change_AcceptProposalGroup::release_accepted_by() {
  // @@protoc_insertion_point(field_release:Change.AcceptProposalGroup.accepted_by)
  if (!_internal_has_accepted_by()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.accepted_by_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accepted_by_.IsDefault()) {
    _impl_.accepted_by_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Change_AcceptProposalGroup::set_allocated_accepted_by(std::string* accepted_by) {
  if (accepted_by != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.accepted_by_.SetAllocated(accepted_by, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accepted_by_.IsDefault()) {
    _impl_.accepted_by_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Change.AcceptProposalGroup.accepted_by)
}

// -------------------------------------------------------------------

// Change_UpdateConfig

// optional .Division division = 1;
inline bool Change_UpdateConfig::_internal_has_division() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Change_UpdateConfig::has_division() const {
  return _internal_has_division();
}
inline void Change_UpdateConfig::clear_division() {
  _impl_.division_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Division Change_UpdateConfig::_internal_division() const {
  return static_cast< ::Division >(_impl_.division_);
}
inline ::Division Change_UpdateConfig::division() const {
  // @@protoc_insertion_point(field_get:Change.UpdateConfig.division)
  return _internal_division();
}
inline void Change_UpdateConfig::_internal_set_division(::Division value) {
  assert(::Division_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.division_ = value;
}
inline void Change_UpdateConfig::set_division(::Division value) {
  _internal_set_division(value);
  // @@protoc_insertion_point(field_set:Change.UpdateConfig.division)
}

// optional .Team first_kickoff_team = 2;
inline bool Change_UpdateConfig::_internal_has_first_kickoff_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Change_UpdateConfig::has_first_kickoff_team() const {
  return _internal_has_first_kickoff_team();
}
inline void Change_UpdateConfig::clear_first_kickoff_team() {
  _impl_.first_kickoff_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team Change_UpdateConfig::_internal_first_kickoff_team() const {
  return static_cast< ::Team >(_impl_.first_kickoff_team_);
}
inline ::Team Change_UpdateConfig::first_kickoff_team() const {
  // @@protoc_insertion_point(field_get:Change.UpdateConfig.first_kickoff_team)
  return _internal_first_kickoff_team();
}
inline void Change_UpdateConfig::_internal_set_first_kickoff_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.first_kickoff_team_ = value;
}
inline void Change_UpdateConfig::set_first_kickoff_team(::Team value) {
  _internal_set_first_kickoff_team(value);
  // @@protoc_insertion_point(field_set:Change.UpdateConfig.first_kickoff_team)
}

// optional .MatchType match_type = 4;
inline bool Change_UpdateConfig::_internal_has_match_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Change_UpdateConfig::has_match_type() const {
  return _internal_has_match_type();
}
inline void Change_UpdateConfig::clear_match_type() {
  _impl_.match_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::MatchType Change_UpdateConfig::_internal_match_type() const {
  return static_cast< ::MatchType >(_impl_.match_type_);
}
inline ::MatchType Change_UpdateConfig::match_type() const {
  // @@protoc_insertion_point(field_get:Change.UpdateConfig.match_type)
  return _internal_match_type();
}
inline void Change_UpdateConfig::_internal_set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.match_type_ = value;
}
inline void Change_UpdateConfig::set_match_type(::MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:Change.UpdateConfig.match_type)
}

// optional .google.protobuf.Int32Value max_robots_per_team = 5;
inline bool Change_UpdateConfig::_internal_has_max_robots_per_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.max_robots_per_team_ != nullptr);
  return value;
}
inline bool Change_UpdateConfig::has_max_robots_per_team() const {
  return _internal_has_max_robots_per_team();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateConfig::_internal_max_robots_per_team() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.max_robots_per_team_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateConfig::max_robots_per_team() const {
  // @@protoc_insertion_point(field_get:Change.UpdateConfig.max_robots_per_team)
  return _internal_max_robots_per_team();
}
inline void Change_UpdateConfig::unsafe_arena_set_allocated_max_robots_per_team(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* max_robots_per_team) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_robots_per_team_);
  }
  _impl_.max_robots_per_team_ = max_robots_per_team;
  if (max_robots_per_team) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateConfig.max_robots_per_team)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateConfig::release_max_robots_per_team() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.max_robots_per_team_;
  _impl_.max_robots_per_team_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateConfig::unsafe_arena_release_max_robots_per_team() {
  // @@protoc_insertion_point(field_release:Change.UpdateConfig.max_robots_per_team)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.max_robots_per_team_;
  _impl_.max_robots_per_team_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateConfig::_internal_mutable_max_robots_per_team() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.max_robots_per_team_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.max_robots_per_team_ = p;
  }
  return _impl_.max_robots_per_team_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateConfig::mutable_max_robots_per_team() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_max_robots_per_team();
  // @@protoc_insertion_point(field_mutable:Change.UpdateConfig.max_robots_per_team)
  return _msg;
}
inline void Change_UpdateConfig::set_allocated_max_robots_per_team(::PROTOBUF_NAMESPACE_ID::Int32Value* max_robots_per_team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_robots_per_team_);
  }
  if (max_robots_per_team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_robots_per_team));
    if (message_arena != submessage_arena) {
      max_robots_per_team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_robots_per_team, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.max_robots_per_team_ = max_robots_per_team;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateConfig.max_robots_per_team)
}

// -------------------------------------------------------------------

// Change_UpdateTeamState

// optional .Team for_team = 1;
inline bool Change_UpdateTeamState::_internal_has_for_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Change_UpdateTeamState::has_for_team() const {
  return _internal_has_for_team();
}
inline void Change_UpdateTeamState::clear_for_team() {
  _impl_.for_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::Team Change_UpdateTeamState::_internal_for_team() const {
  return static_cast< ::Team >(_impl_.for_team_);
}
inline ::Team Change_UpdateTeamState::for_team() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.for_team)
  return _internal_for_team();
}
inline void Change_UpdateTeamState::_internal_set_for_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.for_team_ = value;
}
inline void Change_UpdateTeamState::set_for_team(::Team value) {
  _internal_set_for_team(value);
  // @@protoc_insertion_point(field_set:Change.UpdateTeamState.for_team)
}

// optional .google.protobuf.StringValue team_name = 2;
inline bool Change_UpdateTeamState::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.team_name_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_team_name() const {
  return _internal_has_team_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Change_UpdateTeamState::_internal_team_name() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = _impl_.team_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Change_UpdateTeamState::team_name() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.team_name)
  return _internal_team_name();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_team_name(
    ::PROTOBUF_NAMESPACE_ID::StringValue* team_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.team_name_);
  }
  _impl_.team_name_ = team_name;
  if (team_name) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.team_name)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Change_UpdateTeamState::release_team_name() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.team_name_;
  _impl_.team_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Change_UpdateTeamState::unsafe_arena_release_team_name() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.team_name)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.team_name_;
  _impl_.team_name_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Change_UpdateTeamState::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.team_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    _impl_.team_name_ = p;
  }
  return _impl_.team_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Change_UpdateTeamState::mutable_team_name() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.team_name)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_team_name(::PROTOBUF_NAMESPACE_ID::StringValue* team_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.team_name_);
  }
  if (team_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_name));
    if (message_arena != submessage_arena) {
      team_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_name, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_ = team_name;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.team_name)
}

// optional .google.protobuf.Int32Value goals = 3;
inline bool Change_UpdateTeamState::_internal_has_goals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.goals_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_goals() const {
  return _internal_has_goals();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::_internal_goals() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.goals_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::goals() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.goals)
  return _internal_goals();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_goals(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* goals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.goals_);
  }
  _impl_.goals_ = goals;
  if (goals) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.goals)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::release_goals() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.goals_;
  _impl_.goals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::unsafe_arena_release_goals() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.goals)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.goals_;
  _impl_.goals_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::_internal_mutable_goals() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.goals_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.goals_ = p;
  }
  return _impl_.goals_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::mutable_goals() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_goals();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.goals)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_goals(::PROTOBUF_NAMESPACE_ID::Int32Value* goals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.goals_);
  }
  if (goals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(goals));
    if (message_arena != submessage_arena) {
      goals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goals, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.goals_ = goals;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.goals)
}

// optional .google.protobuf.Int32Value goalkeeper = 4;
inline bool Change_UpdateTeamState::_internal_has_goalkeeper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.goalkeeper_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_goalkeeper() const {
  return _internal_has_goalkeeper();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::_internal_goalkeeper() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.goalkeeper_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::goalkeeper() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.goalkeeper)
  return _internal_goalkeeper();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_goalkeeper(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* goalkeeper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.goalkeeper_);
  }
  _impl_.goalkeeper_ = goalkeeper;
  if (goalkeeper) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.goalkeeper)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::release_goalkeeper() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.goalkeeper_;
  _impl_.goalkeeper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::unsafe_arena_release_goalkeeper() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.goalkeeper)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.goalkeeper_;
  _impl_.goalkeeper_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::_internal_mutable_goalkeeper() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.goalkeeper_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.goalkeeper_ = p;
  }
  return _impl_.goalkeeper_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::mutable_goalkeeper() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_goalkeeper();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.goalkeeper)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_goalkeeper(::PROTOBUF_NAMESPACE_ID::Int32Value* goalkeeper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.goalkeeper_);
  }
  if (goalkeeper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(goalkeeper));
    if (message_arena != submessage_arena) {
      goalkeeper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goalkeeper, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.goalkeeper_ = goalkeeper;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.goalkeeper)
}

// optional .google.protobuf.Int32Value timeouts_left = 5;
inline bool Change_UpdateTeamState::_internal_has_timeouts_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timeouts_left_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_timeouts_left() const {
  return _internal_has_timeouts_left();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::_internal_timeouts_left() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.timeouts_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::timeouts_left() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.timeouts_left)
  return _internal_timeouts_left();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_timeouts_left(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* timeouts_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timeouts_left_);
  }
  _impl_.timeouts_left_ = timeouts_left;
  if (timeouts_left) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.timeouts_left)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::release_timeouts_left() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.timeouts_left_;
  _impl_.timeouts_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::unsafe_arena_release_timeouts_left() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.timeouts_left)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.timeouts_left_;
  _impl_.timeouts_left_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::_internal_mutable_timeouts_left() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.timeouts_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.timeouts_left_ = p;
  }
  return _impl_.timeouts_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::mutable_timeouts_left() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_timeouts_left();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.timeouts_left)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_timeouts_left(::PROTOBUF_NAMESPACE_ID::Int32Value* timeouts_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timeouts_left_);
  }
  if (timeouts_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeouts_left));
    if (message_arena != submessage_arena) {
      timeouts_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeouts_left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.timeouts_left_ = timeouts_left;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.timeouts_left)
}

// optional .google.protobuf.StringValue timeout_time_left = 6;
inline bool Change_UpdateTeamState::_internal_has_timeout_time_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timeout_time_left_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_timeout_time_left() const {
  return _internal_has_timeout_time_left();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Change_UpdateTeamState::_internal_timeout_time_left() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = _impl_.timeout_time_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Change_UpdateTeamState::timeout_time_left() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.timeout_time_left)
  return _internal_timeout_time_left();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_timeout_time_left(
    ::PROTOBUF_NAMESPACE_ID::StringValue* timeout_time_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timeout_time_left_);
  }
  _impl_.timeout_time_left_ = timeout_time_left;
  if (timeout_time_left) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.timeout_time_left)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Change_UpdateTeamState::release_timeout_time_left() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.timeout_time_left_;
  _impl_.timeout_time_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Change_UpdateTeamState::unsafe_arena_release_timeout_time_left() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.timeout_time_left)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.timeout_time_left_;
  _impl_.timeout_time_left_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Change_UpdateTeamState::_internal_mutable_timeout_time_left() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.timeout_time_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    _impl_.timeout_time_left_ = p;
  }
  return _impl_.timeout_time_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Change_UpdateTeamState::mutable_timeout_time_left() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_timeout_time_left();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.timeout_time_left)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_timeout_time_left(::PROTOBUF_NAMESPACE_ID::StringValue* timeout_time_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timeout_time_left_);
  }
  if (timeout_time_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_time_left));
    if (message_arena != submessage_arena) {
      timeout_time_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout_time_left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.timeout_time_left_ = timeout_time_left;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.timeout_time_left)
}

// optional .google.protobuf.BoolValue on_positive_half = 7;
inline bool Change_UpdateTeamState::_internal_has_on_positive_half() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.on_positive_half_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_on_positive_half() const {
  return _internal_has_on_positive_half();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::_internal_on_positive_half() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.on_positive_half_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::on_positive_half() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.on_positive_half)
  return _internal_on_positive_half();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_on_positive_half(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* on_positive_half) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.on_positive_half_);
  }
  _impl_.on_positive_half_ = on_positive_half;
  if (on_positive_half) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.on_positive_half)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::release_on_positive_half() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.on_positive_half_;
  _impl_.on_positive_half_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::unsafe_arena_release_on_positive_half() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.on_positive_half)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.on_positive_half_;
  _impl_.on_positive_half_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::_internal_mutable_on_positive_half() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.on_positive_half_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.on_positive_half_ = p;
  }
  return _impl_.on_positive_half_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::mutable_on_positive_half() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_on_positive_half();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.on_positive_half)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_on_positive_half(::PROTOBUF_NAMESPACE_ID::BoolValue* on_positive_half) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.on_positive_half_);
  }
  if (on_positive_half) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(on_positive_half));
    if (message_arena != submessage_arena) {
      on_positive_half = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, on_positive_half, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.on_positive_half_ = on_positive_half;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.on_positive_half)
}

// optional .google.protobuf.Int32Value ball_placement_failures = 8;
inline bool Change_UpdateTeamState::_internal_has_ball_placement_failures() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ball_placement_failures_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_ball_placement_failures() const {
  return _internal_has_ball_placement_failures();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::_internal_ball_placement_failures() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.ball_placement_failures_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::ball_placement_failures() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.ball_placement_failures)
  return _internal_ball_placement_failures();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_ball_placement_failures(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* ball_placement_failures) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ball_placement_failures_);
  }
  _impl_.ball_placement_failures_ = ball_placement_failures;
  if (ball_placement_failures) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.ball_placement_failures)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::release_ball_placement_failures() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.ball_placement_failures_;
  _impl_.ball_placement_failures_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::unsafe_arena_release_ball_placement_failures() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.ball_placement_failures)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.ball_placement_failures_;
  _impl_.ball_placement_failures_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::_internal_mutable_ball_placement_failures() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.ball_placement_failures_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.ball_placement_failures_ = p;
  }
  return _impl_.ball_placement_failures_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::mutable_ball_placement_failures() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_ball_placement_failures();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.ball_placement_failures)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_ball_placement_failures(::PROTOBUF_NAMESPACE_ID::Int32Value* ball_placement_failures) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ball_placement_failures_);
  }
  if (ball_placement_failures) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ball_placement_failures));
    if (message_arena != submessage_arena) {
      ball_placement_failures = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball_placement_failures, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.ball_placement_failures_ = ball_placement_failures;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.ball_placement_failures)
}

// optional .google.protobuf.BoolValue can_place_ball = 9;
inline bool Change_UpdateTeamState::_internal_has_can_place_ball() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.can_place_ball_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_can_place_ball() const {
  return _internal_has_can_place_ball();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::_internal_can_place_ball() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.can_place_ball_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::can_place_ball() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.can_place_ball)
  return _internal_can_place_ball();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_can_place_ball(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* can_place_ball) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.can_place_ball_);
  }
  _impl_.can_place_ball_ = can_place_ball;
  if (can_place_ball) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.can_place_ball)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::release_can_place_ball() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.can_place_ball_;
  _impl_.can_place_ball_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::unsafe_arena_release_can_place_ball() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.can_place_ball)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.can_place_ball_;
  _impl_.can_place_ball_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::_internal_mutable_can_place_ball() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.can_place_ball_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.can_place_ball_ = p;
  }
  return _impl_.can_place_ball_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::mutable_can_place_ball() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_can_place_ball();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.can_place_ball)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_can_place_ball(::PROTOBUF_NAMESPACE_ID::BoolValue* can_place_ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.can_place_ball_);
  }
  if (can_place_ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(can_place_ball));
    if (message_arena != submessage_arena) {
      can_place_ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, can_place_ball, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.can_place_ball_ = can_place_ball;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.can_place_ball)
}

// optional .google.protobuf.Int32Value challenge_flags_left = 21;
inline bool Change_UpdateTeamState::_internal_has_challenge_flags_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.challenge_flags_left_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_challenge_flags_left() const {
  return _internal_has_challenge_flags_left();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::_internal_challenge_flags_left() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.challenge_flags_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::challenge_flags_left() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.challenge_flags_left)
  return _internal_challenge_flags_left();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_challenge_flags_left(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* challenge_flags_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.challenge_flags_left_);
  }
  _impl_.challenge_flags_left_ = challenge_flags_left;
  if (challenge_flags_left) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.challenge_flags_left)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::release_challenge_flags_left() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.challenge_flags_left_;
  _impl_.challenge_flags_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::unsafe_arena_release_challenge_flags_left() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.challenge_flags_left)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.challenge_flags_left_;
  _impl_.challenge_flags_left_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::_internal_mutable_challenge_flags_left() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.challenge_flags_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.challenge_flags_left_ = p;
  }
  return _impl_.challenge_flags_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::mutable_challenge_flags_left() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_challenge_flags_left();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.challenge_flags_left)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_challenge_flags_left(::PROTOBUF_NAMESPACE_ID::Int32Value* challenge_flags_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.challenge_flags_left_);
  }
  if (challenge_flags_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(challenge_flags_left));
    if (message_arena != submessage_arena) {
      challenge_flags_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challenge_flags_left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.challenge_flags_left_ = challenge_flags_left;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.challenge_flags_left)
}

// optional .google.protobuf.Int32Value bot_substitutions_left = 22;
inline bool Change_UpdateTeamState::_internal_has_bot_substitutions_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bot_substitutions_left_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_bot_substitutions_left() const {
  return _internal_has_bot_substitutions_left();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::_internal_bot_substitutions_left() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.bot_substitutions_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Change_UpdateTeamState::bot_substitutions_left() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.bot_substitutions_left)
  return _internal_bot_substitutions_left();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_bot_substitutions_left(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* bot_substitutions_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bot_substitutions_left_);
  }
  _impl_.bot_substitutions_left_ = bot_substitutions_left;
  if (bot_substitutions_left) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.bot_substitutions_left)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::release_bot_substitutions_left() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.bot_substitutions_left_;
  _impl_.bot_substitutions_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::unsafe_arena_release_bot_substitutions_left() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.bot_substitutions_left)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.bot_substitutions_left_;
  _impl_.bot_substitutions_left_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::_internal_mutable_bot_substitutions_left() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.bot_substitutions_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.bot_substitutions_left_ = p;
  }
  return _impl_.bot_substitutions_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Change_UpdateTeamState::mutable_bot_substitutions_left() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_bot_substitutions_left();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.bot_substitutions_left)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_bot_substitutions_left(::PROTOBUF_NAMESPACE_ID::Int32Value* bot_substitutions_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bot_substitutions_left_);
  }
  if (bot_substitutions_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_substitutions_left));
    if (message_arena != submessage_arena) {
      bot_substitutions_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_substitutions_left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.bot_substitutions_left_ = bot_substitutions_left;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.bot_substitutions_left)
}

// optional .google.protobuf.BoolValue requests_bot_substitution = 10;
inline bool Change_UpdateTeamState::_internal_has_requests_bot_substitution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requests_bot_substitution_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_requests_bot_substitution() const {
  return _internal_has_requests_bot_substitution();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::_internal_requests_bot_substitution() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.requests_bot_substitution_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::requests_bot_substitution() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.requests_bot_substitution)
  return _internal_requests_bot_substitution();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_requests_bot_substitution(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_bot_substitution) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_bot_substitution_);
  }
  _impl_.requests_bot_substitution_ = requests_bot_substitution;
  if (requests_bot_substitution) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.requests_bot_substitution)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::release_requests_bot_substitution() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.requests_bot_substitution_;
  _impl_.requests_bot_substitution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::unsafe_arena_release_requests_bot_substitution() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.requests_bot_substitution)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.requests_bot_substitution_;
  _impl_.requests_bot_substitution_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::_internal_mutable_requests_bot_substitution() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.requests_bot_substitution_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.requests_bot_substitution_ = p;
  }
  return _impl_.requests_bot_substitution_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::mutable_requests_bot_substitution() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_requests_bot_substitution();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.requests_bot_substitution)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_requests_bot_substitution(::PROTOBUF_NAMESPACE_ID::BoolValue* requests_bot_substitution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_bot_substitution_);
  }
  if (requests_bot_substitution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requests_bot_substitution));
    if (message_arena != submessage_arena) {
      requests_bot_substitution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requests_bot_substitution, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.requests_bot_substitution_ = requests_bot_substitution;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.requests_bot_substitution)
}

// optional .google.protobuf.BoolValue requests_timeout = 17;
inline bool Change_UpdateTeamState::_internal_has_requests_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requests_timeout_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_requests_timeout() const {
  return _internal_has_requests_timeout();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::_internal_requests_timeout() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.requests_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::requests_timeout() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.requests_timeout)
  return _internal_requests_timeout();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_requests_timeout(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_timeout_);
  }
  _impl_.requests_timeout_ = requests_timeout;
  if (requests_timeout) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.requests_timeout)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::release_requests_timeout() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.requests_timeout_;
  _impl_.requests_timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::unsafe_arena_release_requests_timeout() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.requests_timeout)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.requests_timeout_;
  _impl_.requests_timeout_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::_internal_mutable_requests_timeout() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.requests_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.requests_timeout_ = p;
  }
  return _impl_.requests_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::mutable_requests_timeout() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_requests_timeout();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.requests_timeout)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_requests_timeout(::PROTOBUF_NAMESPACE_ID::BoolValue* requests_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_timeout_);
  }
  if (requests_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requests_timeout));
    if (message_arena != submessage_arena) {
      requests_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requests_timeout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.requests_timeout_ = requests_timeout;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.requests_timeout)
}

// optional .google.protobuf.BoolValue requests_challenge = 18;
inline bool Change_UpdateTeamState::_internal_has_requests_challenge() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requests_challenge_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_requests_challenge() const {
  return _internal_has_requests_challenge();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::_internal_requests_challenge() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.requests_challenge_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::requests_challenge() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.requests_challenge)
  return _internal_requests_challenge();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_requests_challenge(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_challenge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_challenge_);
  }
  _impl_.requests_challenge_ = requests_challenge;
  if (requests_challenge) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.requests_challenge)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::release_requests_challenge() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.requests_challenge_;
  _impl_.requests_challenge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::unsafe_arena_release_requests_challenge() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.requests_challenge)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.requests_challenge_;
  _impl_.requests_challenge_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::_internal_mutable_requests_challenge() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.requests_challenge_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.requests_challenge_ = p;
  }
  return _impl_.requests_challenge_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::mutable_requests_challenge() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_requests_challenge();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.requests_challenge)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_requests_challenge(::PROTOBUF_NAMESPACE_ID::BoolValue* requests_challenge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_challenge_);
  }
  if (requests_challenge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requests_challenge));
    if (message_arena != submessage_arena) {
      requests_challenge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requests_challenge, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.requests_challenge_ = requests_challenge;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.requests_challenge)
}

// optional .google.protobuf.BoolValue requests_emergency_stop = 19;
inline bool Change_UpdateTeamState::_internal_has_requests_emergency_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requests_emergency_stop_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_requests_emergency_stop() const {
  return _internal_has_requests_emergency_stop();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::_internal_requests_emergency_stop() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.requests_emergency_stop_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Change_UpdateTeamState::requests_emergency_stop() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.requests_emergency_stop)
  return _internal_requests_emergency_stop();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_requests_emergency_stop(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* requests_emergency_stop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_emergency_stop_);
  }
  _impl_.requests_emergency_stop_ = requests_emergency_stop;
  if (requests_emergency_stop) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.requests_emergency_stop)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::release_requests_emergency_stop() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.requests_emergency_stop_;
  _impl_.requests_emergency_stop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::unsafe_arena_release_requests_emergency_stop() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.requests_emergency_stop)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.requests_emergency_stop_;
  _impl_.requests_emergency_stop_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::_internal_mutable_requests_emergency_stop() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.requests_emergency_stop_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.requests_emergency_stop_ = p;
  }
  return _impl_.requests_emergency_stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Change_UpdateTeamState::mutable_requests_emergency_stop() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_requests_emergency_stop();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.requests_emergency_stop)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_requests_emergency_stop(::PROTOBUF_NAMESPACE_ID::BoolValue* requests_emergency_stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_emergency_stop_);
  }
  if (requests_emergency_stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requests_emergency_stop));
    if (message_arena != submessage_arena) {
      requests_emergency_stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requests_emergency_stop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.requests_emergency_stop_ = requests_emergency_stop;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.requests_emergency_stop)
}

// optional .YellowCard yellow_card = 20;
inline bool Change_UpdateTeamState::_internal_has_yellow_card() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.yellow_card_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_yellow_card() const {
  return _internal_has_yellow_card();
}
inline const ::YellowCard& Change_UpdateTeamState::_internal_yellow_card() const {
  const ::YellowCard* p = _impl_.yellow_card_;
  return p != nullptr ? *p : reinterpret_cast<const ::YellowCard&>(
      ::_YellowCard_default_instance_);
}
inline const ::YellowCard& Change_UpdateTeamState::yellow_card() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.yellow_card)
  return _internal_yellow_card();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_yellow_card(
    ::YellowCard* yellow_card) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yellow_card_);
  }
  _impl_.yellow_card_ = yellow_card;
  if (yellow_card) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.yellow_card)
}
inline ::YellowCard* Change_UpdateTeamState::release_yellow_card() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::YellowCard* temp = _impl_.yellow_card_;
  _impl_.yellow_card_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::YellowCard* Change_UpdateTeamState::unsafe_arena_release_yellow_card() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.yellow_card)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::YellowCard* temp = _impl_.yellow_card_;
  _impl_.yellow_card_ = nullptr;
  return temp;
}
inline ::YellowCard* Change_UpdateTeamState::_internal_mutable_yellow_card() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.yellow_card_ == nullptr) {
    auto* p = CreateMaybeMessage<::YellowCard>(GetArenaForAllocation());
    _impl_.yellow_card_ = p;
  }
  return _impl_.yellow_card_;
}
inline ::YellowCard* Change_UpdateTeamState::mutable_yellow_card() {
  ::YellowCard* _msg = _internal_mutable_yellow_card();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.yellow_card)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_yellow_card(::YellowCard* yellow_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yellow_card_);
  }
  if (yellow_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yellow_card));
    if (message_arena != submessage_arena) {
      yellow_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yellow_card, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.yellow_card_ = yellow_card;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.yellow_card)
}

// optional .RedCard red_card = 12;
inline bool Change_UpdateTeamState::_internal_has_red_card() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.red_card_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_red_card() const {
  return _internal_has_red_card();
}
inline const ::RedCard& Change_UpdateTeamState::_internal_red_card() const {
  const ::RedCard* p = _impl_.red_card_;
  return p != nullptr ? *p : reinterpret_cast<const ::RedCard&>(
      ::_RedCard_default_instance_);
}
inline const ::RedCard& Change_UpdateTeamState::red_card() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.red_card)
  return _internal_red_card();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_red_card(
    ::RedCard* red_card) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.red_card_);
  }
  _impl_.red_card_ = red_card;
  if (red_card) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.red_card)
}
inline ::RedCard* Change_UpdateTeamState::release_red_card() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::RedCard* temp = _impl_.red_card_;
  _impl_.red_card_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RedCard* Change_UpdateTeamState::unsafe_arena_release_red_card() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.red_card)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::RedCard* temp = _impl_.red_card_;
  _impl_.red_card_ = nullptr;
  return temp;
}
inline ::RedCard* Change_UpdateTeamState::_internal_mutable_red_card() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.red_card_ == nullptr) {
    auto* p = CreateMaybeMessage<::RedCard>(GetArenaForAllocation());
    _impl_.red_card_ = p;
  }
  return _impl_.red_card_;
}
inline ::RedCard* Change_UpdateTeamState::mutable_red_card() {
  ::RedCard* _msg = _internal_mutable_red_card();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.red_card)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_red_card(::RedCard* red_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.red_card_);
  }
  if (red_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(red_card));
    if (message_arena != submessage_arena) {
      red_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, red_card, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.red_card_ = red_card;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.red_card)
}

// optional .Foul foul = 13;
inline bool Change_UpdateTeamState::_internal_has_foul() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.foul_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_foul() const {
  return _internal_has_foul();
}
inline const ::Foul& Change_UpdateTeamState::_internal_foul() const {
  const ::Foul* p = _impl_.foul_;
  return p != nullptr ? *p : reinterpret_cast<const ::Foul&>(
      ::_Foul_default_instance_);
}
inline const ::Foul& Change_UpdateTeamState::foul() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.foul)
  return _internal_foul();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_foul(
    ::Foul* foul) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.foul_);
  }
  _impl_.foul_ = foul;
  if (foul) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.foul)
}
inline ::Foul* Change_UpdateTeamState::release_foul() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::Foul* temp = _impl_.foul_;
  _impl_.foul_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Foul* Change_UpdateTeamState::unsafe_arena_release_foul() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.foul)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::Foul* temp = _impl_.foul_;
  _impl_.foul_ = nullptr;
  return temp;
}
inline ::Foul* Change_UpdateTeamState::_internal_mutable_foul() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.foul_ == nullptr) {
    auto* p = CreateMaybeMessage<::Foul>(GetArenaForAllocation());
    _impl_.foul_ = p;
  }
  return _impl_.foul_;
}
inline ::Foul* Change_UpdateTeamState::mutable_foul() {
  ::Foul* _msg = _internal_mutable_foul();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.foul)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_foul(::Foul* foul) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.foul_);
  }
  if (foul) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(foul));
    if (message_arena != submessage_arena) {
      foul = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foul, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.foul_ = foul;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.foul)
}

// optional .google.protobuf.UInt32Value remove_yellow_card = 14;
inline bool Change_UpdateTeamState::_internal_has_remove_yellow_card() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.remove_yellow_card_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_remove_yellow_card() const {
  return _internal_has_remove_yellow_card();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Change_UpdateTeamState::_internal_remove_yellow_card() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = _impl_.remove_yellow_card_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Change_UpdateTeamState::remove_yellow_card() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.remove_yellow_card)
  return _internal_remove_yellow_card();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_remove_yellow_card(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_yellow_card) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remove_yellow_card_);
  }
  _impl_.remove_yellow_card_ = remove_yellow_card;
  if (remove_yellow_card) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.remove_yellow_card)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::release_remove_yellow_card() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = _impl_.remove_yellow_card_;
  _impl_.remove_yellow_card_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::unsafe_arena_release_remove_yellow_card() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.remove_yellow_card)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = _impl_.remove_yellow_card_;
  _impl_.remove_yellow_card_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::_internal_mutable_remove_yellow_card() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.remove_yellow_card_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    _impl_.remove_yellow_card_ = p;
  }
  return _impl_.remove_yellow_card_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::mutable_remove_yellow_card() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_remove_yellow_card();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.remove_yellow_card)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_remove_yellow_card(::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_yellow_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remove_yellow_card_);
  }
  if (remove_yellow_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_yellow_card));
    if (message_arena != submessage_arena) {
      remove_yellow_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_yellow_card, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.remove_yellow_card_ = remove_yellow_card;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.remove_yellow_card)
}

// optional .google.protobuf.UInt32Value remove_red_card = 15;
inline bool Change_UpdateTeamState::_internal_has_remove_red_card() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.remove_red_card_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_remove_red_card() const {
  return _internal_has_remove_red_card();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Change_UpdateTeamState::_internal_remove_red_card() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = _impl_.remove_red_card_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Change_UpdateTeamState::remove_red_card() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.remove_red_card)
  return _internal_remove_red_card();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_remove_red_card(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_red_card) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remove_red_card_);
  }
  _impl_.remove_red_card_ = remove_red_card;
  if (remove_red_card) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.remove_red_card)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::release_remove_red_card() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = _impl_.remove_red_card_;
  _impl_.remove_red_card_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::unsafe_arena_release_remove_red_card() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.remove_red_card)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = _impl_.remove_red_card_;
  _impl_.remove_red_card_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::_internal_mutable_remove_red_card() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.remove_red_card_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    _impl_.remove_red_card_ = p;
  }
  return _impl_.remove_red_card_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::mutable_remove_red_card() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_remove_red_card();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.remove_red_card)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_remove_red_card(::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_red_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remove_red_card_);
  }
  if (remove_red_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_red_card));
    if (message_arena != submessage_arena) {
      remove_red_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_red_card, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.remove_red_card_ = remove_red_card;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.remove_red_card)
}

// optional .google.protobuf.UInt32Value remove_foul = 16;
inline bool Change_UpdateTeamState::_internal_has_remove_foul() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.remove_foul_ != nullptr);
  return value;
}
inline bool Change_UpdateTeamState::has_remove_foul() const {
  return _internal_has_remove_foul();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Change_UpdateTeamState::_internal_remove_foul() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = _impl_.remove_foul_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Change_UpdateTeamState::remove_foul() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.remove_foul)
  return _internal_remove_foul();
}
inline void Change_UpdateTeamState::unsafe_arena_set_allocated_remove_foul(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_foul) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remove_foul_);
  }
  _impl_.remove_foul_ = remove_foul;
  if (remove_foul) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.UpdateTeamState.remove_foul)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::release_remove_foul() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = _impl_.remove_foul_;
  _impl_.remove_foul_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::unsafe_arena_release_remove_foul() {
  // @@protoc_insertion_point(field_release:Change.UpdateTeamState.remove_foul)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = _impl_.remove_foul_;
  _impl_.remove_foul_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::_internal_mutable_remove_foul() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.remove_foul_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    _impl_.remove_foul_ = p;
  }
  return _impl_.remove_foul_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Change_UpdateTeamState::mutable_remove_foul() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_remove_foul();
  // @@protoc_insertion_point(field_mutable:Change.UpdateTeamState.remove_foul)
  return _msg;
}
inline void Change_UpdateTeamState::set_allocated_remove_foul(::PROTOBUF_NAMESPACE_ID::UInt32Value* remove_foul) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remove_foul_);
  }
  if (remove_foul) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_foul));
    if (message_arena != submessage_arena) {
      remove_foul = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_foul, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.remove_foul_ = remove_foul;
  // @@protoc_insertion_point(field_set_allocated:Change.UpdateTeamState.remove_foul)
}

// optional .HullColor hull_color = 23;
inline bool Change_UpdateTeamState::_internal_has_hull_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Change_UpdateTeamState::has_hull_color() const {
  return _internal_has_hull_color();
}
inline void Change_UpdateTeamState::clear_hull_color() {
  _impl_.hull_color_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::HullColor Change_UpdateTeamState::_internal_hull_color() const {
  return static_cast< ::HullColor >(_impl_.hull_color_);
}
inline ::HullColor Change_UpdateTeamState::hull_color() const {
  // @@protoc_insertion_point(field_get:Change.UpdateTeamState.hull_color)
  return _internal_hull_color();
}
inline void Change_UpdateTeamState::_internal_set_hull_color(::HullColor value) {
  assert(::HullColor_IsValid(value));
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.hull_color_ = value;
}
inline void Change_UpdateTeamState::set_hull_color(::HullColor value) {
  _internal_set_hull_color(value);
  // @@protoc_insertion_point(field_set:Change.UpdateTeamState.hull_color)
}

// -------------------------------------------------------------------

// Change_SwitchColors

// -------------------------------------------------------------------

// Change_Revert

// optional int32 change_id = 1;
inline bool Change_Revert::_internal_has_change_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Change_Revert::has_change_id() const {
  return _internal_has_change_id();
}
inline void Change_Revert::clear_change_id() {
  _impl_.change_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Change_Revert::_internal_change_id() const {
  return _impl_.change_id_;
}
inline int32_t Change_Revert::change_id() const {
  // @@protoc_insertion_point(field_get:Change.Revert.change_id)
  return _internal_change_id();
}
inline void Change_Revert::_internal_set_change_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.change_id_ = value;
}
inline void Change_Revert::set_change_id(int32_t value) {
  _internal_set_change_id(value);
  // @@protoc_insertion_point(field_set:Change.Revert.change_id)
}

// -------------------------------------------------------------------

// Change_NewGameState

// optional .GameState game_state = 1;
inline bool Change_NewGameState::_internal_has_game_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.game_state_ != nullptr);
  return value;
}
inline bool Change_NewGameState::has_game_state() const {
  return _internal_has_game_state();
}
inline const ::GameState& Change_NewGameState::_internal_game_state() const {
  const ::GameState* p = _impl_.game_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameState&>(
      ::_GameState_default_instance_);
}
inline const ::GameState& Change_NewGameState::game_state() const {
  // @@protoc_insertion_point(field_get:Change.NewGameState.game_state)
  return _internal_game_state();
}
inline void Change_NewGameState::unsafe_arena_set_allocated_game_state(
    ::GameState* game_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_state_);
  }
  _impl_.game_state_ = game_state;
  if (game_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.NewGameState.game_state)
}
inline ::GameState* Change_NewGameState::release_game_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameState* temp = _impl_.game_state_;
  _impl_.game_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameState* Change_NewGameState::unsafe_arena_release_game_state() {
  // @@protoc_insertion_point(field_release:Change.NewGameState.game_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameState* temp = _impl_.game_state_;
  _impl_.game_state_ = nullptr;
  return temp;
}
inline ::GameState* Change_NewGameState::_internal_mutable_game_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.game_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameState>(GetArenaForAllocation());
    _impl_.game_state_ = p;
  }
  return _impl_.game_state_;
}
inline ::GameState* Change_NewGameState::mutable_game_state() {
  ::GameState* _msg = _internal_mutable_game_state();
  // @@protoc_insertion_point(field_mutable:Change.NewGameState.game_state)
  return _msg;
}
inline void Change_NewGameState::set_allocated_game_state(::GameState* game_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_state_);
  }
  if (game_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_state));
    if (message_arena != submessage_arena) {
      game_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.game_state_ = game_state;
  // @@protoc_insertion_point(field_set_allocated:Change.NewGameState.game_state)
}

// -------------------------------------------------------------------

// Change_SetStatusMessage

// optional string status_message = 1;
inline bool Change_SetStatusMessage::_internal_has_status_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Change_SetStatusMessage::has_status_message() const {
  return _internal_has_status_message();
}
inline void Change_SetStatusMessage::clear_status_message() {
  _impl_.status_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Change_SetStatusMessage::status_message() const {
  // @@protoc_insertion_point(field_get:Change.SetStatusMessage.status_message)
  return _internal_status_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Change_SetStatusMessage::set_status_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.status_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Change.SetStatusMessage.status_message)
}
inline std::string* Change_SetStatusMessage::mutable_status_message() {
  std::string* _s = _internal_mutable_status_message();
  // @@protoc_insertion_point(field_mutable:Change.SetStatusMessage.status_message)
  return _s;
}
inline const std::string& Change_SetStatusMessage::_internal_status_message() const {
  return _impl_.status_message_.Get();
}
inline void Change_SetStatusMessage::_internal_set_status_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.status_message_.Set(value, GetArenaForAllocation());
}
inline std::string* Change_SetStatusMessage::_internal_mutable_status_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.status_message_.Mutable(GetArenaForAllocation());
}
inline std::string* Change_SetStatusMessage::release_status_message() {
  // @@protoc_insertion_point(field_release:Change.SetStatusMessage.status_message)
  if (!_internal_has_status_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.status_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_message_.IsDefault()) {
    _impl_.status_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Change_SetStatusMessage::set_allocated_status_message(std::string* status_message) {
  if (status_message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_message_.SetAllocated(status_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_message_.IsDefault()) {
    _impl_.status_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Change.SetStatusMessage.status_message)
}

// -------------------------------------------------------------------

// Change

// optional string origin = 1;
inline bool Change::_internal_has_origin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Change::has_origin() const {
  return _internal_has_origin();
}
inline void Change::clear_origin() {
  _impl_.origin_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Change::origin() const {
  // @@protoc_insertion_point(field_get:Change.origin)
  return _internal_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Change::set_origin(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.origin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Change.origin)
}
inline std::string* Change::mutable_origin() {
  std::string* _s = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:Change.origin)
  return _s;
}
inline const std::string& Change::_internal_origin() const {
  return _impl_.origin_.Get();
}
inline void Change::_internal_set_origin(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.origin_.Set(value, GetArenaForAllocation());
}
inline std::string* Change::_internal_mutable_origin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.origin_.Mutable(GetArenaForAllocation());
}
inline std::string* Change::release_origin() {
  // @@protoc_insertion_point(field_release:Change.origin)
  if (!_internal_has_origin()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.origin_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.origin_.IsDefault()) {
    _impl_.origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Change::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.origin_.SetAllocated(origin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.origin_.IsDefault()) {
    _impl_.origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Change.origin)
}

// optional bool revertible = 16;
inline bool Change::_internal_has_revertible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Change::has_revertible() const {
  return _internal_has_revertible();
}
inline void Change::clear_revertible() {
  _impl_.revertible_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Change::_internal_revertible() const {
  return _impl_.revertible_;
}
inline bool Change::revertible() const {
  // @@protoc_insertion_point(field_get:Change.revertible)
  return _internal_revertible();
}
inline void Change::_internal_set_revertible(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.revertible_ = value;
}
inline void Change::set_revertible(bool value) {
  _internal_set_revertible(value);
  // @@protoc_insertion_point(field_set:Change.revertible)
}

// .Change.NewCommand new_command_change = 2;
inline bool Change::_internal_has_new_command_change() const {
  return change_case() == kNewCommandChange;
}
inline bool Change::has_new_command_change() const {
  return _internal_has_new_command_change();
}
inline void Change::set_has_new_command_change() {
  _impl_._oneof_case_[0] = kNewCommandChange;
}
inline void Change::clear_new_command_change() {
  if (_internal_has_new_command_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.new_command_change_;
    }
    clear_has_change();
  }
}
inline ::Change_NewCommand* Change::release_new_command_change() {
  // @@protoc_insertion_point(field_release:Change.new_command_change)
  if (_internal_has_new_command_change()) {
    clear_has_change();
    ::Change_NewCommand* temp = _impl_.change_.new_command_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.new_command_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_NewCommand& Change::_internal_new_command_change() const {
  return _internal_has_new_command_change()
      ? *_impl_.change_.new_command_change_
      : reinterpret_cast< ::Change_NewCommand&>(::_Change_NewCommand_default_instance_);
}
inline const ::Change_NewCommand& Change::new_command_change() const {
  // @@protoc_insertion_point(field_get:Change.new_command_change)
  return _internal_new_command_change();
}
inline ::Change_NewCommand* Change::unsafe_arena_release_new_command_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.new_command_change)
  if (_internal_has_new_command_change()) {
    clear_has_change();
    ::Change_NewCommand* temp = _impl_.change_.new_command_change_;
    _impl_.change_.new_command_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_new_command_change(::Change_NewCommand* new_command_change) {
  clear_change();
  if (new_command_change) {
    set_has_new_command_change();
    _impl_.change_.new_command_change_ = new_command_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.new_command_change)
}
inline ::Change_NewCommand* Change::_internal_mutable_new_command_change() {
  if (!_internal_has_new_command_change()) {
    clear_change();
    set_has_new_command_change();
    _impl_.change_.new_command_change_ = CreateMaybeMessage< ::Change_NewCommand >(GetArenaForAllocation());
  }
  return _impl_.change_.new_command_change_;
}
inline ::Change_NewCommand* Change::mutable_new_command_change() {
  ::Change_NewCommand* _msg = _internal_mutable_new_command_change();
  // @@protoc_insertion_point(field_mutable:Change.new_command_change)
  return _msg;
}

// .Change.ChangeStage change_stage_change = 3;
inline bool Change::_internal_has_change_stage_change() const {
  return change_case() == kChangeStageChange;
}
inline bool Change::has_change_stage_change() const {
  return _internal_has_change_stage_change();
}
inline void Change::set_has_change_stage_change() {
  _impl_._oneof_case_[0] = kChangeStageChange;
}
inline void Change::clear_change_stage_change() {
  if (_internal_has_change_stage_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.change_stage_change_;
    }
    clear_has_change();
  }
}
inline ::Change_ChangeStage* Change::release_change_stage_change() {
  // @@protoc_insertion_point(field_release:Change.change_stage_change)
  if (_internal_has_change_stage_change()) {
    clear_has_change();
    ::Change_ChangeStage* temp = _impl_.change_.change_stage_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.change_stage_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_ChangeStage& Change::_internal_change_stage_change() const {
  return _internal_has_change_stage_change()
      ? *_impl_.change_.change_stage_change_
      : reinterpret_cast< ::Change_ChangeStage&>(::_Change_ChangeStage_default_instance_);
}
inline const ::Change_ChangeStage& Change::change_stage_change() const {
  // @@protoc_insertion_point(field_get:Change.change_stage_change)
  return _internal_change_stage_change();
}
inline ::Change_ChangeStage* Change::unsafe_arena_release_change_stage_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.change_stage_change)
  if (_internal_has_change_stage_change()) {
    clear_has_change();
    ::Change_ChangeStage* temp = _impl_.change_.change_stage_change_;
    _impl_.change_.change_stage_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_change_stage_change(::Change_ChangeStage* change_stage_change) {
  clear_change();
  if (change_stage_change) {
    set_has_change_stage_change();
    _impl_.change_.change_stage_change_ = change_stage_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.change_stage_change)
}
inline ::Change_ChangeStage* Change::_internal_mutable_change_stage_change() {
  if (!_internal_has_change_stage_change()) {
    clear_change();
    set_has_change_stage_change();
    _impl_.change_.change_stage_change_ = CreateMaybeMessage< ::Change_ChangeStage >(GetArenaForAllocation());
  }
  return _impl_.change_.change_stage_change_;
}
inline ::Change_ChangeStage* Change::mutable_change_stage_change() {
  ::Change_ChangeStage* _msg = _internal_mutable_change_stage_change();
  // @@protoc_insertion_point(field_mutable:Change.change_stage_change)
  return _msg;
}

// .Change.SetBallPlacementPos set_ball_placement_pos_change = 4;
inline bool Change::_internal_has_set_ball_placement_pos_change() const {
  return change_case() == kSetBallPlacementPosChange;
}
inline bool Change::has_set_ball_placement_pos_change() const {
  return _internal_has_set_ball_placement_pos_change();
}
inline void Change::set_has_set_ball_placement_pos_change() {
  _impl_._oneof_case_[0] = kSetBallPlacementPosChange;
}
inline void Change::clear_set_ball_placement_pos_change() {
  if (_internal_has_set_ball_placement_pos_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.set_ball_placement_pos_change_;
    }
    clear_has_change();
  }
}
inline ::Change_SetBallPlacementPos* Change::release_set_ball_placement_pos_change() {
  // @@protoc_insertion_point(field_release:Change.set_ball_placement_pos_change)
  if (_internal_has_set_ball_placement_pos_change()) {
    clear_has_change();
    ::Change_SetBallPlacementPos* temp = _impl_.change_.set_ball_placement_pos_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.set_ball_placement_pos_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_SetBallPlacementPos& Change::_internal_set_ball_placement_pos_change() const {
  return _internal_has_set_ball_placement_pos_change()
      ? *_impl_.change_.set_ball_placement_pos_change_
      : reinterpret_cast< ::Change_SetBallPlacementPos&>(::_Change_SetBallPlacementPos_default_instance_);
}
inline const ::Change_SetBallPlacementPos& Change::set_ball_placement_pos_change() const {
  // @@protoc_insertion_point(field_get:Change.set_ball_placement_pos_change)
  return _internal_set_ball_placement_pos_change();
}
inline ::Change_SetBallPlacementPos* Change::unsafe_arena_release_set_ball_placement_pos_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.set_ball_placement_pos_change)
  if (_internal_has_set_ball_placement_pos_change()) {
    clear_has_change();
    ::Change_SetBallPlacementPos* temp = _impl_.change_.set_ball_placement_pos_change_;
    _impl_.change_.set_ball_placement_pos_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_set_ball_placement_pos_change(::Change_SetBallPlacementPos* set_ball_placement_pos_change) {
  clear_change();
  if (set_ball_placement_pos_change) {
    set_has_set_ball_placement_pos_change();
    _impl_.change_.set_ball_placement_pos_change_ = set_ball_placement_pos_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.set_ball_placement_pos_change)
}
inline ::Change_SetBallPlacementPos* Change::_internal_mutable_set_ball_placement_pos_change() {
  if (!_internal_has_set_ball_placement_pos_change()) {
    clear_change();
    set_has_set_ball_placement_pos_change();
    _impl_.change_.set_ball_placement_pos_change_ = CreateMaybeMessage< ::Change_SetBallPlacementPos >(GetArenaForAllocation());
  }
  return _impl_.change_.set_ball_placement_pos_change_;
}
inline ::Change_SetBallPlacementPos* Change::mutable_set_ball_placement_pos_change() {
  ::Change_SetBallPlacementPos* _msg = _internal_mutable_set_ball_placement_pos_change();
  // @@protoc_insertion_point(field_mutable:Change.set_ball_placement_pos_change)
  return _msg;
}

// .Change.AddYellowCard add_yellow_card_change = 5;
inline bool Change::_internal_has_add_yellow_card_change() const {
  return change_case() == kAddYellowCardChange;
}
inline bool Change::has_add_yellow_card_change() const {
  return _internal_has_add_yellow_card_change();
}
inline void Change::set_has_add_yellow_card_change() {
  _impl_._oneof_case_[0] = kAddYellowCardChange;
}
inline void Change::clear_add_yellow_card_change() {
  if (_internal_has_add_yellow_card_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.add_yellow_card_change_;
    }
    clear_has_change();
  }
}
inline ::Change_AddYellowCard* Change::release_add_yellow_card_change() {
  // @@protoc_insertion_point(field_release:Change.add_yellow_card_change)
  if (_internal_has_add_yellow_card_change()) {
    clear_has_change();
    ::Change_AddYellowCard* temp = _impl_.change_.add_yellow_card_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.add_yellow_card_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_AddYellowCard& Change::_internal_add_yellow_card_change() const {
  return _internal_has_add_yellow_card_change()
      ? *_impl_.change_.add_yellow_card_change_
      : reinterpret_cast< ::Change_AddYellowCard&>(::_Change_AddYellowCard_default_instance_);
}
inline const ::Change_AddYellowCard& Change::add_yellow_card_change() const {
  // @@protoc_insertion_point(field_get:Change.add_yellow_card_change)
  return _internal_add_yellow_card_change();
}
inline ::Change_AddYellowCard* Change::unsafe_arena_release_add_yellow_card_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.add_yellow_card_change)
  if (_internal_has_add_yellow_card_change()) {
    clear_has_change();
    ::Change_AddYellowCard* temp = _impl_.change_.add_yellow_card_change_;
    _impl_.change_.add_yellow_card_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_add_yellow_card_change(::Change_AddYellowCard* add_yellow_card_change) {
  clear_change();
  if (add_yellow_card_change) {
    set_has_add_yellow_card_change();
    _impl_.change_.add_yellow_card_change_ = add_yellow_card_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.add_yellow_card_change)
}
inline ::Change_AddYellowCard* Change::_internal_mutable_add_yellow_card_change() {
  if (!_internal_has_add_yellow_card_change()) {
    clear_change();
    set_has_add_yellow_card_change();
    _impl_.change_.add_yellow_card_change_ = CreateMaybeMessage< ::Change_AddYellowCard >(GetArenaForAllocation());
  }
  return _impl_.change_.add_yellow_card_change_;
}
inline ::Change_AddYellowCard* Change::mutable_add_yellow_card_change() {
  ::Change_AddYellowCard* _msg = _internal_mutable_add_yellow_card_change();
  // @@protoc_insertion_point(field_mutable:Change.add_yellow_card_change)
  return _msg;
}

// .Change.AddRedCard add_red_card_change = 6;
inline bool Change::_internal_has_add_red_card_change() const {
  return change_case() == kAddRedCardChange;
}
inline bool Change::has_add_red_card_change() const {
  return _internal_has_add_red_card_change();
}
inline void Change::set_has_add_red_card_change() {
  _impl_._oneof_case_[0] = kAddRedCardChange;
}
inline void Change::clear_add_red_card_change() {
  if (_internal_has_add_red_card_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.add_red_card_change_;
    }
    clear_has_change();
  }
}
inline ::Change_AddRedCard* Change::release_add_red_card_change() {
  // @@protoc_insertion_point(field_release:Change.add_red_card_change)
  if (_internal_has_add_red_card_change()) {
    clear_has_change();
    ::Change_AddRedCard* temp = _impl_.change_.add_red_card_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.add_red_card_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_AddRedCard& Change::_internal_add_red_card_change() const {
  return _internal_has_add_red_card_change()
      ? *_impl_.change_.add_red_card_change_
      : reinterpret_cast< ::Change_AddRedCard&>(::_Change_AddRedCard_default_instance_);
}
inline const ::Change_AddRedCard& Change::add_red_card_change() const {
  // @@protoc_insertion_point(field_get:Change.add_red_card_change)
  return _internal_add_red_card_change();
}
inline ::Change_AddRedCard* Change::unsafe_arena_release_add_red_card_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.add_red_card_change)
  if (_internal_has_add_red_card_change()) {
    clear_has_change();
    ::Change_AddRedCard* temp = _impl_.change_.add_red_card_change_;
    _impl_.change_.add_red_card_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_add_red_card_change(::Change_AddRedCard* add_red_card_change) {
  clear_change();
  if (add_red_card_change) {
    set_has_add_red_card_change();
    _impl_.change_.add_red_card_change_ = add_red_card_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.add_red_card_change)
}
inline ::Change_AddRedCard* Change::_internal_mutable_add_red_card_change() {
  if (!_internal_has_add_red_card_change()) {
    clear_change();
    set_has_add_red_card_change();
    _impl_.change_.add_red_card_change_ = CreateMaybeMessage< ::Change_AddRedCard >(GetArenaForAllocation());
  }
  return _impl_.change_.add_red_card_change_;
}
inline ::Change_AddRedCard* Change::mutable_add_red_card_change() {
  ::Change_AddRedCard* _msg = _internal_mutable_add_red_card_change();
  // @@protoc_insertion_point(field_mutable:Change.add_red_card_change)
  return _msg;
}

// .Change.YellowCardOver yellow_card_over_change = 7;
inline bool Change::_internal_has_yellow_card_over_change() const {
  return change_case() == kYellowCardOverChange;
}
inline bool Change::has_yellow_card_over_change() const {
  return _internal_has_yellow_card_over_change();
}
inline void Change::set_has_yellow_card_over_change() {
  _impl_._oneof_case_[0] = kYellowCardOverChange;
}
inline void Change::clear_yellow_card_over_change() {
  if (_internal_has_yellow_card_over_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.yellow_card_over_change_;
    }
    clear_has_change();
  }
}
inline ::Change_YellowCardOver* Change::release_yellow_card_over_change() {
  // @@protoc_insertion_point(field_release:Change.yellow_card_over_change)
  if (_internal_has_yellow_card_over_change()) {
    clear_has_change();
    ::Change_YellowCardOver* temp = _impl_.change_.yellow_card_over_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.yellow_card_over_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_YellowCardOver& Change::_internal_yellow_card_over_change() const {
  return _internal_has_yellow_card_over_change()
      ? *_impl_.change_.yellow_card_over_change_
      : reinterpret_cast< ::Change_YellowCardOver&>(::_Change_YellowCardOver_default_instance_);
}
inline const ::Change_YellowCardOver& Change::yellow_card_over_change() const {
  // @@protoc_insertion_point(field_get:Change.yellow_card_over_change)
  return _internal_yellow_card_over_change();
}
inline ::Change_YellowCardOver* Change::unsafe_arena_release_yellow_card_over_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.yellow_card_over_change)
  if (_internal_has_yellow_card_over_change()) {
    clear_has_change();
    ::Change_YellowCardOver* temp = _impl_.change_.yellow_card_over_change_;
    _impl_.change_.yellow_card_over_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_yellow_card_over_change(::Change_YellowCardOver* yellow_card_over_change) {
  clear_change();
  if (yellow_card_over_change) {
    set_has_yellow_card_over_change();
    _impl_.change_.yellow_card_over_change_ = yellow_card_over_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.yellow_card_over_change)
}
inline ::Change_YellowCardOver* Change::_internal_mutable_yellow_card_over_change() {
  if (!_internal_has_yellow_card_over_change()) {
    clear_change();
    set_has_yellow_card_over_change();
    _impl_.change_.yellow_card_over_change_ = CreateMaybeMessage< ::Change_YellowCardOver >(GetArenaForAllocation());
  }
  return _impl_.change_.yellow_card_over_change_;
}
inline ::Change_YellowCardOver* Change::mutable_yellow_card_over_change() {
  ::Change_YellowCardOver* _msg = _internal_mutable_yellow_card_over_change();
  // @@protoc_insertion_point(field_mutable:Change.yellow_card_over_change)
  return _msg;
}

// .Change.AddGameEvent add_game_event_change = 8;
inline bool Change::_internal_has_add_game_event_change() const {
  return change_case() == kAddGameEventChange;
}
inline bool Change::has_add_game_event_change() const {
  return _internal_has_add_game_event_change();
}
inline void Change::set_has_add_game_event_change() {
  _impl_._oneof_case_[0] = kAddGameEventChange;
}
inline void Change::clear_add_game_event_change() {
  if (_internal_has_add_game_event_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.add_game_event_change_;
    }
    clear_has_change();
  }
}
inline ::Change_AddGameEvent* Change::release_add_game_event_change() {
  // @@protoc_insertion_point(field_release:Change.add_game_event_change)
  if (_internal_has_add_game_event_change()) {
    clear_has_change();
    ::Change_AddGameEvent* temp = _impl_.change_.add_game_event_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.add_game_event_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_AddGameEvent& Change::_internal_add_game_event_change() const {
  return _internal_has_add_game_event_change()
      ? *_impl_.change_.add_game_event_change_
      : reinterpret_cast< ::Change_AddGameEvent&>(::_Change_AddGameEvent_default_instance_);
}
inline const ::Change_AddGameEvent& Change::add_game_event_change() const {
  // @@protoc_insertion_point(field_get:Change.add_game_event_change)
  return _internal_add_game_event_change();
}
inline ::Change_AddGameEvent* Change::unsafe_arena_release_add_game_event_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.add_game_event_change)
  if (_internal_has_add_game_event_change()) {
    clear_has_change();
    ::Change_AddGameEvent* temp = _impl_.change_.add_game_event_change_;
    _impl_.change_.add_game_event_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_add_game_event_change(::Change_AddGameEvent* add_game_event_change) {
  clear_change();
  if (add_game_event_change) {
    set_has_add_game_event_change();
    _impl_.change_.add_game_event_change_ = add_game_event_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.add_game_event_change)
}
inline ::Change_AddGameEvent* Change::_internal_mutable_add_game_event_change() {
  if (!_internal_has_add_game_event_change()) {
    clear_change();
    set_has_add_game_event_change();
    _impl_.change_.add_game_event_change_ = CreateMaybeMessage< ::Change_AddGameEvent >(GetArenaForAllocation());
  }
  return _impl_.change_.add_game_event_change_;
}
inline ::Change_AddGameEvent* Change::mutable_add_game_event_change() {
  ::Change_AddGameEvent* _msg = _internal_mutable_add_game_event_change();
  // @@protoc_insertion_point(field_mutable:Change.add_game_event_change)
  return _msg;
}

// .Change.AddPassiveGameEvent add_passive_game_event_change = 19;
inline bool Change::_internal_has_add_passive_game_event_change() const {
  return change_case() == kAddPassiveGameEventChange;
}
inline bool Change::has_add_passive_game_event_change() const {
  return _internal_has_add_passive_game_event_change();
}
inline void Change::set_has_add_passive_game_event_change() {
  _impl_._oneof_case_[0] = kAddPassiveGameEventChange;
}
inline void Change::clear_add_passive_game_event_change() {
  if (_internal_has_add_passive_game_event_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.add_passive_game_event_change_;
    }
    clear_has_change();
  }
}
inline ::Change_AddPassiveGameEvent* Change::release_add_passive_game_event_change() {
  // @@protoc_insertion_point(field_release:Change.add_passive_game_event_change)
  if (_internal_has_add_passive_game_event_change()) {
    clear_has_change();
    ::Change_AddPassiveGameEvent* temp = _impl_.change_.add_passive_game_event_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.add_passive_game_event_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_AddPassiveGameEvent& Change::_internal_add_passive_game_event_change() const {
  return _internal_has_add_passive_game_event_change()
      ? *_impl_.change_.add_passive_game_event_change_
      : reinterpret_cast< ::Change_AddPassiveGameEvent&>(::_Change_AddPassiveGameEvent_default_instance_);
}
inline const ::Change_AddPassiveGameEvent& Change::add_passive_game_event_change() const {
  // @@protoc_insertion_point(field_get:Change.add_passive_game_event_change)
  return _internal_add_passive_game_event_change();
}
inline ::Change_AddPassiveGameEvent* Change::unsafe_arena_release_add_passive_game_event_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.add_passive_game_event_change)
  if (_internal_has_add_passive_game_event_change()) {
    clear_has_change();
    ::Change_AddPassiveGameEvent* temp = _impl_.change_.add_passive_game_event_change_;
    _impl_.change_.add_passive_game_event_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_add_passive_game_event_change(::Change_AddPassiveGameEvent* add_passive_game_event_change) {
  clear_change();
  if (add_passive_game_event_change) {
    set_has_add_passive_game_event_change();
    _impl_.change_.add_passive_game_event_change_ = add_passive_game_event_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.add_passive_game_event_change)
}
inline ::Change_AddPassiveGameEvent* Change::_internal_mutable_add_passive_game_event_change() {
  if (!_internal_has_add_passive_game_event_change()) {
    clear_change();
    set_has_add_passive_game_event_change();
    _impl_.change_.add_passive_game_event_change_ = CreateMaybeMessage< ::Change_AddPassiveGameEvent >(GetArenaForAllocation());
  }
  return _impl_.change_.add_passive_game_event_change_;
}
inline ::Change_AddPassiveGameEvent* Change::mutable_add_passive_game_event_change() {
  ::Change_AddPassiveGameEvent* _msg = _internal_mutable_add_passive_game_event_change();
  // @@protoc_insertion_point(field_mutable:Change.add_passive_game_event_change)
  return _msg;
}

// .Change.AddProposal add_proposal_change = 9;
inline bool Change::_internal_has_add_proposal_change() const {
  return change_case() == kAddProposalChange;
}
inline bool Change::has_add_proposal_change() const {
  return _internal_has_add_proposal_change();
}
inline void Change::set_has_add_proposal_change() {
  _impl_._oneof_case_[0] = kAddProposalChange;
}
inline void Change::clear_add_proposal_change() {
  if (_internal_has_add_proposal_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.add_proposal_change_;
    }
    clear_has_change();
  }
}
inline ::Change_AddProposal* Change::release_add_proposal_change() {
  // @@protoc_insertion_point(field_release:Change.add_proposal_change)
  if (_internal_has_add_proposal_change()) {
    clear_has_change();
    ::Change_AddProposal* temp = _impl_.change_.add_proposal_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.add_proposal_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_AddProposal& Change::_internal_add_proposal_change() const {
  return _internal_has_add_proposal_change()
      ? *_impl_.change_.add_proposal_change_
      : reinterpret_cast< ::Change_AddProposal&>(::_Change_AddProposal_default_instance_);
}
inline const ::Change_AddProposal& Change::add_proposal_change() const {
  // @@protoc_insertion_point(field_get:Change.add_proposal_change)
  return _internal_add_proposal_change();
}
inline ::Change_AddProposal* Change::unsafe_arena_release_add_proposal_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.add_proposal_change)
  if (_internal_has_add_proposal_change()) {
    clear_has_change();
    ::Change_AddProposal* temp = _impl_.change_.add_proposal_change_;
    _impl_.change_.add_proposal_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_add_proposal_change(::Change_AddProposal* add_proposal_change) {
  clear_change();
  if (add_proposal_change) {
    set_has_add_proposal_change();
    _impl_.change_.add_proposal_change_ = add_proposal_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.add_proposal_change)
}
inline ::Change_AddProposal* Change::_internal_mutable_add_proposal_change() {
  if (!_internal_has_add_proposal_change()) {
    clear_change();
    set_has_add_proposal_change();
    _impl_.change_.add_proposal_change_ = CreateMaybeMessage< ::Change_AddProposal >(GetArenaForAllocation());
  }
  return _impl_.change_.add_proposal_change_;
}
inline ::Change_AddProposal* Change::mutable_add_proposal_change() {
  ::Change_AddProposal* _msg = _internal_mutable_add_proposal_change();
  // @@protoc_insertion_point(field_mutable:Change.add_proposal_change)
  return _msg;
}

// .Change.UpdateConfig update_config_change = 12;
inline bool Change::_internal_has_update_config_change() const {
  return change_case() == kUpdateConfigChange;
}
inline bool Change::has_update_config_change() const {
  return _internal_has_update_config_change();
}
inline void Change::set_has_update_config_change() {
  _impl_._oneof_case_[0] = kUpdateConfigChange;
}
inline void Change::clear_update_config_change() {
  if (_internal_has_update_config_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.update_config_change_;
    }
    clear_has_change();
  }
}
inline ::Change_UpdateConfig* Change::release_update_config_change() {
  // @@protoc_insertion_point(field_release:Change.update_config_change)
  if (_internal_has_update_config_change()) {
    clear_has_change();
    ::Change_UpdateConfig* temp = _impl_.change_.update_config_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.update_config_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_UpdateConfig& Change::_internal_update_config_change() const {
  return _internal_has_update_config_change()
      ? *_impl_.change_.update_config_change_
      : reinterpret_cast< ::Change_UpdateConfig&>(::_Change_UpdateConfig_default_instance_);
}
inline const ::Change_UpdateConfig& Change::update_config_change() const {
  // @@protoc_insertion_point(field_get:Change.update_config_change)
  return _internal_update_config_change();
}
inline ::Change_UpdateConfig* Change::unsafe_arena_release_update_config_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.update_config_change)
  if (_internal_has_update_config_change()) {
    clear_has_change();
    ::Change_UpdateConfig* temp = _impl_.change_.update_config_change_;
    _impl_.change_.update_config_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_update_config_change(::Change_UpdateConfig* update_config_change) {
  clear_change();
  if (update_config_change) {
    set_has_update_config_change();
    _impl_.change_.update_config_change_ = update_config_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.update_config_change)
}
inline ::Change_UpdateConfig* Change::_internal_mutable_update_config_change() {
  if (!_internal_has_update_config_change()) {
    clear_change();
    set_has_update_config_change();
    _impl_.change_.update_config_change_ = CreateMaybeMessage< ::Change_UpdateConfig >(GetArenaForAllocation());
  }
  return _impl_.change_.update_config_change_;
}
inline ::Change_UpdateConfig* Change::mutable_update_config_change() {
  ::Change_UpdateConfig* _msg = _internal_mutable_update_config_change();
  // @@protoc_insertion_point(field_mutable:Change.update_config_change)
  return _msg;
}

// .Change.UpdateTeamState update_team_state_change = 13;
inline bool Change::_internal_has_update_team_state_change() const {
  return change_case() == kUpdateTeamStateChange;
}
inline bool Change::has_update_team_state_change() const {
  return _internal_has_update_team_state_change();
}
inline void Change::set_has_update_team_state_change() {
  _impl_._oneof_case_[0] = kUpdateTeamStateChange;
}
inline void Change::clear_update_team_state_change() {
  if (_internal_has_update_team_state_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.update_team_state_change_;
    }
    clear_has_change();
  }
}
inline ::Change_UpdateTeamState* Change::release_update_team_state_change() {
  // @@protoc_insertion_point(field_release:Change.update_team_state_change)
  if (_internal_has_update_team_state_change()) {
    clear_has_change();
    ::Change_UpdateTeamState* temp = _impl_.change_.update_team_state_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.update_team_state_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_UpdateTeamState& Change::_internal_update_team_state_change() const {
  return _internal_has_update_team_state_change()
      ? *_impl_.change_.update_team_state_change_
      : reinterpret_cast< ::Change_UpdateTeamState&>(::_Change_UpdateTeamState_default_instance_);
}
inline const ::Change_UpdateTeamState& Change::update_team_state_change() const {
  // @@protoc_insertion_point(field_get:Change.update_team_state_change)
  return _internal_update_team_state_change();
}
inline ::Change_UpdateTeamState* Change::unsafe_arena_release_update_team_state_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.update_team_state_change)
  if (_internal_has_update_team_state_change()) {
    clear_has_change();
    ::Change_UpdateTeamState* temp = _impl_.change_.update_team_state_change_;
    _impl_.change_.update_team_state_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_update_team_state_change(::Change_UpdateTeamState* update_team_state_change) {
  clear_change();
  if (update_team_state_change) {
    set_has_update_team_state_change();
    _impl_.change_.update_team_state_change_ = update_team_state_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.update_team_state_change)
}
inline ::Change_UpdateTeamState* Change::_internal_mutable_update_team_state_change() {
  if (!_internal_has_update_team_state_change()) {
    clear_change();
    set_has_update_team_state_change();
    _impl_.change_.update_team_state_change_ = CreateMaybeMessage< ::Change_UpdateTeamState >(GetArenaForAllocation());
  }
  return _impl_.change_.update_team_state_change_;
}
inline ::Change_UpdateTeamState* Change::mutable_update_team_state_change() {
  ::Change_UpdateTeamState* _msg = _internal_mutable_update_team_state_change();
  // @@protoc_insertion_point(field_mutable:Change.update_team_state_change)
  return _msg;
}

// .Change.SwitchColors switch_colors_change = 14;
inline bool Change::_internal_has_switch_colors_change() const {
  return change_case() == kSwitchColorsChange;
}
inline bool Change::has_switch_colors_change() const {
  return _internal_has_switch_colors_change();
}
inline void Change::set_has_switch_colors_change() {
  _impl_._oneof_case_[0] = kSwitchColorsChange;
}
inline void Change::clear_switch_colors_change() {
  if (_internal_has_switch_colors_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.switch_colors_change_;
    }
    clear_has_change();
  }
}
inline ::Change_SwitchColors* Change::release_switch_colors_change() {
  // @@protoc_insertion_point(field_release:Change.switch_colors_change)
  if (_internal_has_switch_colors_change()) {
    clear_has_change();
    ::Change_SwitchColors* temp = _impl_.change_.switch_colors_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.switch_colors_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_SwitchColors& Change::_internal_switch_colors_change() const {
  return _internal_has_switch_colors_change()
      ? *_impl_.change_.switch_colors_change_
      : reinterpret_cast< ::Change_SwitchColors&>(::_Change_SwitchColors_default_instance_);
}
inline const ::Change_SwitchColors& Change::switch_colors_change() const {
  // @@protoc_insertion_point(field_get:Change.switch_colors_change)
  return _internal_switch_colors_change();
}
inline ::Change_SwitchColors* Change::unsafe_arena_release_switch_colors_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.switch_colors_change)
  if (_internal_has_switch_colors_change()) {
    clear_has_change();
    ::Change_SwitchColors* temp = _impl_.change_.switch_colors_change_;
    _impl_.change_.switch_colors_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_switch_colors_change(::Change_SwitchColors* switch_colors_change) {
  clear_change();
  if (switch_colors_change) {
    set_has_switch_colors_change();
    _impl_.change_.switch_colors_change_ = switch_colors_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.switch_colors_change)
}
inline ::Change_SwitchColors* Change::_internal_mutable_switch_colors_change() {
  if (!_internal_has_switch_colors_change()) {
    clear_change();
    set_has_switch_colors_change();
    _impl_.change_.switch_colors_change_ = CreateMaybeMessage< ::Change_SwitchColors >(GetArenaForAllocation());
  }
  return _impl_.change_.switch_colors_change_;
}
inline ::Change_SwitchColors* Change::mutable_switch_colors_change() {
  ::Change_SwitchColors* _msg = _internal_mutable_switch_colors_change();
  // @@protoc_insertion_point(field_mutable:Change.switch_colors_change)
  return _msg;
}

// .Change.Revert revert_change = 15;
inline bool Change::_internal_has_revert_change() const {
  return change_case() == kRevertChange;
}
inline bool Change::has_revert_change() const {
  return _internal_has_revert_change();
}
inline void Change::set_has_revert_change() {
  _impl_._oneof_case_[0] = kRevertChange;
}
inline void Change::clear_revert_change() {
  if (_internal_has_revert_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.revert_change_;
    }
    clear_has_change();
  }
}
inline ::Change_Revert* Change::release_revert_change() {
  // @@protoc_insertion_point(field_release:Change.revert_change)
  if (_internal_has_revert_change()) {
    clear_has_change();
    ::Change_Revert* temp = _impl_.change_.revert_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.revert_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_Revert& Change::_internal_revert_change() const {
  return _internal_has_revert_change()
      ? *_impl_.change_.revert_change_
      : reinterpret_cast< ::Change_Revert&>(::_Change_Revert_default_instance_);
}
inline const ::Change_Revert& Change::revert_change() const {
  // @@protoc_insertion_point(field_get:Change.revert_change)
  return _internal_revert_change();
}
inline ::Change_Revert* Change::unsafe_arena_release_revert_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.revert_change)
  if (_internal_has_revert_change()) {
    clear_has_change();
    ::Change_Revert* temp = _impl_.change_.revert_change_;
    _impl_.change_.revert_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_revert_change(::Change_Revert* revert_change) {
  clear_change();
  if (revert_change) {
    set_has_revert_change();
    _impl_.change_.revert_change_ = revert_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.revert_change)
}
inline ::Change_Revert* Change::_internal_mutable_revert_change() {
  if (!_internal_has_revert_change()) {
    clear_change();
    set_has_revert_change();
    _impl_.change_.revert_change_ = CreateMaybeMessage< ::Change_Revert >(GetArenaForAllocation());
  }
  return _impl_.change_.revert_change_;
}
inline ::Change_Revert* Change::mutable_revert_change() {
  ::Change_Revert* _msg = _internal_mutable_revert_change();
  // @@protoc_insertion_point(field_mutable:Change.revert_change)
  return _msg;
}

// .Change.NewGameState new_game_state_change = 17;
inline bool Change::_internal_has_new_game_state_change() const {
  return change_case() == kNewGameStateChange;
}
inline bool Change::has_new_game_state_change() const {
  return _internal_has_new_game_state_change();
}
inline void Change::set_has_new_game_state_change() {
  _impl_._oneof_case_[0] = kNewGameStateChange;
}
inline void Change::clear_new_game_state_change() {
  if (_internal_has_new_game_state_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.new_game_state_change_;
    }
    clear_has_change();
  }
}
inline ::Change_NewGameState* Change::release_new_game_state_change() {
  // @@protoc_insertion_point(field_release:Change.new_game_state_change)
  if (_internal_has_new_game_state_change()) {
    clear_has_change();
    ::Change_NewGameState* temp = _impl_.change_.new_game_state_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.new_game_state_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_NewGameState& Change::_internal_new_game_state_change() const {
  return _internal_has_new_game_state_change()
      ? *_impl_.change_.new_game_state_change_
      : reinterpret_cast< ::Change_NewGameState&>(::_Change_NewGameState_default_instance_);
}
inline const ::Change_NewGameState& Change::new_game_state_change() const {
  // @@protoc_insertion_point(field_get:Change.new_game_state_change)
  return _internal_new_game_state_change();
}
inline ::Change_NewGameState* Change::unsafe_arena_release_new_game_state_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.new_game_state_change)
  if (_internal_has_new_game_state_change()) {
    clear_has_change();
    ::Change_NewGameState* temp = _impl_.change_.new_game_state_change_;
    _impl_.change_.new_game_state_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_new_game_state_change(::Change_NewGameState* new_game_state_change) {
  clear_change();
  if (new_game_state_change) {
    set_has_new_game_state_change();
    _impl_.change_.new_game_state_change_ = new_game_state_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.new_game_state_change)
}
inline ::Change_NewGameState* Change::_internal_mutable_new_game_state_change() {
  if (!_internal_has_new_game_state_change()) {
    clear_change();
    set_has_new_game_state_change();
    _impl_.change_.new_game_state_change_ = CreateMaybeMessage< ::Change_NewGameState >(GetArenaForAllocation());
  }
  return _impl_.change_.new_game_state_change_;
}
inline ::Change_NewGameState* Change::mutable_new_game_state_change() {
  ::Change_NewGameState* _msg = _internal_mutable_new_game_state_change();
  // @@protoc_insertion_point(field_mutable:Change.new_game_state_change)
  return _msg;
}

// .Change.AcceptProposalGroup accept_proposal_group_change = 18;
inline bool Change::_internal_has_accept_proposal_group_change() const {
  return change_case() == kAcceptProposalGroupChange;
}
inline bool Change::has_accept_proposal_group_change() const {
  return _internal_has_accept_proposal_group_change();
}
inline void Change::set_has_accept_proposal_group_change() {
  _impl_._oneof_case_[0] = kAcceptProposalGroupChange;
}
inline void Change::clear_accept_proposal_group_change() {
  if (_internal_has_accept_proposal_group_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.accept_proposal_group_change_;
    }
    clear_has_change();
  }
}
inline ::Change_AcceptProposalGroup* Change::release_accept_proposal_group_change() {
  // @@protoc_insertion_point(field_release:Change.accept_proposal_group_change)
  if (_internal_has_accept_proposal_group_change()) {
    clear_has_change();
    ::Change_AcceptProposalGroup* temp = _impl_.change_.accept_proposal_group_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.accept_proposal_group_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_AcceptProposalGroup& Change::_internal_accept_proposal_group_change() const {
  return _internal_has_accept_proposal_group_change()
      ? *_impl_.change_.accept_proposal_group_change_
      : reinterpret_cast< ::Change_AcceptProposalGroup&>(::_Change_AcceptProposalGroup_default_instance_);
}
inline const ::Change_AcceptProposalGroup& Change::accept_proposal_group_change() const {
  // @@protoc_insertion_point(field_get:Change.accept_proposal_group_change)
  return _internal_accept_proposal_group_change();
}
inline ::Change_AcceptProposalGroup* Change::unsafe_arena_release_accept_proposal_group_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.accept_proposal_group_change)
  if (_internal_has_accept_proposal_group_change()) {
    clear_has_change();
    ::Change_AcceptProposalGroup* temp = _impl_.change_.accept_proposal_group_change_;
    _impl_.change_.accept_proposal_group_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_accept_proposal_group_change(::Change_AcceptProposalGroup* accept_proposal_group_change) {
  clear_change();
  if (accept_proposal_group_change) {
    set_has_accept_proposal_group_change();
    _impl_.change_.accept_proposal_group_change_ = accept_proposal_group_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.accept_proposal_group_change)
}
inline ::Change_AcceptProposalGroup* Change::_internal_mutable_accept_proposal_group_change() {
  if (!_internal_has_accept_proposal_group_change()) {
    clear_change();
    set_has_accept_proposal_group_change();
    _impl_.change_.accept_proposal_group_change_ = CreateMaybeMessage< ::Change_AcceptProposalGroup >(GetArenaForAllocation());
  }
  return _impl_.change_.accept_proposal_group_change_;
}
inline ::Change_AcceptProposalGroup* Change::mutable_accept_proposal_group_change() {
  ::Change_AcceptProposalGroup* _msg = _internal_mutable_accept_proposal_group_change();
  // @@protoc_insertion_point(field_mutable:Change.accept_proposal_group_change)
  return _msg;
}

// .Change.SetStatusMessage set_status_message_change = 20;
inline bool Change::_internal_has_set_status_message_change() const {
  return change_case() == kSetStatusMessageChange;
}
inline bool Change::has_set_status_message_change() const {
  return _internal_has_set_status_message_change();
}
inline void Change::set_has_set_status_message_change() {
  _impl_._oneof_case_[0] = kSetStatusMessageChange;
}
inline void Change::clear_set_status_message_change() {
  if (_internal_has_set_status_message_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.change_.set_status_message_change_;
    }
    clear_has_change();
  }
}
inline ::Change_SetStatusMessage* Change::release_set_status_message_change() {
  // @@protoc_insertion_point(field_release:Change.set_status_message_change)
  if (_internal_has_set_status_message_change()) {
    clear_has_change();
    ::Change_SetStatusMessage* temp = _impl_.change_.set_status_message_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.change_.set_status_message_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Change_SetStatusMessage& Change::_internal_set_status_message_change() const {
  return _internal_has_set_status_message_change()
      ? *_impl_.change_.set_status_message_change_
      : reinterpret_cast< ::Change_SetStatusMessage&>(::_Change_SetStatusMessage_default_instance_);
}
inline const ::Change_SetStatusMessage& Change::set_status_message_change() const {
  // @@protoc_insertion_point(field_get:Change.set_status_message_change)
  return _internal_set_status_message_change();
}
inline ::Change_SetStatusMessage* Change::unsafe_arena_release_set_status_message_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Change.set_status_message_change)
  if (_internal_has_set_status_message_change()) {
    clear_has_change();
    ::Change_SetStatusMessage* temp = _impl_.change_.set_status_message_change_;
    _impl_.change_.set_status_message_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Change::unsafe_arena_set_allocated_set_status_message_change(::Change_SetStatusMessage* set_status_message_change) {
  clear_change();
  if (set_status_message_change) {
    set_has_set_status_message_change();
    _impl_.change_.set_status_message_change_ = set_status_message_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Change.set_status_message_change)
}
inline ::Change_SetStatusMessage* Change::_internal_mutable_set_status_message_change() {
  if (!_internal_has_set_status_message_change()) {
    clear_change();
    set_has_set_status_message_change();
    _impl_.change_.set_status_message_change_ = CreateMaybeMessage< ::Change_SetStatusMessage >(GetArenaForAllocation());
  }
  return _impl_.change_.set_status_message_change_;
}
inline ::Change_SetStatusMessage* Change::mutable_set_status_message_change() {
  ::Change_SetStatusMessage* _msg = _internal_mutable_set_status_message_change();
  // @@protoc_insertion_point(field_mutable:Change.set_status_message_change)
  return _msg;
}

inline bool Change::has_change() const {
  return change_case() != CHANGE_NOT_SET;
}
inline void Change::clear_has_change() {
  _impl_._oneof_case_[0] = CHANGE_NOT_SET;
}
inline Change::ChangeCase Change::change_case() const {
  return Change::ChangeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_statemachine_2fssl_5fgc_5fchange_2eproto
