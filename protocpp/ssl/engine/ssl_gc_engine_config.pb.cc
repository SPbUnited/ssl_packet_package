// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine/ssl_gc_engine_config.proto

#include "engine/ssl_gc_engine_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Config_GameEventBehaviorEntry_DoNotUse::Config_GameEventBehaviorEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Config_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Config_GameEventBehaviorEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal _Config_GameEventBehaviorEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Config_AutoRefConfigsEntry_DoNotUse::Config_AutoRefConfigsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Config_AutoRefConfigsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_AutoRefConfigsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_AutoRefConfigsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Config_AutoRefConfigsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_AutoRefConfigsEntry_DoNotUseDefaultTypeInternal _Config_AutoRefConfigsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_event_behavior_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.auto_ref_configs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_.active_tracker_source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auto_continue_)*/false} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
PROTOBUF_CONSTEXPR AutoRefConfig_GameEventBehaviorEntry_DoNotUse::AutoRefConfig_GameEventBehaviorEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AutoRefConfig_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoRefConfig_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoRefConfig_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AutoRefConfig_GameEventBehaviorEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoRefConfig_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal _AutoRefConfig_GameEventBehaviorEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AutoRefConfig::AutoRefConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_event_behavior_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AutoRefConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoRefConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoRefConfigDefaultTypeInternal() {}
  union {
    AutoRefConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoRefConfigDefaultTypeInternal _AutoRefConfig_default_instance_;
static ::_pb::Metadata file_level_metadata_engine_2fssl_5fgc_5fengine_5fconfig_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_engine_2fssl_5fgc_5fengine_5fconfig_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_engine_2fssl_5fgc_5fengine_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_engine_2fssl_5fgc_5fengine_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Config_GameEventBehaviorEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Config_GameEventBehaviorEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Config_GameEventBehaviorEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Config_GameEventBehaviorEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Config_AutoRefConfigsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Config_AutoRefConfigsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Config_AutoRefConfigsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Config_AutoRefConfigsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Config, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Config, _impl_.game_event_behavior_),
  PROTOBUF_FIELD_OFFSET(::Config, _impl_.auto_ref_configs_),
  PROTOBUF_FIELD_OFFSET(::Config, _impl_.active_tracker_source_),
  PROTOBUF_FIELD_OFFSET(::Config, _impl_.teams_),
  PROTOBUF_FIELD_OFFSET(::Config, _impl_.auto_continue_),
  ~0u,
  ~0u,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig_GameEventBehaviorEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig_GameEventBehaviorEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig_GameEventBehaviorEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig_GameEventBehaviorEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig, _impl_.game_event_behavior_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::Config_GameEventBehaviorEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::Config_AutoRefConfigsEntry_DoNotUse)},
  { 20, 31, -1, sizeof(::Config)},
  { 36, 44, -1, sizeof(::AutoRefConfig_GameEventBehaviorEntry_DoNotUse)},
  { 46, -1, -1, sizeof(::AutoRefConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Config_GameEventBehaviorEntry_DoNotUse_default_instance_._instance,
  &::_Config_AutoRefConfigsEntry_DoNotUse_default_instance_._instance,
  &::_Config_default_instance_._instance,
  &::_AutoRefConfig_GameEventBehaviorEntry_DoNotUse_default_instance_._instance,
  &::_AutoRefConfig_default_instance_._instance,
};

const char descriptor_table_protodef_engine_2fssl_5fgc_5fengine_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!engine/ssl_gc_engine_config.proto\"\354\003\n\006"
  "Config\022;\n\023game_event_behavior\030\001 \003(\0132\036.Co"
  "nfig.GameEventBehaviorEntry\0225\n\020auto_ref_"
  "configs\030\002 \003(\0132\033.Config.AutoRefConfigsEnt"
  "ry\022\035\n\025active_tracker_source\030\003 \001(\t\022\r\n\005tea"
  "ms\030\004 \003(\t\022\025\n\rauto_continue\030\005 \001(\010\032J\n\026GameE"
  "ventBehaviorEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030"
  "\002 \001(\0162\020.Config.Behavior:\0028\001\032E\n\023AutoRefCo"
  "nfigsEntry\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016"
  ".AutoRefConfig:\0028\001\"\225\001\n\010Behavior\022\024\n\020BEHAV"
  "IOR_UNKNOWN\020\000\022\023\n\017BEHAVIOR_ACCEPT\020\001\022\034\n\030BE"
  "HAVIOR_ACCEPT_MAJORITY\020\002\022\031\n\025BEHAVIOR_PRO"
  "POSE_ONLY\020\003\022\020\n\014BEHAVIOR_LOG\020\004\022\023\n\017BEHAVIO"
  "R_IGNORE\020\005\"\204\002\n\rAutoRefConfig\022B\n\023game_eve"
  "nt_behavior\030\001 \003(\0132%.AutoRefConfig.GameEv"
  "entBehaviorEntry\032Q\n\026GameEventBehaviorEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\0162\027.AutoRef"
  "Config.Behavior:\0028\001\"\\\n\010Behavior\022\024\n\020BEHAV"
  "IOR_UNKNOWN\020\000\022\023\n\017BEHAVIOR_ACCEPT\020\001\022\020\n\014BE"
  "HAVIOR_LOG\020\002\022\023\n\017BEHAVIOR_IGNORE\020\003"
  ;
static ::_pbi::once_flag descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto = {
    false, false, 793, descriptor_table_protodef_engine_2fssl_5fgc_5fengine_5fconfig_2eproto,
    "engine/ssl_gc_engine_config.proto",
    &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_engine_2fssl_5fgc_5fengine_5fconfig_2eproto::offsets,
    file_level_metadata_engine_2fssl_5fgc_5fengine_5fconfig_2eproto, file_level_enum_descriptors_engine_2fssl_5fgc_5fengine_5fconfig_2eproto,
    file_level_service_descriptors_engine_2fssl_5fgc_5fengine_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_getter() {
  return &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_engine_2fssl_5fgc_5fengine_5fconfig_2eproto(&descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_Behavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto);
  return file_level_enum_descriptors_engine_2fssl_5fgc_5fengine_5fconfig_2eproto[0];
}
bool Config_Behavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Config_Behavior Config::BEHAVIOR_UNKNOWN;
constexpr Config_Behavior Config::BEHAVIOR_ACCEPT;
constexpr Config_Behavior Config::BEHAVIOR_ACCEPT_MAJORITY;
constexpr Config_Behavior Config::BEHAVIOR_PROPOSE_ONLY;
constexpr Config_Behavior Config::BEHAVIOR_LOG;
constexpr Config_Behavior Config::BEHAVIOR_IGNORE;
constexpr Config_Behavior Config::Behavior_MIN;
constexpr Config_Behavior Config::Behavior_MAX;
constexpr int Config::Behavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutoRefConfig_Behavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto);
  return file_level_enum_descriptors_engine_2fssl_5fgc_5fengine_5fconfig_2eproto[1];
}
bool AutoRefConfig_Behavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AutoRefConfig_Behavior AutoRefConfig::BEHAVIOR_UNKNOWN;
constexpr AutoRefConfig_Behavior AutoRefConfig::BEHAVIOR_ACCEPT;
constexpr AutoRefConfig_Behavior AutoRefConfig::BEHAVIOR_LOG;
constexpr AutoRefConfig_Behavior AutoRefConfig::BEHAVIOR_IGNORE;
constexpr AutoRefConfig_Behavior AutoRefConfig::Behavior_MIN;
constexpr AutoRefConfig_Behavior AutoRefConfig::Behavior_MAX;
constexpr int AutoRefConfig::Behavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

Config_GameEventBehaviorEntry_DoNotUse::Config_GameEventBehaviorEntry_DoNotUse() {}
Config_GameEventBehaviorEntry_DoNotUse::Config_GameEventBehaviorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Config_GameEventBehaviorEntry_DoNotUse::MergeFrom(const Config_GameEventBehaviorEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Config_GameEventBehaviorEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_5fconfig_2eproto[0]);
}

// ===================================================================

Config_AutoRefConfigsEntry_DoNotUse::Config_AutoRefConfigsEntry_DoNotUse() {}
Config_AutoRefConfigsEntry_DoNotUse::Config_AutoRefConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Config_AutoRefConfigsEntry_DoNotUse::MergeFrom(const Config_AutoRefConfigsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Config_AutoRefConfigsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_5fconfig_2eproto[1]);
}

// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static void set_has_active_tracker_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auto_continue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Config::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Config* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.game_event_behavior_)*/{}
    , /*decltype(_impl_.auto_ref_configs_)*/{}
    , decltype(_impl_.teams_){from._impl_.teams_}
    , decltype(_impl_.active_tracker_source_){}
    , decltype(_impl_.auto_continue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.game_event_behavior_.MergeFrom(from._impl_.game_event_behavior_);
  _this->_impl_.auto_ref_configs_.MergeFrom(from._impl_.auto_ref_configs_);
  _impl_.active_tracker_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.active_tracker_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_active_tracker_source()) {
    _this->_impl_.active_tracker_source_.Set(from._internal_active_tracker_source(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.auto_continue_ = from._impl_.auto_continue_;
  // @@protoc_insertion_point(copy_constructor:Config)
}

inline void Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.game_event_behavior_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.auto_ref_configs_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.teams_){arena}
    , decltype(_impl_.active_tracker_source_){}
    , decltype(_impl_.auto_continue_){false}
  };
  _impl_.active_tracker_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.active_tracker_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_event_behavior_.Destruct();
  _impl_.game_event_behavior_.~MapField();
  _impl_.auto_ref_configs_.Destruct();
  _impl_.auto_ref_configs_.~MapField();
  _impl_.teams_.~RepeatedPtrField();
  _impl_.active_tracker_source_.Destroy();
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  _this->_impl_.game_event_behavior_.Destruct();
  _this->_impl_.auto_ref_configs_.Destruct();
}
void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_event_behavior_.Clear();
  _impl_.auto_ref_configs_.Clear();
  _impl_.teams_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.active_tracker_source_.ClearNonDefaultToEmpty();
  }
  _impl_.auto_continue_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .Config.Behavior> game_event_behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&_impl_.game_event_behavior_, ::Config_Behavior_IsValid, 1, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .AutoRefConfig> auto_ref_configs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.auto_ref_configs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string active_tracker_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_active_tracker_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Config.active_tracker_source");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string teams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_teams();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "Config.teams");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_continue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_auto_continue(&has_bits);
          _impl_.auto_continue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .Config.Behavior> game_event_behavior = 1;
  if (!this->_internal_game_event_behavior().empty()) {
    using MapType = ::_pb::Map<std::string, ::Config_Behavior>;
    using WireHelper = Config_GameEventBehaviorEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_game_event_behavior();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Config.GameEventBehaviorEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .AutoRefConfig> auto_ref_configs = 2;
  if (!this->_internal_auto_ref_configs().empty()) {
    using MapType = ::_pb::Map<std::string, ::AutoRefConfig>;
    using WireHelper = Config_AutoRefConfigsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_auto_ref_configs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "Config.AutoRefConfigsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string active_tracker_source = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_active_tracker_source().data(), static_cast<int>(this->_internal_active_tracker_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Config.active_tracker_source");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_active_tracker_source(), target);
  }

  // repeated string teams = 4;
  for (int i = 0, n = this->_internal_teams_size(); i < n; i++) {
    const auto& s = this->_internal_teams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Config.teams");
    target = stream->WriteString(4, s, target);
  }

  // optional bool auto_continue = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_auto_continue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Config.Behavior> game_event_behavior = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_game_event_behavior_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >::const_iterator
      it = this->_internal_game_event_behavior().begin();
      it != this->_internal_game_event_behavior().end(); ++it) {
    total_size += Config_GameEventBehaviorEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .AutoRefConfig> auto_ref_configs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_auto_ref_configs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >::const_iterator
      it = this->_internal_auto_ref_configs().begin();
      it != this->_internal_auto_ref_configs().end(); ++it) {
    total_size += Config_AutoRefConfigsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string teams = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.teams_.size());
  for (int i = 0, n = _impl_.teams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.teams_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string active_tracker_source = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_active_tracker_source());
    }

    // optional bool auto_continue = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }


void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Config)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.game_event_behavior_.MergeFrom(from._impl_.game_event_behavior_);
  _this->_impl_.auto_ref_configs_.MergeFrom(from._impl_.auto_ref_configs_);
  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_active_tracker_source(from._internal_active_tracker_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.auto_continue_ = from._impl_.auto_continue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.game_event_behavior_.InternalSwap(&other->_impl_.game_event_behavior_);
  _impl_.auto_ref_configs_.InternalSwap(&other->_impl_.auto_ref_configs_);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.active_tracker_source_, lhs_arena,
      &other->_impl_.active_tracker_source_, rhs_arena
  );
  swap(_impl_.auto_continue_, other->_impl_.auto_continue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_5fconfig_2eproto[2]);
}

// ===================================================================

AutoRefConfig_GameEventBehaviorEntry_DoNotUse::AutoRefConfig_GameEventBehaviorEntry_DoNotUse() {}
AutoRefConfig_GameEventBehaviorEntry_DoNotUse::AutoRefConfig_GameEventBehaviorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AutoRefConfig_GameEventBehaviorEntry_DoNotUse::MergeFrom(const AutoRefConfig_GameEventBehaviorEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AutoRefConfig_GameEventBehaviorEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_5fconfig_2eproto[3]);
}

// ===================================================================

class AutoRefConfig::_Internal {
 public:
};

AutoRefConfig::AutoRefConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AutoRefConfig::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:AutoRefConfig)
}
AutoRefConfig::AutoRefConfig(const AutoRefConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutoRefConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.game_event_behavior_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.game_event_behavior_.MergeFrom(from._impl_.game_event_behavior_);
  // @@protoc_insertion_point(copy_constructor:AutoRefConfig)
}

inline void AutoRefConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.game_event_behavior_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AutoRefConfig::~AutoRefConfig() {
  // @@protoc_insertion_point(destructor:AutoRefConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AutoRefConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_event_behavior_.Destruct();
  _impl_.game_event_behavior_.~MapField();
}

void AutoRefConfig::ArenaDtor(void* object) {
  AutoRefConfig* _this = reinterpret_cast< AutoRefConfig* >(object);
  _this->_impl_.game_event_behavior_.Destruct();
}
void AutoRefConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoRefConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_event_behavior_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .AutoRefConfig.Behavior> game_event_behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&_impl_.game_event_behavior_, ::AutoRefConfig_Behavior_IsValid, 1, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoRefConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .AutoRefConfig.Behavior> game_event_behavior = 1;
  if (!this->_internal_game_event_behavior().empty()) {
    using MapType = ::_pb::Map<std::string, ::AutoRefConfig_Behavior>;
    using WireHelper = AutoRefConfig_GameEventBehaviorEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_game_event_behavior();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "AutoRefConfig.GameEventBehaviorEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefConfig)
  return target;
}

size_t AutoRefConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .AutoRefConfig.Behavior> game_event_behavior = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_game_event_behavior_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >::const_iterator
      it = this->_internal_game_event_behavior().begin();
      it != this->_internal_game_event_behavior().end(); ++it) {
    total_size += AutoRefConfig_GameEventBehaviorEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoRefConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutoRefConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoRefConfig::GetClassData() const { return &_class_data_; }


void AutoRefConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutoRefConfig*>(&to_msg);
  auto& from = static_cast<const AutoRefConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AutoRefConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.game_event_behavior_.MergeFrom(from._impl_.game_event_behavior_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoRefConfig::CopyFrom(const AutoRefConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefConfig::IsInitialized() const {
  return true;
}

void AutoRefConfig::InternalSwap(AutoRefConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.game_event_behavior_.InternalSwap(&other->_impl_.game_event_behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_5fconfig_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Config_GameEventBehaviorEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Config_GameEventBehaviorEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config_GameEventBehaviorEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Config_AutoRefConfigsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Config_AutoRefConfigsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config_AutoRefConfigsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Config*
Arena::CreateMaybeMessage< ::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::AutoRefConfig_GameEventBehaviorEntry_DoNotUse*
Arena::CreateMaybeMessage< ::AutoRefConfig_GameEventBehaviorEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefConfig_GameEventBehaviorEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::AutoRefConfig*
Arena::CreateMaybeMessage< ::AutoRefConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
