// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine/ssl_gc_engine.proto

#include "engine/ssl_gc_engine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR GcState_TeamStateEntry_DoNotUse::GcState_TeamStateEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GcState_TeamStateEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcState_TeamStateEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcState_TeamStateEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GcState_TeamStateEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcState_TeamStateEntry_DoNotUseDefaultTypeInternal _GcState_TeamStateEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GcState_AutoRefStateEntry_DoNotUse::GcState_AutoRefStateEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GcState_AutoRefStateEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal _GcState_AutoRefStateEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GcState_TrackersEntry_DoNotUse::GcState_TrackersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GcState_TrackersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcState_TrackersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcState_TrackersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GcState_TrackersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcState_TrackersEntry_DoNotUseDefaultTypeInternal _GcState_TrackersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GcState::GcState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.team_state_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.auto_ref_state_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.trackers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.continue_actions_)*/{}
  , /*decltype(_impl_.continue_hints_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GcStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcStateDefaultTypeInternal() {}
  union {
    GcState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcStateDefaultTypeInternal _GcState_default_instance_;
PROTOBUF_CONSTEXPR GcStateTeam::GcStateTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.advantage_choice_)*/nullptr
  , /*decltype(_impl_.connected_)*/false
  , /*decltype(_impl_.connection_verified_)*/false
  , /*decltype(_impl_.remote_control_connected_)*/false
  , /*decltype(_impl_.remote_control_connection_verified_)*/false} {}
struct GcStateTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcStateTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcStateTeamDefaultTypeInternal() {}
  union {
    GcStateTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcStateTeamDefaultTypeInternal _GcStateTeam_default_instance_;
PROTOBUF_CONSTEXPR TeamAdvantageChoice::TeamAdvantageChoice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.choice_)*/0} {}
struct TeamAdvantageChoiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamAdvantageChoiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamAdvantageChoiceDefaultTypeInternal() {}
  union {
    TeamAdvantageChoice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamAdvantageChoiceDefaultTypeInternal _TeamAdvantageChoice_default_instance_;
PROTOBUF_CONSTEXPR GcStateAutoRef::GcStateAutoRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connection_verified_)*/false} {}
struct GcStateAutoRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcStateAutoRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcStateAutoRefDefaultTypeInternal() {}
  union {
    GcStateAutoRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcStateAutoRefDefaultTypeInternal _GcStateAutoRef_default_instance_;
PROTOBUF_CONSTEXPR GcStateTracker::GcStateTracker(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.robots_)*/{}
  , /*decltype(_impl_.source_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ball_)*/nullptr} {}
struct GcStateTrackerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcStateTrackerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcStateTrackerDefaultTypeInternal() {}
  union {
    GcStateTracker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcStateTrackerDefaultTypeInternal _GcStateTracker_default_instance_;
PROTOBUF_CONSTEXPR Ball::Ball(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.vel_)*/nullptr} {}
struct BallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BallDefaultTypeInternal() {}
  union {
    Ball _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BallDefaultTypeInternal _Ball_default_instance_;
PROTOBUF_CONSTEXPR Robot::Robot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.pos_)*/nullptr} {}
struct RobotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotDefaultTypeInternal() {}
  union {
    Robot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotDefaultTypeInternal _Robot_default_instance_;
PROTOBUF_CONSTEXPR ContinueAction::ContinueAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.continuation_issues_)*/{}
  , /*decltype(_impl_.ready_at_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.for_team_)*/0
  , /*decltype(_impl_.state_)*/0} {}
struct ContinueActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContinueActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContinueActionDefaultTypeInternal() {}
  union {
    ContinueAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContinueActionDefaultTypeInternal _ContinueAction_default_instance_;
PROTOBUF_CONSTEXPR ContinueHint::ContinueHint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ContinueHintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContinueHintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContinueHintDefaultTypeInternal() {}
  union {
    ContinueHint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContinueHintDefaultTypeInternal _ContinueHint_default_instance_;
static ::_pb::Metadata file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_engine_2fssl_5fgc_5fengine_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_engine_2fssl_5fgc_5fengine_2eproto = nullptr;

const uint32_t TableStruct_engine_2fssl_5fgc_5fengine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GcState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GcState, _impl_.team_state_),
  PROTOBUF_FIELD_OFFSET(::GcState, _impl_.auto_ref_state_),
  PROTOBUF_FIELD_OFFSET(::GcState, _impl_.trackers_),
  PROTOBUF_FIELD_OFFSET(::GcState, _impl_.continue_actions_),
  PROTOBUF_FIELD_OFFSET(::GcState, _impl_.continue_hints_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, _impl_.connected_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, _impl_.connection_verified_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, _impl_.remote_control_connected_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, _impl_.remote_control_connection_verified_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, _impl_.advantage_choice_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::TeamAdvantageChoice, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeamAdvantageChoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TeamAdvantageChoice, _impl_.choice_),
  0,
  PROTOBUF_FIELD_OFFSET(::GcStateAutoRef, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcStateAutoRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GcStateAutoRef, _impl_.connection_verified_),
  0,
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, _impl_.source_name_),
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, _impl_.ball_),
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, _impl_.robots_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Ball, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Ball, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Ball, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::Ball, _impl_.vel_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Robot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Robot, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Robot, _impl_.pos_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ContinueAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContinueAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContinueAction, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ContinueAction, _impl_.for_team_),
  PROTOBUF_FIELD_OFFSET(::ContinueAction, _impl_.continuation_issues_),
  PROTOBUF_FIELD_OFFSET(::ContinueAction, _impl_.ready_at_),
  PROTOBUF_FIELD_OFFSET(::ContinueAction, _impl_.state_),
  1,
  2,
  ~0u,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::ContinueHint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContinueHint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContinueHint, _impl_.message_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::GcState_TeamStateEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::GcState_AutoRefStateEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::GcState_TrackersEntry_DoNotUse)},
  { 30, -1, -1, sizeof(::GcState)},
  { 41, 52, -1, sizeof(::GcStateTeam)},
  { 57, 64, -1, sizeof(::TeamAdvantageChoice)},
  { 65, 72, -1, sizeof(::GcStateAutoRef)},
  { 73, 83, -1, sizeof(::GcStateTracker)},
  { 87, 95, -1, sizeof(::Ball)},
  { 97, 105, -1, sizeof(::Robot)},
  { 107, 118, -1, sizeof(::ContinueAction)},
  { 123, 130, -1, sizeof(::ContinueHint)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_GcState_TeamStateEntry_DoNotUse_default_instance_._instance,
  &::_GcState_AutoRefStateEntry_DoNotUse_default_instance_._instance,
  &::_GcState_TrackersEntry_DoNotUse_default_instance_._instance,
  &::_GcState_default_instance_._instance,
  &::_GcStateTeam_default_instance_._instance,
  &::_TeamAdvantageChoice_default_instance_._instance,
  &::_GcStateAutoRef_default_instance_._instance,
  &::_GcStateTracker_default_instance_._instance,
  &::_Ball_default_instance_._instance,
  &::_Robot_default_instance_._instance,
  &::_ContinueAction_default_instance_._instance,
  &::_ContinueHint_default_instance_._instance,
};

const char descriptor_table_protodef_engine_2fssl_5fgc_5fengine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032engine/ssl_gc_engine.proto\032\032geom/ssl_g"
  "c_geometry.proto\032\031state/ssl_gc_common.pr"
  "oto\032\037google/protobuf/timestamp.proto\"\235\003\n"
  "\007GcState\022+\n\nteam_state\030\001 \003(\0132\027.GcState.T"
  "eamStateEntry\0222\n\016auto_ref_state\030\002 \003(\0132\032."
  "GcState.AutoRefStateEntry\022(\n\010trackers\030\003 "
  "\003(\0132\026.GcState.TrackersEntry\022)\n\020continue_"
  "actions\030\004 \003(\0132\017.ContinueAction\022%\n\016contin"
  "ue_hints\030\005 \003(\0132\r.ContinueHint\032>\n\016TeamSta"
  "teEntry\022\013\n\003key\030\001 \001(\t\022\033\n\005value\030\002 \001(\0132\014.Gc"
  "StateTeam:\0028\001\032D\n\021AutoRefStateEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\036\n\005value\030\002 \001(\0132\017.GcStateAutoRef:"
  "\0028\001\032/\n\rTrackersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\t:\0028\001\"\273\001\n\013GcStateTeam\022\021\n\tconnecte"
  "d\030\001 \001(\010\022\033\n\023connection_verified\030\002 \001(\010\022 \n\030"
  "remote_control_connected\030\003 \001(\010\022*\n\"remote"
  "_control_connection_verified\030\004 \001(\010\022.\n\020ad"
  "vantage_choice\030\005 \001(\0132\024.TeamAdvantageChoi"
  "ce\"v\n\023TeamAdvantageChoice\0224\n\006choice\030\001 \001("
  "\0162$.TeamAdvantageChoice.AdvantageChoice\""
  ")\n\017AdvantageChoice\022\010\n\004STOP\020\000\022\014\n\010CONTINUE"
  "\020\001\"-\n\016GcStateAutoRef\022\033\n\023connection_verif"
  "ied\030\001 \001(\010\"`\n\016GcStateTracker\022\023\n\013source_na"
  "me\030\001 \001(\t\022\014\n\004uuid\030\004 \001(\t\022\023\n\004ball\030\002 \001(\0132\005.B"
  "all\022\026\n\006robots\030\003 \003(\0132\006.Robot\"4\n\004Ball\022\025\n\003p"
  "os\030\001 \001(\0132\010.Vector3\022\025\n\003vel\030\002 \001(\0132\010.Vector"
  "3\"4\n\005Robot\022\024\n\002id\030\001 \001(\0132\010.RobotId\022\025\n\003pos\030"
  "\002 \001(\0132\010.Vector2\"\304\005\n\016ContinueAction\022\"\n\004ty"
  "pe\030\001 \002(\0162\024.ContinueAction.Type\022\027\n\010for_te"
  "am\030\002 \002(\0162\005.Team\022\033\n\023continuation_issues\030\003"
  " \003(\t\022,\n\010ready_at\030\004 \001(\0132\032.google.protobuf"
  ".Timestamp\022$\n\005state\030\005 \001(\0162\025.ContinueActi"
  "on.State\"\235\003\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\010\n\004H"
  "ALT\020\001\022\024\n\020RESUME_FROM_HALT\020\n\022\r\n\tSTOP_GAME"
  "\020\002\022\017\n\013FORCE_START\020\013\022\r\n\tFREE_KICK\020\021\022\020\n\014NE"
  "XT_COMMAND\020\003\022\030\n\024BALL_PLACEMENT_START\020\004\022\031"
  "\n\025BALL_PLACEMENT_CANCEL\020\t\022\033\n\027BALL_PLACEM"
  "ENT_COMPLETE\020\016\022\027\n\023BALL_PLACEMENT_FAIL\020\017\022"
  "\021\n\rTIMEOUT_START\020\005\022\020\n\014TIMEOUT_STOP\020\006\022\024\n\020"
  "BOT_SUBSTITUTION\020\007\022\016\n\nNEXT_STAGE\020\010\022\014\n\010EN"
  "D_GAME\020\020\022\017\n\013ACCEPT_GOAL\020\014\022\017\n\013REJECT_GOAL"
  "\020\024\022\020\n\014NORMAL_START\020\r\022\024\n\020CHALLENGE_ACCEPT"
  "\020\022\022\024\n\020CHALLENGE_REJECT\020\023\"d\n\005State\022\021\n\rSTA"
  "TE_UNKNOWN\020\000\022\013\n\007BLOCKED\020\001\022\013\n\007WAITING\020\002\022\016"
  "\n\nREADY_AUTO\020\003\022\020\n\014READY_MANUAL\020\004\022\014\n\010DISA"
  "BLED\020\005\"\037\n\014ContinueHint\022\017\n\007message\030\001 \002(\t"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_deps[3] = {
  &::descriptor_table_geom_2fssl_5fgc_5fgeometry_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_state_2fssl_5fgc_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_engine_2fssl_5fgc_5fengine_2eproto = {
    false, false, 1839, descriptor_table_protodef_engine_2fssl_5fgc_5fengine_2eproto,
    "engine/ssl_gc_engine.proto",
    &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once, descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_deps, 3, 12,
    schemas, file_default_instances, TableStruct_engine_2fssl_5fgc_5fengine_2eproto::offsets,
    file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto, file_level_enum_descriptors_engine_2fssl_5fgc_5fengine_2eproto,
    file_level_service_descriptors_engine_2fssl_5fgc_5fengine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter() {
  return &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_engine_2fssl_5fgc_5fengine_2eproto(&descriptor_table_engine_2fssl_5fgc_5fengine_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamAdvantageChoice_AdvantageChoice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_engine_2fssl_5fgc_5fengine_2eproto);
  return file_level_enum_descriptors_engine_2fssl_5fgc_5fengine_2eproto[0];
}
bool TeamAdvantageChoice_AdvantageChoice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::STOP;
constexpr TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::CONTINUE;
constexpr TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::AdvantageChoice_MIN;
constexpr TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::AdvantageChoice_MAX;
constexpr int TeamAdvantageChoice::AdvantageChoice_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContinueAction_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_engine_2fssl_5fgc_5fengine_2eproto);
  return file_level_enum_descriptors_engine_2fssl_5fgc_5fengine_2eproto[1];
}
bool ContinueAction_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ContinueAction_Type ContinueAction::TYPE_UNKNOWN;
constexpr ContinueAction_Type ContinueAction::HALT;
constexpr ContinueAction_Type ContinueAction::RESUME_FROM_HALT;
constexpr ContinueAction_Type ContinueAction::STOP_GAME;
constexpr ContinueAction_Type ContinueAction::FORCE_START;
constexpr ContinueAction_Type ContinueAction::FREE_KICK;
constexpr ContinueAction_Type ContinueAction::NEXT_COMMAND;
constexpr ContinueAction_Type ContinueAction::BALL_PLACEMENT_START;
constexpr ContinueAction_Type ContinueAction::BALL_PLACEMENT_CANCEL;
constexpr ContinueAction_Type ContinueAction::BALL_PLACEMENT_COMPLETE;
constexpr ContinueAction_Type ContinueAction::BALL_PLACEMENT_FAIL;
constexpr ContinueAction_Type ContinueAction::TIMEOUT_START;
constexpr ContinueAction_Type ContinueAction::TIMEOUT_STOP;
constexpr ContinueAction_Type ContinueAction::BOT_SUBSTITUTION;
constexpr ContinueAction_Type ContinueAction::NEXT_STAGE;
constexpr ContinueAction_Type ContinueAction::END_GAME;
constexpr ContinueAction_Type ContinueAction::ACCEPT_GOAL;
constexpr ContinueAction_Type ContinueAction::REJECT_GOAL;
constexpr ContinueAction_Type ContinueAction::NORMAL_START;
constexpr ContinueAction_Type ContinueAction::CHALLENGE_ACCEPT;
constexpr ContinueAction_Type ContinueAction::CHALLENGE_REJECT;
constexpr ContinueAction_Type ContinueAction::Type_MIN;
constexpr ContinueAction_Type ContinueAction::Type_MAX;
constexpr int ContinueAction::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContinueAction_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_engine_2fssl_5fgc_5fengine_2eproto);
  return file_level_enum_descriptors_engine_2fssl_5fgc_5fengine_2eproto[2];
}
bool ContinueAction_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ContinueAction_State ContinueAction::STATE_UNKNOWN;
constexpr ContinueAction_State ContinueAction::BLOCKED;
constexpr ContinueAction_State ContinueAction::WAITING;
constexpr ContinueAction_State ContinueAction::READY_AUTO;
constexpr ContinueAction_State ContinueAction::READY_MANUAL;
constexpr ContinueAction_State ContinueAction::DISABLED;
constexpr ContinueAction_State ContinueAction::State_MIN;
constexpr ContinueAction_State ContinueAction::State_MAX;
constexpr int ContinueAction::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

GcState_TeamStateEntry_DoNotUse::GcState_TeamStateEntry_DoNotUse() {}
GcState_TeamStateEntry_DoNotUse::GcState_TeamStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GcState_TeamStateEntry_DoNotUse::MergeFrom(const GcState_TeamStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GcState_TeamStateEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[0]);
}

// ===================================================================

GcState_AutoRefStateEntry_DoNotUse::GcState_AutoRefStateEntry_DoNotUse() {}
GcState_AutoRefStateEntry_DoNotUse::GcState_AutoRefStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GcState_AutoRefStateEntry_DoNotUse::MergeFrom(const GcState_AutoRefStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GcState_AutoRefStateEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[1]);
}

// ===================================================================

GcState_TrackersEntry_DoNotUse::GcState_TrackersEntry_DoNotUse() {}
GcState_TrackersEntry_DoNotUse::GcState_TrackersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GcState_TrackersEntry_DoNotUse::MergeFrom(const GcState_TrackersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GcState_TrackersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[2]);
}

// ===================================================================

class GcState::_Internal {
 public:
};

GcState::GcState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GcState::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:GcState)
}
GcState::GcState(const GcState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GcState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.team_state_)*/{}
    , /*decltype(_impl_.auto_ref_state_)*/{}
    , /*decltype(_impl_.trackers_)*/{}
    , decltype(_impl_.continue_actions_){from._impl_.continue_actions_}
    , decltype(_impl_.continue_hints_){from._impl_.continue_hints_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.team_state_.MergeFrom(from._impl_.team_state_);
  _this->_impl_.auto_ref_state_.MergeFrom(from._impl_.auto_ref_state_);
  _this->_impl_.trackers_.MergeFrom(from._impl_.trackers_);
  // @@protoc_insertion_point(copy_constructor:GcState)
}

inline void GcState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.team_state_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.auto_ref_state_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.trackers_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.continue_actions_){arena}
    , decltype(_impl_.continue_hints_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GcState::~GcState() {
  // @@protoc_insertion_point(destructor:GcState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GcState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_state_.Destruct();
  _impl_.team_state_.~MapField();
  _impl_.auto_ref_state_.Destruct();
  _impl_.auto_ref_state_.~MapField();
  _impl_.trackers_.Destruct();
  _impl_.trackers_.~MapField();
  _impl_.continue_actions_.~RepeatedPtrField();
  _impl_.continue_hints_.~RepeatedPtrField();
}

void GcState::ArenaDtor(void* object) {
  GcState* _this = reinterpret_cast< GcState* >(object);
  _this->_impl_.team_state_.Destruct();
  _this->_impl_.auto_ref_state_.Destruct();
  _this->_impl_.trackers_.Destruct();
}
void GcState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GcState::Clear() {
// @@protoc_insertion_point(message_clear_start:GcState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.team_state_.Clear();
  _impl_.auto_ref_state_.Clear();
  _impl_.trackers_.Clear();
  _impl_.continue_actions_.Clear();
  _impl_.continue_hints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .GcStateTeam> team_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.team_state_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .GcStateAutoRef> auto_ref_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.auto_ref_state_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> trackers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.trackers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ContinueAction continue_actions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_continue_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ContinueHint continue_hints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_continue_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GcState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GcState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .GcStateTeam> team_state = 1;
  if (!this->_internal_team_state().empty()) {
    using MapType = ::_pb::Map<std::string, ::GcStateTeam>;
    using WireHelper = GcState_TeamStateEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_team_state();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "GcState.TeamStateEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .GcStateAutoRef> auto_ref_state = 2;
  if (!this->_internal_auto_ref_state().empty()) {
    using MapType = ::_pb::Map<std::string, ::GcStateAutoRef>;
    using WireHelper = GcState_AutoRefStateEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_auto_ref_state();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "GcState.AutoRefStateEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> trackers = 3;
  if (!this->_internal_trackers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = GcState_TrackersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_trackers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "GcState.TrackersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "GcState.TrackersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .ContinueAction continue_actions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_continue_actions_size()); i < n; i++) {
    const auto& repfield = this->_internal_continue_actions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ContinueHint continue_hints = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_continue_hints_size()); i < n; i++) {
    const auto& repfield = this->_internal_continue_hints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcState)
  return target;
}

size_t GcState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .GcStateTeam> team_state = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_team_state_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >::const_iterator
      it = this->_internal_team_state().begin();
      it != this->_internal_team_state().end(); ++it) {
    total_size += GcState_TeamStateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .GcStateAutoRef> auto_ref_state = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_auto_ref_state_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >::const_iterator
      it = this->_internal_auto_ref_state().begin();
      it != this->_internal_auto_ref_state().end(); ++it) {
    total_size += GcState_AutoRefStateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> trackers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_trackers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_trackers().begin();
      it != this->_internal_trackers().end(); ++it) {
    total_size += GcState_TrackersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .ContinueAction continue_actions = 4;
  total_size += 1UL * this->_internal_continue_actions_size();
  for (const auto& msg : this->_impl_.continue_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ContinueHint continue_hints = 5;
  total_size += 1UL * this->_internal_continue_hints_size();
  for (const auto& msg : this->_impl_.continue_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GcState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GcState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GcState::GetClassData() const { return &_class_data_; }


void GcState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GcState*>(&to_msg);
  auto& from = static_cast<const GcState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GcState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.team_state_.MergeFrom(from._impl_.team_state_);
  _this->_impl_.auto_ref_state_.MergeFrom(from._impl_.auto_ref_state_);
  _this->_impl_.trackers_.MergeFrom(from._impl_.trackers_);
  _this->_impl_.continue_actions_.MergeFrom(from._impl_.continue_actions_);
  _this->_impl_.continue_hints_.MergeFrom(from._impl_.continue_hints_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GcState::CopyFrom(const GcState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcState::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.continue_actions_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.continue_hints_))
    return false;
  return true;
}

void GcState::InternalSwap(GcState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.team_state_.InternalSwap(&other->_impl_.team_state_);
  _impl_.auto_ref_state_.InternalSwap(&other->_impl_.auto_ref_state_);
  _impl_.trackers_.InternalSwap(&other->_impl_.trackers_);
  _impl_.continue_actions_.InternalSwap(&other->_impl_.continue_actions_);
  _impl_.continue_hints_.InternalSwap(&other->_impl_.continue_hints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GcState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[3]);
}

// ===================================================================

class GcStateTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<GcStateTeam>()._impl_._has_bits_);
  static void set_has_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connection_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remote_control_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remote_control_connection_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TeamAdvantageChoice& advantage_choice(const GcStateTeam* msg);
  static void set_has_advantage_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TeamAdvantageChoice&
GcStateTeam::_Internal::advantage_choice(const GcStateTeam* msg) {
  return *msg->_impl_.advantage_choice_;
}
GcStateTeam::GcStateTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GcStateTeam)
}
GcStateTeam::GcStateTeam(const GcStateTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GcStateTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.advantage_choice_){nullptr}
    , decltype(_impl_.connected_){}
    , decltype(_impl_.connection_verified_){}
    , decltype(_impl_.remote_control_connected_){}
    , decltype(_impl_.remote_control_connection_verified_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advantage_choice()) {
    _this->_impl_.advantage_choice_ = new ::TeamAdvantageChoice(*from._impl_.advantage_choice_);
  }
  ::memcpy(&_impl_.connected_, &from._impl_.connected_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.remote_control_connection_verified_) -
    reinterpret_cast<char*>(&_impl_.connected_)) + sizeof(_impl_.remote_control_connection_verified_));
  // @@protoc_insertion_point(copy_constructor:GcStateTeam)
}

inline void GcStateTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.advantage_choice_){nullptr}
    , decltype(_impl_.connected_){false}
    , decltype(_impl_.connection_verified_){false}
    , decltype(_impl_.remote_control_connected_){false}
    , decltype(_impl_.remote_control_connection_verified_){false}
  };
}

GcStateTeam::~GcStateTeam() {
  // @@protoc_insertion_point(destructor:GcStateTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GcStateTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.advantage_choice_;
}

void GcStateTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GcStateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GcStateTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.advantage_choice_ != nullptr);
    _impl_.advantage_choice_->Clear();
  }
  ::memset(&_impl_.connected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.remote_control_connection_verified_) -
      reinterpret_cast<char*>(&_impl_.connected_)) + sizeof(_impl_.remote_control_connection_verified_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcStateTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool connected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_connected(&has_bits);
          _impl_.connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool connection_verified = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_connection_verified(&has_bits);
          _impl_.connection_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool remote_control_connected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_remote_control_connected(&has_bits);
          _impl_.remote_control_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool remote_control_connection_verified = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_remote_control_connection_verified(&has_bits);
          _impl_.remote_control_connection_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TeamAdvantageChoice advantage_choice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_advantage_choice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GcStateTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GcStateTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool connected = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_connected(), target);
  }

  // optional bool connection_verified = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_connection_verified(), target);
  }

  // optional bool remote_control_connected = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_remote_control_connected(), target);
  }

  // optional bool remote_control_connection_verified = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_remote_control_connection_verified(), target);
  }

  // optional .TeamAdvantageChoice advantage_choice = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::advantage_choice(this),
        _Internal::advantage_choice(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcStateTeam)
  return target;
}

size_t GcStateTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcStateTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TeamAdvantageChoice advantage_choice = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.advantage_choice_);
    }

    // optional bool connected = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool connection_verified = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool remote_control_connected = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool remote_control_connection_verified = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GcStateTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GcStateTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GcStateTeam::GetClassData() const { return &_class_data_; }


void GcStateTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GcStateTeam*>(&to_msg);
  auto& from = static_cast<const GcStateTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GcStateTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_advantage_choice()->::TeamAdvantageChoice::MergeFrom(
          from._internal_advantage_choice());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.connected_ = from._impl_.connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.connection_verified_ = from._impl_.connection_verified_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.remote_control_connected_ = from._impl_.remote_control_connected_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.remote_control_connection_verified_ = from._impl_.remote_control_connection_verified_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GcStateTeam::CopyFrom(const GcStateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcStateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateTeam::IsInitialized() const {
  return true;
}

void GcStateTeam::InternalSwap(GcStateTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GcStateTeam, _impl_.remote_control_connection_verified_)
      + sizeof(GcStateTeam::_impl_.remote_control_connection_verified_)
      - PROTOBUF_FIELD_OFFSET(GcStateTeam, _impl_.advantage_choice_)>(
          reinterpret_cast<char*>(&_impl_.advantage_choice_),
          reinterpret_cast<char*>(&other->_impl_.advantage_choice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GcStateTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[4]);
}

// ===================================================================

class TeamAdvantageChoice::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamAdvantageChoice>()._impl_._has_bits_);
  static void set_has_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TeamAdvantageChoice::TeamAdvantageChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TeamAdvantageChoice)
}
TeamAdvantageChoice::TeamAdvantageChoice(const TeamAdvantageChoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamAdvantageChoice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.choice_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.choice_ = from._impl_.choice_;
  // @@protoc_insertion_point(copy_constructor:TeamAdvantageChoice)
}

inline void TeamAdvantageChoice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.choice_){0}
  };
}

TeamAdvantageChoice::~TeamAdvantageChoice() {
  // @@protoc_insertion_point(destructor:TeamAdvantageChoice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamAdvantageChoice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeamAdvantageChoice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamAdvantageChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamAdvantageChoice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.choice_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamAdvantageChoice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TeamAdvantageChoice_AdvantageChoice_IsValid(val))) {
            _internal_set_choice(static_cast<::TeamAdvantageChoice_AdvantageChoice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamAdvantageChoice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamAdvantageChoice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_choice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamAdvantageChoice)
  return target;
}

size_t TeamAdvantageChoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamAdvantageChoice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_choice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamAdvantageChoice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamAdvantageChoice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamAdvantageChoice::GetClassData() const { return &_class_data_; }


void TeamAdvantageChoice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamAdvantageChoice*>(&to_msg);
  auto& from = static_cast<const TeamAdvantageChoice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TeamAdvantageChoice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_choice()) {
    _this->_internal_set_choice(from._internal_choice());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamAdvantageChoice::CopyFrom(const TeamAdvantageChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamAdvantageChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAdvantageChoice::IsInitialized() const {
  return true;
}

void TeamAdvantageChoice::InternalSwap(TeamAdvantageChoice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.choice_, other->_impl_.choice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamAdvantageChoice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[5]);
}

// ===================================================================

class GcStateAutoRef::_Internal {
 public:
  using HasBits = decltype(std::declval<GcStateAutoRef>()._impl_._has_bits_);
  static void set_has_connection_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GcStateAutoRef::GcStateAutoRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GcStateAutoRef)
}
GcStateAutoRef::GcStateAutoRef(const GcStateAutoRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GcStateAutoRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_verified_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.connection_verified_ = from._impl_.connection_verified_;
  // @@protoc_insertion_point(copy_constructor:GcStateAutoRef)
}

inline void GcStateAutoRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_verified_){false}
  };
}

GcStateAutoRef::~GcStateAutoRef() {
  // @@protoc_insertion_point(destructor:GcStateAutoRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GcStateAutoRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GcStateAutoRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GcStateAutoRef::Clear() {
// @@protoc_insertion_point(message_clear_start:GcStateAutoRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_verified_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcStateAutoRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool connection_verified = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_connection_verified(&has_bits);
          _impl_.connection_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GcStateAutoRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GcStateAutoRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool connection_verified = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_connection_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcStateAutoRef)
  return target;
}

size_t GcStateAutoRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcStateAutoRef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool connection_verified = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GcStateAutoRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GcStateAutoRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GcStateAutoRef::GetClassData() const { return &_class_data_; }


void GcStateAutoRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GcStateAutoRef*>(&to_msg);
  auto& from = static_cast<const GcStateAutoRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GcStateAutoRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection_verified()) {
    _this->_internal_set_connection_verified(from._internal_connection_verified());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GcStateAutoRef::CopyFrom(const GcStateAutoRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcStateAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateAutoRef::IsInitialized() const {
  return true;
}

void GcStateAutoRef::InternalSwap(GcStateAutoRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.connection_verified_, other->_impl_.connection_verified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GcStateAutoRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[6]);
}

// ===================================================================

class GcStateTracker::_Internal {
 public:
  using HasBits = decltype(std::declval<GcStateTracker>()._impl_._has_bits_);
  static void set_has_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Ball& ball(const GcStateTracker* msg);
  static void set_has_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Ball&
GcStateTracker::_Internal::ball(const GcStateTracker* msg) {
  return *msg->_impl_.ball_;
}
GcStateTracker::GcStateTracker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GcStateTracker)
}
GcStateTracker::GcStateTracker(const GcStateTracker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GcStateTracker* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.robots_){from._impl_.robots_}
    , decltype(_impl_.source_name_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.ball_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_name()) {
    _this->_impl_.source_name_.Set(from._internal_source_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ball()) {
    _this->_impl_.ball_ = new ::Ball(*from._impl_.ball_);
  }
  // @@protoc_insertion_point(copy_constructor:GcStateTracker)
}

inline void GcStateTracker::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.robots_){arena}
    , decltype(_impl_.source_name_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.ball_){nullptr}
  };
  _impl_.source_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GcStateTracker::~GcStateTracker() {
  // @@protoc_insertion_point(destructor:GcStateTracker)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GcStateTracker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.robots_.~RepeatedPtrField();
  _impl_.source_name_.Destroy();
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ball_;
}

void GcStateTracker::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GcStateTracker::Clear() {
// @@protoc_insertion_point(message_clear_start:GcStateTracker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.robots_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.ball_ != nullptr);
      _impl_.ball_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcStateTracker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "GcStateTracker.source_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .Ball ball = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Robot robots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "GcStateTracker.uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GcStateTracker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GcStateTracker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string source_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GcStateTracker.source_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_name(), target);
  }

  // optional .Ball ball = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ball(this),
        _Internal::ball(this).GetCachedSize(), target, stream);
  }

  // repeated .Robot robots = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_robots_size()); i < n; i++) {
    const auto& repfield = this->_internal_robots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string uuid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GcStateTracker.uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcStateTracker)
  return target;
}

size_t GcStateTracker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcStateTracker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Robot robots = 3;
  total_size += 1UL * this->_internal_robots_size();
  for (const auto& msg : this->_impl_.robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string source_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_name());
    }

    // optional string uuid = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional .Ball ball = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ball_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GcStateTracker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GcStateTracker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GcStateTracker::GetClassData() const { return &_class_data_; }


void GcStateTracker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GcStateTracker*>(&to_msg);
  auto& from = static_cast<const GcStateTracker&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GcStateTracker)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.robots_.MergeFrom(from._impl_.robots_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_source_name(from._internal_source_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_ball()->::Ball::MergeFrom(
          from._internal_ball());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GcStateTracker::CopyFrom(const GcStateTracker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcStateTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateTracker::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.robots_))
    return false;
  if (_internal_has_ball()) {
    if (!_impl_.ball_->IsInitialized()) return false;
  }
  return true;
}

void GcStateTracker::InternalSwap(GcStateTracker* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.robots_.InternalSwap(&other->_impl_.robots_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_name_, lhs_arena,
      &other->_impl_.source_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  swap(_impl_.ball_, other->_impl_.ball_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GcStateTracker::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[7]);
}

// ===================================================================

class Ball::_Internal {
 public:
  using HasBits = decltype(std::declval<Ball>()._impl_._has_bits_);
  static const ::Vector3& pos(const Ball* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector3& vel(const Ball* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Vector3&
Ball::_Internal::pos(const Ball* msg) {
  return *msg->_impl_.pos_;
}
const ::Vector3&
Ball::_Internal::vel(const Ball* msg) {
  return *msg->_impl_.vel_;
}
void Ball::clear_pos() {
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Ball::clear_vel() {
  if (_impl_.vel_ != nullptr) _impl_.vel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Ball::Ball(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Ball)
}
Ball::Ball(const Ball& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ball* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.vel_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::Vector3(*from._impl_.pos_);
  }
  if (from._internal_has_vel()) {
    _this->_impl_.vel_ = new ::Vector3(*from._impl_.vel_);
  }
  // @@protoc_insertion_point(copy_constructor:Ball)
}

inline void Ball::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.vel_){nullptr}
  };
}

Ball::~Ball() {
  // @@protoc_insertion_point(destructor:Ball)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ball::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.vel_;
}

void Ball::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ball::Clear() {
// @@protoc_insertion_point(message_clear_start:Ball)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.pos_ != nullptr);
      _impl_.pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.vel_ != nullptr);
      _impl_.vel_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ball::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Vector3 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector3 vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ball::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ball)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Vector3 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // optional .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vel(this),
        _Internal::vel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ball)
  return target;
}

size_t Ball::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ball)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector3 pos = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pos_);
    }

    // optional .Vector3 vel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vel_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ball::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ball::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ball::GetClassData() const { return &_class_data_; }


void Ball::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ball*>(&to_msg);
  auto& from = static_cast<const Ball&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Ball)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pos()->::Vector3::MergeFrom(
          from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vel()->::Vector3::MergeFrom(
          from._internal_vel());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ball::CopyFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball::IsInitialized() const {
  if (_internal_has_pos()) {
    if (!_impl_.pos_->IsInitialized()) return false;
  }
  if (_internal_has_vel()) {
    if (!_impl_.vel_->IsInitialized()) return false;
  }
  return true;
}

void Ball::InternalSwap(Ball* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ball, _impl_.vel_)
      + sizeof(Ball::_impl_.vel_)
      - PROTOBUF_FIELD_OFFSET(Ball, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ball::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[8]);
}

// ===================================================================

class Robot::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot>()._impl_._has_bits_);
  static const ::RobotId& id(const Robot* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& pos(const Robot* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::RobotId&
Robot::_Internal::id(const Robot* msg) {
  return *msg->_impl_.id_;
}
const ::Vector2&
Robot::_Internal::pos(const Robot* msg) {
  return *msg->_impl_.pos_;
}
void Robot::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Robot::clear_pos() {
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Robot::Robot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Robot)
}
Robot::Robot(const Robot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Robot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.pos_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::RobotId(*from._impl_.id_);
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::Vector2(*from._impl_.pos_);
  }
  // @@protoc_insertion_point(copy_constructor:Robot)
}

inline void Robot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.pos_){nullptr}
  };
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:Robot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Robot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void Robot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:Robot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.pos_ != nullptr);
      _impl_.pos_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .RobotId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Robot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .RobotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .Vector2 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Robot)
  return target;
}

size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Robot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .RobotId id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .Vector2 pos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pos_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Robot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot::GetClassData() const { return &_class_data_; }


void Robot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Robot*>(&to_msg);
  auto& from = static_cast<const Robot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Robot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_id()->::RobotId::MergeFrom(
          from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pos()->::Vector2::MergeFrom(
          from._internal_pos());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if (_internal_has_pos()) {
    if (!_impl_.pos_->IsInitialized()) return false;
  }
  return true;
}

void Robot::InternalSwap(Robot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot, _impl_.pos_)
      + sizeof(Robot::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(Robot, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[9]);
}

// ===================================================================

class ContinueAction::_Internal {
 public:
  using HasBits = decltype(std::declval<ContinueAction>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ready_at(const ContinueAction* msg);
  static void set_has_ready_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ContinueAction::_Internal::ready_at(const ContinueAction* msg) {
  return *msg->_impl_.ready_at_;
}
void ContinueAction::clear_ready_at() {
  if (_impl_.ready_at_ != nullptr) _impl_.ready_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ContinueAction::ContinueAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContinueAction)
}
ContinueAction::ContinueAction(const ContinueAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContinueAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.continuation_issues_){from._impl_.continuation_issues_}
    , decltype(_impl_.ready_at_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.for_team_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ready_at()) {
    _this->_impl_.ready_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ready_at_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:ContinueAction)
}

inline void ContinueAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.continuation_issues_){arena}
    , decltype(_impl_.ready_at_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.for_team_){0}
    , decltype(_impl_.state_){0}
  };
}

ContinueAction::~ContinueAction() {
  // @@protoc_insertion_point(destructor:ContinueAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContinueAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.continuation_issues_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ready_at_;
}

void ContinueAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContinueAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ContinueAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.continuation_issues_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ready_at_ != nullptr);
    _impl_.ready_at_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContinueAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .ContinueAction.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ContinueAction_Type_IsValid(val))) {
            _internal_set_type(static_cast<::ContinueAction_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .Team for_team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string continuation_issues = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_continuation_issues();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "ContinueAction.continuation_issues");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp ready_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ready_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ContinueAction.State state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ContinueAction_State_IsValid(val))) {
            _internal_set_state(static_cast<::ContinueAction_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContinueAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContinueAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .ContinueAction.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .Team for_team = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_for_team(), target);
  }

  // repeated string continuation_issues = 3;
  for (int i = 0, n = this->_internal_continuation_issues_size(); i < n; i++) {
    const auto& s = this->_internal_continuation_issues(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ContinueAction.continuation_issues");
    target = stream->WriteString(3, s, target);
  }

  // optional .google.protobuf.Timestamp ready_at = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ready_at(this),
        _Internal::ready_at(this).GetCachedSize(), target, stream);
  }

  // optional .ContinueAction.State state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContinueAction)
  return target;
}

size_t ContinueAction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ContinueAction)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .ContinueAction.Type type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_for_team()) {
    // required .Team for_team = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_for_team());
  }

  return total_size;
}
size_t ContinueAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContinueAction)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .ContinueAction.Type type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());

    // required .Team for_team = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_for_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string continuation_issues = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.continuation_issues_.size());
  for (int i = 0, n = _impl_.continuation_issues_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.continuation_issues_.Get(i));
  }

  // optional .google.protobuf.Timestamp ready_at = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ready_at_);
  }

  // optional .ContinueAction.State state = 5;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContinueAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContinueAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContinueAction::GetClassData() const { return &_class_data_; }


void ContinueAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContinueAction*>(&to_msg);
  auto& from = static_cast<const ContinueAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContinueAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.continuation_issues_.MergeFrom(from._impl_.continuation_issues_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ready_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_ready_at());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.for_team_ = from._impl_.for_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContinueAction::CopyFrom(const ContinueAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContinueAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueAction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ContinueAction::InternalSwap(ContinueAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.continuation_issues_.InternalSwap(&other->_impl_.continuation_issues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContinueAction, _impl_.state_)
      + sizeof(ContinueAction::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(ContinueAction, _impl_.ready_at_)>(
          reinterpret_cast<char*>(&_impl_.ready_at_),
          reinterpret_cast<char*>(&other->_impl_.ready_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContinueAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[10]);
}

// ===================================================================

class ContinueHint::_Internal {
 public:
  using HasBits = decltype(std::declval<ContinueHint>()._impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ContinueHint::ContinueHint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContinueHint)
}
ContinueHint::ContinueHint(const ContinueHint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContinueHint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ContinueHint)
}

inline void ContinueHint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContinueHint::~ContinueHint() {
  // @@protoc_insertion_point(destructor:ContinueHint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContinueHint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ContinueHint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContinueHint::Clear() {
// @@protoc_insertion_point(message_clear_start:ContinueHint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContinueHint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ContinueHint.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContinueHint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContinueHint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ContinueHint.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContinueHint)
  return target;
}

size_t ContinueHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContinueHint)
  size_t total_size = 0;

  // required string message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContinueHint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContinueHint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContinueHint::GetClassData() const { return &_class_data_; }


void ContinueHint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContinueHint*>(&to_msg);
  auto& from = static_cast<const ContinueHint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContinueHint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContinueHint::CopyFrom(const ContinueHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContinueHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueHint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ContinueHint::InternalSwap(ContinueHint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ContinueHint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_getter, &descriptor_table_engine_2fssl_5fgc_5fengine_2eproto_once,
      file_level_metadata_engine_2fssl_5fgc_5fengine_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GcState_TeamStateEntry_DoNotUse*
Arena::CreateMaybeMessage< ::GcState_TeamStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcState_TeamStateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::GcState_AutoRefStateEntry_DoNotUse*
Arena::CreateMaybeMessage< ::GcState_AutoRefStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcState_AutoRefStateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::GcState_TrackersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::GcState_TrackersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcState_TrackersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::GcState*
Arena::CreateMaybeMessage< ::GcState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcState >(arena);
}
template<> PROTOBUF_NOINLINE ::GcStateTeam*
Arena::CreateMaybeMessage< ::GcStateTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcStateTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::TeamAdvantageChoice*
Arena::CreateMaybeMessage< ::TeamAdvantageChoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeamAdvantageChoice >(arena);
}
template<> PROTOBUF_NOINLINE ::GcStateAutoRef*
Arena::CreateMaybeMessage< ::GcStateAutoRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcStateAutoRef >(arena);
}
template<> PROTOBUF_NOINLINE ::GcStateTracker*
Arena::CreateMaybeMessage< ::GcStateTracker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcStateTracker >(arena);
}
template<> PROTOBUF_NOINLINE ::Ball*
Arena::CreateMaybeMessage< ::Ball >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Ball >(arena);
}
template<> PROTOBUF_NOINLINE ::Robot*
Arena::CreateMaybeMessage< ::Robot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Robot >(arena);
}
template<> PROTOBUF_NOINLINE ::ContinueAction*
Arena::CreateMaybeMessage< ::ContinueAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContinueAction >(arena);
}
template<> PROTOBUF_NOINLINE ::ContinueHint*
Arena::CreateMaybeMessage< ::ContinueHint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContinueHint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
