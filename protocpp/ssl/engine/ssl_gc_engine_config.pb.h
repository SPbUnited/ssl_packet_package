// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine/ssl_gc_engine_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_engine_2fssl_5fgc_5fengine_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_engine_2fssl_5fgc_5fengine_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_engine_2fssl_5fgc_5fengine_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_engine_2fssl_5fgc_5fengine_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_engine_2fssl_5fgc_5fengine_5fconfig_2eproto;
class AutoRefConfig;
struct AutoRefConfigDefaultTypeInternal;
extern AutoRefConfigDefaultTypeInternal _AutoRefConfig_default_instance_;
class AutoRefConfig_GameEventBehaviorEntry_DoNotUse;
struct AutoRefConfig_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal;
extern AutoRefConfig_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal _AutoRefConfig_GameEventBehaviorEntry_DoNotUse_default_instance_;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Config_AutoRefConfigsEntry_DoNotUse;
struct Config_AutoRefConfigsEntry_DoNotUseDefaultTypeInternal;
extern Config_AutoRefConfigsEntry_DoNotUseDefaultTypeInternal _Config_AutoRefConfigsEntry_DoNotUse_default_instance_;
class Config_GameEventBehaviorEntry_DoNotUse;
struct Config_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal;
extern Config_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal _Config_GameEventBehaviorEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AutoRefConfig* Arena::CreateMaybeMessage<::AutoRefConfig>(Arena*);
template<> ::AutoRefConfig_GameEventBehaviorEntry_DoNotUse* Arena::CreateMaybeMessage<::AutoRefConfig_GameEventBehaviorEntry_DoNotUse>(Arena*);
template<> ::Config* Arena::CreateMaybeMessage<::Config>(Arena*);
template<> ::Config_AutoRefConfigsEntry_DoNotUse* Arena::CreateMaybeMessage<::Config_AutoRefConfigsEntry_DoNotUse>(Arena*);
template<> ::Config_GameEventBehaviorEntry_DoNotUse* Arena::CreateMaybeMessage<::Config_GameEventBehaviorEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Config_Behavior : int {
  Config_Behavior_BEHAVIOR_UNKNOWN = 0,
  Config_Behavior_BEHAVIOR_ACCEPT = 1,
  Config_Behavior_BEHAVIOR_ACCEPT_MAJORITY = 2,
  Config_Behavior_BEHAVIOR_PROPOSE_ONLY = 3,
  Config_Behavior_BEHAVIOR_LOG = 4,
  Config_Behavior_BEHAVIOR_IGNORE = 5
};
bool Config_Behavior_IsValid(int value);
constexpr Config_Behavior Config_Behavior_Behavior_MIN = Config_Behavior_BEHAVIOR_UNKNOWN;
constexpr Config_Behavior Config_Behavior_Behavior_MAX = Config_Behavior_BEHAVIOR_IGNORE;
constexpr int Config_Behavior_Behavior_ARRAYSIZE = Config_Behavior_Behavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_Behavior_descriptor();
template<typename T>
inline const std::string& Config_Behavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Config_Behavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Config_Behavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Config_Behavior_descriptor(), enum_t_value);
}
inline bool Config_Behavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Config_Behavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Config_Behavior>(
    Config_Behavior_descriptor(), name, value);
}
enum AutoRefConfig_Behavior : int {
  AutoRefConfig_Behavior_BEHAVIOR_UNKNOWN = 0,
  AutoRefConfig_Behavior_BEHAVIOR_ACCEPT = 1,
  AutoRefConfig_Behavior_BEHAVIOR_LOG = 2,
  AutoRefConfig_Behavior_BEHAVIOR_IGNORE = 3
};
bool AutoRefConfig_Behavior_IsValid(int value);
constexpr AutoRefConfig_Behavior AutoRefConfig_Behavior_Behavior_MIN = AutoRefConfig_Behavior_BEHAVIOR_UNKNOWN;
constexpr AutoRefConfig_Behavior AutoRefConfig_Behavior_Behavior_MAX = AutoRefConfig_Behavior_BEHAVIOR_IGNORE;
constexpr int AutoRefConfig_Behavior_Behavior_ARRAYSIZE = AutoRefConfig_Behavior_Behavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutoRefConfig_Behavior_descriptor();
template<typename T>
inline const std::string& AutoRefConfig_Behavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutoRefConfig_Behavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutoRefConfig_Behavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AutoRefConfig_Behavior_descriptor(), enum_t_value);
}
inline bool AutoRefConfig_Behavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AutoRefConfig_Behavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AutoRefConfig_Behavior>(
    AutoRefConfig_Behavior_descriptor(), name, value);
}
// ===================================================================

class Config_GameEventBehaviorEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Config_GameEventBehaviorEntry_DoNotUse, 
    std::string, ::Config_Behavior,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Config_GameEventBehaviorEntry_DoNotUse, 
    std::string, ::Config_Behavior,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> SuperType;
  Config_GameEventBehaviorEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Config_GameEventBehaviorEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Config_GameEventBehaviorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Config_GameEventBehaviorEntry_DoNotUse& other);
  static const Config_GameEventBehaviorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Config_GameEventBehaviorEntry_DoNotUse*>(&_Config_GameEventBehaviorEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Config.GameEventBehaviorEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class Config_AutoRefConfigsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Config_AutoRefConfigsEntry_DoNotUse, 
    std::string, ::AutoRefConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Config_AutoRefConfigsEntry_DoNotUse, 
    std::string, ::AutoRefConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Config_AutoRefConfigsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Config_AutoRefConfigsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Config_AutoRefConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Config_AutoRefConfigsEntry_DoNotUse& other);
  static const Config_AutoRefConfigsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Config_AutoRefConfigsEntry_DoNotUse*>(&_Config_AutoRefConfigsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Config.AutoRefConfigsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit PROTOBUF_CONSTEXPR Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Config_Behavior Behavior;
  static constexpr Behavior BEHAVIOR_UNKNOWN =
    Config_Behavior_BEHAVIOR_UNKNOWN;
  static constexpr Behavior BEHAVIOR_ACCEPT =
    Config_Behavior_BEHAVIOR_ACCEPT;
  static constexpr Behavior BEHAVIOR_ACCEPT_MAJORITY =
    Config_Behavior_BEHAVIOR_ACCEPT_MAJORITY;
  static constexpr Behavior BEHAVIOR_PROPOSE_ONLY =
    Config_Behavior_BEHAVIOR_PROPOSE_ONLY;
  static constexpr Behavior BEHAVIOR_LOG =
    Config_Behavior_BEHAVIOR_LOG;
  static constexpr Behavior BEHAVIOR_IGNORE =
    Config_Behavior_BEHAVIOR_IGNORE;
  static inline bool Behavior_IsValid(int value) {
    return Config_Behavior_IsValid(value);
  }
  static constexpr Behavior Behavior_MIN =
    Config_Behavior_Behavior_MIN;
  static constexpr Behavior Behavior_MAX =
    Config_Behavior_Behavior_MAX;
  static constexpr int Behavior_ARRAYSIZE =
    Config_Behavior_Behavior_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Behavior_descriptor() {
    return Config_Behavior_descriptor();
  }
  template<typename T>
  static inline const std::string& Behavior_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Behavior>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Behavior_Name.");
    return Config_Behavior_Name(enum_t_value);
  }
  static inline bool Behavior_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Behavior* value) {
    return Config_Behavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGameEventBehaviorFieldNumber = 1,
    kAutoRefConfigsFieldNumber = 2,
    kTeamsFieldNumber = 4,
    kActiveTrackerSourceFieldNumber = 3,
    kAutoContinueFieldNumber = 5,
  };
  // map<string, .Config.Behavior> game_event_behavior = 1;
  int game_event_behavior_size() const;
  private:
  int _internal_game_event_behavior_size() const;
  public:
  void clear_game_event_behavior();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >&
      _internal_game_event_behavior() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >*
      _internal_mutable_game_event_behavior();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >&
      game_event_behavior() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >*
      mutable_game_event_behavior();

  // map<string, .AutoRefConfig> auto_ref_configs = 2;
  int auto_ref_configs_size() const;
  private:
  int _internal_auto_ref_configs_size() const;
  public:
  void clear_auto_ref_configs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >&
      _internal_auto_ref_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >*
      _internal_mutable_auto_ref_configs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >&
      auto_ref_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >*
      mutable_auto_ref_configs();

  // repeated string teams = 4;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  const std::string& teams(int index) const;
  std::string* mutable_teams(int index);
  void set_teams(int index, const std::string& value);
  void set_teams(int index, std::string&& value);
  void set_teams(int index, const char* value);
  void set_teams(int index, const char* value, size_t size);
  std::string* add_teams();
  void add_teams(const std::string& value);
  void add_teams(std::string&& value);
  void add_teams(const char* value);
  void add_teams(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& teams() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_teams();
  private:
  const std::string& _internal_teams(int index) const;
  std::string* _internal_add_teams();
  public:

  // optional string active_tracker_source = 3;
  bool has_active_tracker_source() const;
  private:
  bool _internal_has_active_tracker_source() const;
  public:
  void clear_active_tracker_source();
  const std::string& active_tracker_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_active_tracker_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_active_tracker_source();
  PROTOBUF_NODISCARD std::string* release_active_tracker_source();
  void set_allocated_active_tracker_source(std::string* active_tracker_source);
  private:
  const std::string& _internal_active_tracker_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_active_tracker_source(const std::string& value);
  std::string* _internal_mutable_active_tracker_source();
  public:

  // optional bool auto_continue = 5;
  bool has_auto_continue() const;
  private:
  bool _internal_has_auto_continue() const;
  public:
  void clear_auto_continue();
  bool auto_continue() const;
  void set_auto_continue(bool value);
  private:
  bool _internal_auto_continue() const;
  void _internal_set_auto_continue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Config_GameEventBehaviorEntry_DoNotUse,
        std::string, ::Config_Behavior,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> game_event_behavior_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Config_AutoRefConfigsEntry_DoNotUse,
        std::string, ::AutoRefConfig,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> auto_ref_configs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> teams_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_tracker_source_;
    bool auto_continue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AutoRefConfig_GameEventBehaviorEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AutoRefConfig_GameEventBehaviorEntry_DoNotUse, 
    std::string, ::AutoRefConfig_Behavior,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AutoRefConfig_GameEventBehaviorEntry_DoNotUse, 
    std::string, ::AutoRefConfig_Behavior,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> SuperType;
  AutoRefConfig_GameEventBehaviorEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AutoRefConfig_GameEventBehaviorEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AutoRefConfig_GameEventBehaviorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AutoRefConfig_GameEventBehaviorEntry_DoNotUse& other);
  static const AutoRefConfig_GameEventBehaviorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AutoRefConfig_GameEventBehaviorEntry_DoNotUse*>(&_AutoRefConfig_GameEventBehaviorEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "AutoRefConfig.GameEventBehaviorEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class AutoRefConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AutoRefConfig) */ {
 public:
  inline AutoRefConfig() : AutoRefConfig(nullptr) {}
  ~AutoRefConfig() override;
  explicit PROTOBUF_CONSTEXPR AutoRefConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoRefConfig(const AutoRefConfig& from);
  AutoRefConfig(AutoRefConfig&& from) noexcept
    : AutoRefConfig() {
    *this = ::std::move(from);
  }

  inline AutoRefConfig& operator=(const AutoRefConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefConfig& operator=(AutoRefConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoRefConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoRefConfig* internal_default_instance() {
    return reinterpret_cast<const AutoRefConfig*>(
               &_AutoRefConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AutoRefConfig& a, AutoRefConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoRefConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoRefConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutoRefConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoRefConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutoRefConfig& from) {
    AutoRefConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AutoRefConfig";
  }
  protected:
  explicit AutoRefConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef AutoRefConfig_Behavior Behavior;
  static constexpr Behavior BEHAVIOR_UNKNOWN =
    AutoRefConfig_Behavior_BEHAVIOR_UNKNOWN;
  static constexpr Behavior BEHAVIOR_ACCEPT =
    AutoRefConfig_Behavior_BEHAVIOR_ACCEPT;
  static constexpr Behavior BEHAVIOR_LOG =
    AutoRefConfig_Behavior_BEHAVIOR_LOG;
  static constexpr Behavior BEHAVIOR_IGNORE =
    AutoRefConfig_Behavior_BEHAVIOR_IGNORE;
  static inline bool Behavior_IsValid(int value) {
    return AutoRefConfig_Behavior_IsValid(value);
  }
  static constexpr Behavior Behavior_MIN =
    AutoRefConfig_Behavior_Behavior_MIN;
  static constexpr Behavior Behavior_MAX =
    AutoRefConfig_Behavior_Behavior_MAX;
  static constexpr int Behavior_ARRAYSIZE =
    AutoRefConfig_Behavior_Behavior_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Behavior_descriptor() {
    return AutoRefConfig_Behavior_descriptor();
  }
  template<typename T>
  static inline const std::string& Behavior_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Behavior>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Behavior_Name.");
    return AutoRefConfig_Behavior_Name(enum_t_value);
  }
  static inline bool Behavior_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Behavior* value) {
    return AutoRefConfig_Behavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGameEventBehaviorFieldNumber = 1,
  };
  // map<string, .AutoRefConfig.Behavior> game_event_behavior = 1;
  int game_event_behavior_size() const;
  private:
  int _internal_game_event_behavior_size() const;
  public:
  void clear_game_event_behavior();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >&
      _internal_game_event_behavior() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >*
      _internal_mutable_game_event_behavior();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >&
      game_event_behavior() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >*
      mutable_game_event_behavior();

  // @@protoc_insertion_point(class_scope:AutoRefConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AutoRefConfig_GameEventBehaviorEntry_DoNotUse,
        std::string, ::AutoRefConfig_Behavior,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> game_event_behavior_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Config

// map<string, .Config.Behavior> game_event_behavior = 1;
inline int Config::_internal_game_event_behavior_size() const {
  return _impl_.game_event_behavior_.size();
}
inline int Config::game_event_behavior_size() const {
  return _internal_game_event_behavior_size();
}
inline void Config::clear_game_event_behavior() {
  _impl_.game_event_behavior_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >&
Config::_internal_game_event_behavior() const {
  return _impl_.game_event_behavior_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >&
Config::game_event_behavior() const {
  // @@protoc_insertion_point(field_map:Config.game_event_behavior)
  return _internal_game_event_behavior();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >*
Config::_internal_mutable_game_event_behavior() {
  return _impl_.game_event_behavior_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >*
Config::mutable_game_event_behavior() {
  // @@protoc_insertion_point(field_mutable_map:Config.game_event_behavior)
  return _internal_mutable_game_event_behavior();
}

// map<string, .AutoRefConfig> auto_ref_configs = 2;
inline int Config::_internal_auto_ref_configs_size() const {
  return _impl_.auto_ref_configs_.size();
}
inline int Config::auto_ref_configs_size() const {
  return _internal_auto_ref_configs_size();
}
inline void Config::clear_auto_ref_configs() {
  _impl_.auto_ref_configs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >&
Config::_internal_auto_ref_configs() const {
  return _impl_.auto_ref_configs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >&
Config::auto_ref_configs() const {
  // @@protoc_insertion_point(field_map:Config.auto_ref_configs)
  return _internal_auto_ref_configs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >*
Config::_internal_mutable_auto_ref_configs() {
  return _impl_.auto_ref_configs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >*
Config::mutable_auto_ref_configs() {
  // @@protoc_insertion_point(field_mutable_map:Config.auto_ref_configs)
  return _internal_mutable_auto_ref_configs();
}

// optional string active_tracker_source = 3;
inline bool Config::_internal_has_active_tracker_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Config::has_active_tracker_source() const {
  return _internal_has_active_tracker_source();
}
inline void Config::clear_active_tracker_source() {
  _impl_.active_tracker_source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Config::active_tracker_source() const {
  // @@protoc_insertion_point(field_get:Config.active_tracker_source)
  return _internal_active_tracker_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_active_tracker_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.active_tracker_source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Config.active_tracker_source)
}
inline std::string* Config::mutable_active_tracker_source() {
  std::string* _s = _internal_mutable_active_tracker_source();
  // @@protoc_insertion_point(field_mutable:Config.active_tracker_source)
  return _s;
}
inline const std::string& Config::_internal_active_tracker_source() const {
  return _impl_.active_tracker_source_.Get();
}
inline void Config::_internal_set_active_tracker_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.active_tracker_source_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_active_tracker_source() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.active_tracker_source_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_active_tracker_source() {
  // @@protoc_insertion_point(field_release:Config.active_tracker_source)
  if (!_internal_has_active_tracker_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.active_tracker_source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.active_tracker_source_.IsDefault()) {
    _impl_.active_tracker_source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Config::set_allocated_active_tracker_source(std::string* active_tracker_source) {
  if (active_tracker_source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.active_tracker_source_.SetAllocated(active_tracker_source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.active_tracker_source_.IsDefault()) {
    _impl_.active_tracker_source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Config.active_tracker_source)
}

// repeated string teams = 4;
inline int Config::_internal_teams_size() const {
  return _impl_.teams_.size();
}
inline int Config::teams_size() const {
  return _internal_teams_size();
}
inline void Config::clear_teams() {
  _impl_.teams_.Clear();
}
inline std::string* Config::add_teams() {
  std::string* _s = _internal_add_teams();
  // @@protoc_insertion_point(field_add_mutable:Config.teams)
  return _s;
}
inline const std::string& Config::_internal_teams(int index) const {
  return _impl_.teams_.Get(index);
}
inline const std::string& Config::teams(int index) const {
  // @@protoc_insertion_point(field_get:Config.teams)
  return _internal_teams(index);
}
inline std::string* Config::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:Config.teams)
  return _impl_.teams_.Mutable(index);
}
inline void Config::set_teams(int index, const std::string& value) {
  _impl_.teams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Config.teams)
}
inline void Config::set_teams(int index, std::string&& value) {
  _impl_.teams_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Config.teams)
}
inline void Config::set_teams(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.teams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Config.teams)
}
inline void Config::set_teams(int index, const char* value, size_t size) {
  _impl_.teams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Config.teams)
}
inline std::string* Config::_internal_add_teams() {
  return _impl_.teams_.Add();
}
inline void Config::add_teams(const std::string& value) {
  _impl_.teams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Config.teams)
}
inline void Config::add_teams(std::string&& value) {
  _impl_.teams_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Config.teams)
}
inline void Config::add_teams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.teams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Config.teams)
}
inline void Config::add_teams(const char* value, size_t size) {
  _impl_.teams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Config.teams)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Config::teams() const {
  // @@protoc_insertion_point(field_list:Config.teams)
  return _impl_.teams_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Config::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:Config.teams)
  return &_impl_.teams_;
}

// optional bool auto_continue = 5;
inline bool Config::_internal_has_auto_continue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Config::has_auto_continue() const {
  return _internal_has_auto_continue();
}
inline void Config::clear_auto_continue() {
  _impl_.auto_continue_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Config::_internal_auto_continue() const {
  return _impl_.auto_continue_;
}
inline bool Config::auto_continue() const {
  // @@protoc_insertion_point(field_get:Config.auto_continue)
  return _internal_auto_continue();
}
inline void Config::_internal_set_auto_continue(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.auto_continue_ = value;
}
inline void Config::set_auto_continue(bool value) {
  _internal_set_auto_continue(value);
  // @@protoc_insertion_point(field_set:Config.auto_continue)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AutoRefConfig

// map<string, .AutoRefConfig.Behavior> game_event_behavior = 1;
inline int AutoRefConfig::_internal_game_event_behavior_size() const {
  return _impl_.game_event_behavior_.size();
}
inline int AutoRefConfig::game_event_behavior_size() const {
  return _internal_game_event_behavior_size();
}
inline void AutoRefConfig::clear_game_event_behavior() {
  _impl_.game_event_behavior_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >&
AutoRefConfig::_internal_game_event_behavior() const {
  return _impl_.game_event_behavior_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >&
AutoRefConfig::game_event_behavior() const {
  // @@protoc_insertion_point(field_map:AutoRefConfig.game_event_behavior)
  return _internal_game_event_behavior();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >*
AutoRefConfig::_internal_mutable_game_event_behavior() {
  return _impl_.game_event_behavior_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >*
AutoRefConfig::mutable_game_event_behavior() {
  // @@protoc_insertion_point(field_mutable_map:AutoRefConfig.game_event_behavior)
  return _internal_mutable_game_event_behavior();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Config_Behavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config_Behavior>() {
  return ::Config_Behavior_descriptor();
}
template <> struct is_proto_enum< ::AutoRefConfig_Behavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AutoRefConfig_Behavior>() {
  return ::AutoRefConfig_Behavior_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_engine_2fssl_5fgc_5fengine_5fconfig_2eproto
