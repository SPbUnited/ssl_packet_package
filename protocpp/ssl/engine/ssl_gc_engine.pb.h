// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine/ssl_gc_engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_engine_2fssl_5fgc_5fengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_engine_2fssl_5fgc_5fengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "geom/ssl_gc_geometry.pb.h"
#include "state/ssl_gc_common.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_engine_2fssl_5fgc_5fengine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_engine_2fssl_5fgc_5fengine_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_engine_2fssl_5fgc_5fengine_2eproto;
class Ball;
struct BallDefaultTypeInternal;
extern BallDefaultTypeInternal _Ball_default_instance_;
class ContinueAction;
struct ContinueActionDefaultTypeInternal;
extern ContinueActionDefaultTypeInternal _ContinueAction_default_instance_;
class ContinueHint;
struct ContinueHintDefaultTypeInternal;
extern ContinueHintDefaultTypeInternal _ContinueHint_default_instance_;
class GcState;
struct GcStateDefaultTypeInternal;
extern GcStateDefaultTypeInternal _GcState_default_instance_;
class GcStateAutoRef;
struct GcStateAutoRefDefaultTypeInternal;
extern GcStateAutoRefDefaultTypeInternal _GcStateAutoRef_default_instance_;
class GcStateTeam;
struct GcStateTeamDefaultTypeInternal;
extern GcStateTeamDefaultTypeInternal _GcStateTeam_default_instance_;
class GcStateTracker;
struct GcStateTrackerDefaultTypeInternal;
extern GcStateTrackerDefaultTypeInternal _GcStateTracker_default_instance_;
class GcState_AutoRefStateEntry_DoNotUse;
struct GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal;
extern GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal _GcState_AutoRefStateEntry_DoNotUse_default_instance_;
class GcState_TeamStateEntry_DoNotUse;
struct GcState_TeamStateEntry_DoNotUseDefaultTypeInternal;
extern GcState_TeamStateEntry_DoNotUseDefaultTypeInternal _GcState_TeamStateEntry_DoNotUse_default_instance_;
class GcState_TrackersEntry_DoNotUse;
struct GcState_TrackersEntry_DoNotUseDefaultTypeInternal;
extern GcState_TrackersEntry_DoNotUseDefaultTypeInternal _GcState_TrackersEntry_DoNotUse_default_instance_;
class Robot;
struct RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
class TeamAdvantageChoice;
struct TeamAdvantageChoiceDefaultTypeInternal;
extern TeamAdvantageChoiceDefaultTypeInternal _TeamAdvantageChoice_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Ball* Arena::CreateMaybeMessage<::Ball>(Arena*);
template<> ::ContinueAction* Arena::CreateMaybeMessage<::ContinueAction>(Arena*);
template<> ::ContinueHint* Arena::CreateMaybeMessage<::ContinueHint>(Arena*);
template<> ::GcState* Arena::CreateMaybeMessage<::GcState>(Arena*);
template<> ::GcStateAutoRef* Arena::CreateMaybeMessage<::GcStateAutoRef>(Arena*);
template<> ::GcStateTeam* Arena::CreateMaybeMessage<::GcStateTeam>(Arena*);
template<> ::GcStateTracker* Arena::CreateMaybeMessage<::GcStateTracker>(Arena*);
template<> ::GcState_AutoRefStateEntry_DoNotUse* Arena::CreateMaybeMessage<::GcState_AutoRefStateEntry_DoNotUse>(Arena*);
template<> ::GcState_TeamStateEntry_DoNotUse* Arena::CreateMaybeMessage<::GcState_TeamStateEntry_DoNotUse>(Arena*);
template<> ::GcState_TrackersEntry_DoNotUse* Arena::CreateMaybeMessage<::GcState_TrackersEntry_DoNotUse>(Arena*);
template<> ::Robot* Arena::CreateMaybeMessage<::Robot>(Arena*);
template<> ::TeamAdvantageChoice* Arena::CreateMaybeMessage<::TeamAdvantageChoice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TeamAdvantageChoice_AdvantageChoice : int {
  TeamAdvantageChoice_AdvantageChoice_STOP = 0,
  TeamAdvantageChoice_AdvantageChoice_CONTINUE = 1
};
bool TeamAdvantageChoice_AdvantageChoice_IsValid(int value);
constexpr TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_MIN = TeamAdvantageChoice_AdvantageChoice_STOP;
constexpr TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_MAX = TeamAdvantageChoice_AdvantageChoice_CONTINUE;
constexpr int TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_ARRAYSIZE = TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamAdvantageChoice_AdvantageChoice_descriptor();
template<typename T>
inline const std::string& TeamAdvantageChoice_AdvantageChoice_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeamAdvantageChoice_AdvantageChoice>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeamAdvantageChoice_AdvantageChoice_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeamAdvantageChoice_AdvantageChoice_descriptor(), enum_t_value);
}
inline bool TeamAdvantageChoice_AdvantageChoice_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TeamAdvantageChoice_AdvantageChoice* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeamAdvantageChoice_AdvantageChoice>(
    TeamAdvantageChoice_AdvantageChoice_descriptor(), name, value);
}
enum ContinueAction_Type : int {
  ContinueAction_Type_TYPE_UNKNOWN = 0,
  ContinueAction_Type_HALT = 1,
  ContinueAction_Type_RESUME_FROM_HALT = 10,
  ContinueAction_Type_STOP_GAME = 2,
  ContinueAction_Type_FORCE_START = 11,
  ContinueAction_Type_FREE_KICK = 17,
  ContinueAction_Type_NEXT_COMMAND = 3,
  ContinueAction_Type_BALL_PLACEMENT_START = 4,
  ContinueAction_Type_BALL_PLACEMENT_CANCEL = 9,
  ContinueAction_Type_BALL_PLACEMENT_COMPLETE = 14,
  ContinueAction_Type_BALL_PLACEMENT_FAIL = 15,
  ContinueAction_Type_TIMEOUT_START = 5,
  ContinueAction_Type_TIMEOUT_STOP = 6,
  ContinueAction_Type_BOT_SUBSTITUTION = 7,
  ContinueAction_Type_NEXT_STAGE = 8,
  ContinueAction_Type_END_GAME = 16,
  ContinueAction_Type_ACCEPT_GOAL = 12,
  ContinueAction_Type_REJECT_GOAL = 20,
  ContinueAction_Type_NORMAL_START = 13,
  ContinueAction_Type_CHALLENGE_ACCEPT = 18,
  ContinueAction_Type_CHALLENGE_REJECT = 19
};
bool ContinueAction_Type_IsValid(int value);
constexpr ContinueAction_Type ContinueAction_Type_Type_MIN = ContinueAction_Type_TYPE_UNKNOWN;
constexpr ContinueAction_Type ContinueAction_Type_Type_MAX = ContinueAction_Type_REJECT_GOAL;
constexpr int ContinueAction_Type_Type_ARRAYSIZE = ContinueAction_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContinueAction_Type_descriptor();
template<typename T>
inline const std::string& ContinueAction_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContinueAction_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContinueAction_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContinueAction_Type_descriptor(), enum_t_value);
}
inline bool ContinueAction_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContinueAction_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContinueAction_Type>(
    ContinueAction_Type_descriptor(), name, value);
}
enum ContinueAction_State : int {
  ContinueAction_State_STATE_UNKNOWN = 0,
  ContinueAction_State_BLOCKED = 1,
  ContinueAction_State_WAITING = 2,
  ContinueAction_State_READY_AUTO = 3,
  ContinueAction_State_READY_MANUAL = 4,
  ContinueAction_State_DISABLED = 5
};
bool ContinueAction_State_IsValid(int value);
constexpr ContinueAction_State ContinueAction_State_State_MIN = ContinueAction_State_STATE_UNKNOWN;
constexpr ContinueAction_State ContinueAction_State_State_MAX = ContinueAction_State_DISABLED;
constexpr int ContinueAction_State_State_ARRAYSIZE = ContinueAction_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContinueAction_State_descriptor();
template<typename T>
inline const std::string& ContinueAction_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContinueAction_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContinueAction_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContinueAction_State_descriptor(), enum_t_value);
}
inline bool ContinueAction_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContinueAction_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContinueAction_State>(
    ContinueAction_State_descriptor(), name, value);
}
// ===================================================================

class GcState_TeamStateEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GcState_TeamStateEntry_DoNotUse, 
    std::string, ::GcStateTeam,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GcState_TeamStateEntry_DoNotUse, 
    std::string, ::GcStateTeam,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  GcState_TeamStateEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GcState_TeamStateEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GcState_TeamStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GcState_TeamStateEntry_DoNotUse& other);
  static const GcState_TeamStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GcState_TeamStateEntry_DoNotUse*>(&_GcState_TeamStateEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "GcState.TeamStateEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};

// -------------------------------------------------------------------

class GcState_AutoRefStateEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GcState_AutoRefStateEntry_DoNotUse, 
    std::string, ::GcStateAutoRef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GcState_AutoRefStateEntry_DoNotUse, 
    std::string, ::GcStateAutoRef,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  GcState_AutoRefStateEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GcState_AutoRefStateEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GcState_AutoRefStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GcState_AutoRefStateEntry_DoNotUse& other);
  static const GcState_AutoRefStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GcState_AutoRefStateEntry_DoNotUse*>(&_GcState_AutoRefStateEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "GcState.AutoRefStateEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};

// -------------------------------------------------------------------

class GcState_TrackersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GcState_TrackersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GcState_TrackersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GcState_TrackersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GcState_TrackersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GcState_TrackersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GcState_TrackersEntry_DoNotUse& other);
  static const GcState_TrackersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GcState_TrackersEntry_DoNotUse*>(&_GcState_TrackersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "GcState.TrackersEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "GcState.TrackersEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};

// -------------------------------------------------------------------

class GcState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GcState) */ {
 public:
  inline GcState() : GcState(nullptr) {}
  ~GcState() override;
  explicit PROTOBUF_CONSTEXPR GcState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GcState(const GcState& from);
  GcState(GcState&& from) noexcept
    : GcState() {
    *this = ::std::move(from);
  }

  inline GcState& operator=(const GcState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GcState& operator=(GcState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GcState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GcState* internal_default_instance() {
    return reinterpret_cast<const GcState*>(
               &_GcState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GcState& a, GcState& b) {
    a.Swap(&b);
  }
  inline void Swap(GcState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GcState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GcState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GcState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GcState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GcState& from) {
    GcState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GcState";
  }
  protected:
  explicit GcState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTeamStateFieldNumber = 1,
    kAutoRefStateFieldNumber = 2,
    kTrackersFieldNumber = 3,
    kContinueActionsFieldNumber = 4,
    kContinueHintsFieldNumber = 5,
  };
  // map<string, .GcStateTeam> team_state = 1;
  int team_state_size() const;
  private:
  int _internal_team_state_size() const;
  public:
  void clear_team_state();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >&
      _internal_team_state() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >*
      _internal_mutable_team_state();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >&
      team_state() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >*
      mutable_team_state();

  // map<string, .GcStateAutoRef> auto_ref_state = 2;
  int auto_ref_state_size() const;
  private:
  int _internal_auto_ref_state_size() const;
  public:
  void clear_auto_ref_state();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >&
      _internal_auto_ref_state() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >*
      _internal_mutable_auto_ref_state();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >&
      auto_ref_state() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >*
      mutable_auto_ref_state();

  // map<string, string> trackers = 3;
  int trackers_size() const;
  private:
  int _internal_trackers_size() const;
  public:
  void clear_trackers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_trackers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_trackers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      trackers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_trackers();

  // repeated .ContinueAction continue_actions = 4;
  int continue_actions_size() const;
  private:
  int _internal_continue_actions_size() const;
  public:
  void clear_continue_actions();
  ::ContinueAction* mutable_continue_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContinueAction >*
      mutable_continue_actions();
  private:
  const ::ContinueAction& _internal_continue_actions(int index) const;
  ::ContinueAction* _internal_add_continue_actions();
  public:
  const ::ContinueAction& continue_actions(int index) const;
  ::ContinueAction* add_continue_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContinueAction >&
      continue_actions() const;

  // repeated .ContinueHint continue_hints = 5;
  int continue_hints_size() const;
  private:
  int _internal_continue_hints_size() const;
  public:
  void clear_continue_hints();
  ::ContinueHint* mutable_continue_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContinueHint >*
      mutable_continue_hints();
  private:
  const ::ContinueHint& _internal_continue_hints(int index) const;
  ::ContinueHint* _internal_add_continue_hints();
  public:
  const ::ContinueHint& continue_hints(int index) const;
  ::ContinueHint* add_continue_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContinueHint >&
      continue_hints() const;

  // @@protoc_insertion_point(class_scope:GcState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GcState_TeamStateEntry_DoNotUse,
        std::string, ::GcStateTeam,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> team_state_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GcState_AutoRefStateEntry_DoNotUse,
        std::string, ::GcStateAutoRef,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> auto_ref_state_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GcState_TrackersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> trackers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContinueAction > continue_actions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContinueHint > continue_hints_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};
// -------------------------------------------------------------------

class GcStateTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GcStateTeam) */ {
 public:
  inline GcStateTeam() : GcStateTeam(nullptr) {}
  ~GcStateTeam() override;
  explicit PROTOBUF_CONSTEXPR GcStateTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GcStateTeam(const GcStateTeam& from);
  GcStateTeam(GcStateTeam&& from) noexcept
    : GcStateTeam() {
    *this = ::std::move(from);
  }

  inline GcStateTeam& operator=(const GcStateTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline GcStateTeam& operator=(GcStateTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GcStateTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const GcStateTeam* internal_default_instance() {
    return reinterpret_cast<const GcStateTeam*>(
               &_GcStateTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GcStateTeam& a, GcStateTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(GcStateTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GcStateTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GcStateTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GcStateTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GcStateTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GcStateTeam& from) {
    GcStateTeam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcStateTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GcStateTeam";
  }
  protected:
  explicit GcStateTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdvantageChoiceFieldNumber = 5,
    kConnectedFieldNumber = 1,
    kConnectionVerifiedFieldNumber = 2,
    kRemoteControlConnectedFieldNumber = 3,
    kRemoteControlConnectionVerifiedFieldNumber = 4,
  };
  // optional .TeamAdvantageChoice advantage_choice = 5;
  bool has_advantage_choice() const;
  private:
  bool _internal_has_advantage_choice() const;
  public:
  void clear_advantage_choice();
  const ::TeamAdvantageChoice& advantage_choice() const;
  PROTOBUF_NODISCARD ::TeamAdvantageChoice* release_advantage_choice();
  ::TeamAdvantageChoice* mutable_advantage_choice();
  void set_allocated_advantage_choice(::TeamAdvantageChoice* advantage_choice);
  private:
  const ::TeamAdvantageChoice& _internal_advantage_choice() const;
  ::TeamAdvantageChoice* _internal_mutable_advantage_choice();
  public:
  void unsafe_arena_set_allocated_advantage_choice(
      ::TeamAdvantageChoice* advantage_choice);
  ::TeamAdvantageChoice* unsafe_arena_release_advantage_choice();

  // optional bool connected = 1;
  bool has_connected() const;
  private:
  bool _internal_has_connected() const;
  public:
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // optional bool connection_verified = 2;
  bool has_connection_verified() const;
  private:
  bool _internal_has_connection_verified() const;
  public:
  void clear_connection_verified();
  bool connection_verified() const;
  void set_connection_verified(bool value);
  private:
  bool _internal_connection_verified() const;
  void _internal_set_connection_verified(bool value);
  public:

  // optional bool remote_control_connected = 3;
  bool has_remote_control_connected() const;
  private:
  bool _internal_has_remote_control_connected() const;
  public:
  void clear_remote_control_connected();
  bool remote_control_connected() const;
  void set_remote_control_connected(bool value);
  private:
  bool _internal_remote_control_connected() const;
  void _internal_set_remote_control_connected(bool value);
  public:

  // optional bool remote_control_connection_verified = 4;
  bool has_remote_control_connection_verified() const;
  private:
  bool _internal_has_remote_control_connection_verified() const;
  public:
  void clear_remote_control_connection_verified();
  bool remote_control_connection_verified() const;
  void set_remote_control_connection_verified(bool value);
  private:
  bool _internal_remote_control_connection_verified() const;
  void _internal_set_remote_control_connection_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GcStateTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TeamAdvantageChoice* advantage_choice_;
    bool connected_;
    bool connection_verified_;
    bool remote_control_connected_;
    bool remote_control_connection_verified_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};
// -------------------------------------------------------------------

class TeamAdvantageChoice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeamAdvantageChoice) */ {
 public:
  inline TeamAdvantageChoice() : TeamAdvantageChoice(nullptr) {}
  ~TeamAdvantageChoice() override;
  explicit PROTOBUF_CONSTEXPR TeamAdvantageChoice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamAdvantageChoice(const TeamAdvantageChoice& from);
  TeamAdvantageChoice(TeamAdvantageChoice&& from) noexcept
    : TeamAdvantageChoice() {
    *this = ::std::move(from);
  }

  inline TeamAdvantageChoice& operator=(const TeamAdvantageChoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamAdvantageChoice& operator=(TeamAdvantageChoice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamAdvantageChoice& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamAdvantageChoice* internal_default_instance() {
    return reinterpret_cast<const TeamAdvantageChoice*>(
               &_TeamAdvantageChoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TeamAdvantageChoice& a, TeamAdvantageChoice& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamAdvantageChoice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamAdvantageChoice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamAdvantageChoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamAdvantageChoice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamAdvantageChoice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamAdvantageChoice& from) {
    TeamAdvantageChoice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamAdvantageChoice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeamAdvantageChoice";
  }
  protected:
  explicit TeamAdvantageChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TeamAdvantageChoice_AdvantageChoice AdvantageChoice;
  static constexpr AdvantageChoice STOP =
    TeamAdvantageChoice_AdvantageChoice_STOP;
  static constexpr AdvantageChoice CONTINUE =
    TeamAdvantageChoice_AdvantageChoice_CONTINUE;
  static inline bool AdvantageChoice_IsValid(int value) {
    return TeamAdvantageChoice_AdvantageChoice_IsValid(value);
  }
  static constexpr AdvantageChoice AdvantageChoice_MIN =
    TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_MIN;
  static constexpr AdvantageChoice AdvantageChoice_MAX =
    TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_MAX;
  static constexpr int AdvantageChoice_ARRAYSIZE =
    TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AdvantageChoice_descriptor() {
    return TeamAdvantageChoice_AdvantageChoice_descriptor();
  }
  template<typename T>
  static inline const std::string& AdvantageChoice_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AdvantageChoice>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AdvantageChoice_Name.");
    return TeamAdvantageChoice_AdvantageChoice_Name(enum_t_value);
  }
  static inline bool AdvantageChoice_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AdvantageChoice* value) {
    return TeamAdvantageChoice_AdvantageChoice_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChoiceFieldNumber = 1,
  };
  // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
  bool has_choice() const;
  private:
  bool _internal_has_choice() const;
  public:
  void clear_choice();
  ::TeamAdvantageChoice_AdvantageChoice choice() const;
  void set_choice(::TeamAdvantageChoice_AdvantageChoice value);
  private:
  ::TeamAdvantageChoice_AdvantageChoice _internal_choice() const;
  void _internal_set_choice(::TeamAdvantageChoice_AdvantageChoice value);
  public:

  // @@protoc_insertion_point(class_scope:TeamAdvantageChoice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int choice_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};
// -------------------------------------------------------------------

class GcStateAutoRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GcStateAutoRef) */ {
 public:
  inline GcStateAutoRef() : GcStateAutoRef(nullptr) {}
  ~GcStateAutoRef() override;
  explicit PROTOBUF_CONSTEXPR GcStateAutoRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GcStateAutoRef(const GcStateAutoRef& from);
  GcStateAutoRef(GcStateAutoRef&& from) noexcept
    : GcStateAutoRef() {
    *this = ::std::move(from);
  }

  inline GcStateAutoRef& operator=(const GcStateAutoRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline GcStateAutoRef& operator=(GcStateAutoRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GcStateAutoRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const GcStateAutoRef* internal_default_instance() {
    return reinterpret_cast<const GcStateAutoRef*>(
               &_GcStateAutoRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GcStateAutoRef& a, GcStateAutoRef& b) {
    a.Swap(&b);
  }
  inline void Swap(GcStateAutoRef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GcStateAutoRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GcStateAutoRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GcStateAutoRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GcStateAutoRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GcStateAutoRef& from) {
    GcStateAutoRef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcStateAutoRef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GcStateAutoRef";
  }
  protected:
  explicit GcStateAutoRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionVerifiedFieldNumber = 1,
  };
  // optional bool connection_verified = 1;
  bool has_connection_verified() const;
  private:
  bool _internal_has_connection_verified() const;
  public:
  void clear_connection_verified();
  bool connection_verified() const;
  void set_connection_verified(bool value);
  private:
  bool _internal_connection_verified() const;
  void _internal_set_connection_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GcStateAutoRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool connection_verified_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};
// -------------------------------------------------------------------

class GcStateTracker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GcStateTracker) */ {
 public:
  inline GcStateTracker() : GcStateTracker(nullptr) {}
  ~GcStateTracker() override;
  explicit PROTOBUF_CONSTEXPR GcStateTracker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GcStateTracker(const GcStateTracker& from);
  GcStateTracker(GcStateTracker&& from) noexcept
    : GcStateTracker() {
    *this = ::std::move(from);
  }

  inline GcStateTracker& operator=(const GcStateTracker& from) {
    CopyFrom(from);
    return *this;
  }
  inline GcStateTracker& operator=(GcStateTracker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GcStateTracker& default_instance() {
    return *internal_default_instance();
  }
  static inline const GcStateTracker* internal_default_instance() {
    return reinterpret_cast<const GcStateTracker*>(
               &_GcStateTracker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GcStateTracker& a, GcStateTracker& b) {
    a.Swap(&b);
  }
  inline void Swap(GcStateTracker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GcStateTracker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GcStateTracker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GcStateTracker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GcStateTracker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GcStateTracker& from) {
    GcStateTracker::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcStateTracker* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GcStateTracker";
  }
  protected:
  explicit GcStateTracker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotsFieldNumber = 3,
    kSourceNameFieldNumber = 1,
    kUuidFieldNumber = 4,
    kBallFieldNumber = 2,
  };
  // repeated .Robot robots = 3;
  int robots_size() const;
  private:
  int _internal_robots_size() const;
  public:
  void clear_robots();
  ::Robot* mutable_robots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Robot >*
      mutable_robots();
  private:
  const ::Robot& _internal_robots(int index) const;
  ::Robot* _internal_add_robots();
  public:
  const ::Robot& robots(int index) const;
  ::Robot* add_robots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Robot >&
      robots() const;

  // optional string source_name = 1;
  bool has_source_name() const;
  private:
  bool _internal_has_source_name() const;
  public:
  void clear_source_name();
  const std::string& source_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_name();
  PROTOBUF_NODISCARD std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // optional string uuid = 4;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional .Ball ball = 2;
  bool has_ball() const;
  private:
  bool _internal_has_ball() const;
  public:
  void clear_ball();
  const ::Ball& ball() const;
  PROTOBUF_NODISCARD ::Ball* release_ball();
  ::Ball* mutable_ball();
  void set_allocated_ball(::Ball* ball);
  private:
  const ::Ball& _internal_ball() const;
  ::Ball* _internal_mutable_ball();
  public:
  void unsafe_arena_set_allocated_ball(
      ::Ball* ball);
  ::Ball* unsafe_arena_release_ball();

  // @@protoc_insertion_point(class_scope:GcStateTracker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Robot > robots_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::Ball* ball_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};
// -------------------------------------------------------------------

class Ball final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ball) */ {
 public:
  inline Ball() : Ball(nullptr) {}
  ~Ball() override;
  explicit PROTOBUF_CONSTEXPR Ball(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ball(const Ball& from);
  Ball(Ball&& from) noexcept
    : Ball() {
    *this = ::std::move(from);
  }

  inline Ball& operator=(const Ball& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ball& operator=(Ball&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ball& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ball* internal_default_instance() {
    return reinterpret_cast<const Ball*>(
               &_Ball_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Ball& a, Ball& b) {
    a.Swap(&b);
  }
  inline void Swap(Ball* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ball* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ball* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ball>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ball& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ball& from) {
    Ball::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ball* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ball";
  }
  protected:
  explicit Ball(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kVelFieldNumber = 2,
  };
  // optional .Vector3 pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Vector3& pos() const;
  PROTOBUF_NODISCARD ::Vector3* release_pos();
  ::Vector3* mutable_pos();
  void set_allocated_pos(::Vector3* pos);
  private:
  const ::Vector3& _internal_pos() const;
  ::Vector3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Vector3* pos);
  ::Vector3* unsafe_arena_release_pos();

  // optional .Vector3 vel = 2;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::Vector3& vel() const;
  PROTOBUF_NODISCARD ::Vector3* release_vel();
  ::Vector3* mutable_vel();
  void set_allocated_vel(::Vector3* vel);
  private:
  const ::Vector3& _internal_vel() const;
  ::Vector3* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::Vector3* vel);
  ::Vector3* unsafe_arena_release_vel();

  // @@protoc_insertion_point(class_scope:Ball)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Vector3* pos_;
    ::Vector3* vel_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};
// -------------------------------------------------------------------

class Robot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Robot) */ {
 public:
  inline Robot() : Robot(nullptr) {}
  ~Robot() override;
  explicit PROTOBUF_CONSTEXPR Robot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Robot(const Robot& from);
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot& operator=(Robot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Robot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Robot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Robot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Robot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Robot& from) {
    Robot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Robot";
  }
  protected:
  explicit Robot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPosFieldNumber = 2,
  };
  // optional .RobotId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::RobotId& id() const;
  PROTOBUF_NODISCARD ::RobotId* release_id();
  ::RobotId* mutable_id();
  void set_allocated_id(::RobotId* id);
  private:
  const ::RobotId& _internal_id() const;
  ::RobotId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::RobotId* id);
  ::RobotId* unsafe_arena_release_id();

  // optional .Vector2 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Vector2& pos() const;
  PROTOBUF_NODISCARD ::Vector2* release_pos();
  ::Vector2* mutable_pos();
  void set_allocated_pos(::Vector2* pos);
  private:
  const ::Vector2& _internal_pos() const;
  ::Vector2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Vector2* pos);
  ::Vector2* unsafe_arena_release_pos();

  // @@protoc_insertion_point(class_scope:Robot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::RobotId* id_;
    ::Vector2* pos_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};
// -------------------------------------------------------------------

class ContinueAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContinueAction) */ {
 public:
  inline ContinueAction() : ContinueAction(nullptr) {}
  ~ContinueAction() override;
  explicit PROTOBUF_CONSTEXPR ContinueAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContinueAction(const ContinueAction& from);
  ContinueAction(ContinueAction&& from) noexcept
    : ContinueAction() {
    *this = ::std::move(from);
  }

  inline ContinueAction& operator=(const ContinueAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContinueAction& operator=(ContinueAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContinueAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContinueAction* internal_default_instance() {
    return reinterpret_cast<const ContinueAction*>(
               &_ContinueAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ContinueAction& a, ContinueAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ContinueAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContinueAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContinueAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContinueAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContinueAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContinueAction& from) {
    ContinueAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContinueAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContinueAction";
  }
  protected:
  explicit ContinueAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContinueAction_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    ContinueAction_Type_TYPE_UNKNOWN;
  static constexpr Type HALT =
    ContinueAction_Type_HALT;
  static constexpr Type RESUME_FROM_HALT =
    ContinueAction_Type_RESUME_FROM_HALT;
  static constexpr Type STOP_GAME =
    ContinueAction_Type_STOP_GAME;
  static constexpr Type FORCE_START =
    ContinueAction_Type_FORCE_START;
  static constexpr Type FREE_KICK =
    ContinueAction_Type_FREE_KICK;
  static constexpr Type NEXT_COMMAND =
    ContinueAction_Type_NEXT_COMMAND;
  static constexpr Type BALL_PLACEMENT_START =
    ContinueAction_Type_BALL_PLACEMENT_START;
  static constexpr Type BALL_PLACEMENT_CANCEL =
    ContinueAction_Type_BALL_PLACEMENT_CANCEL;
  static constexpr Type BALL_PLACEMENT_COMPLETE =
    ContinueAction_Type_BALL_PLACEMENT_COMPLETE;
  static constexpr Type BALL_PLACEMENT_FAIL =
    ContinueAction_Type_BALL_PLACEMENT_FAIL;
  static constexpr Type TIMEOUT_START =
    ContinueAction_Type_TIMEOUT_START;
  static constexpr Type TIMEOUT_STOP =
    ContinueAction_Type_TIMEOUT_STOP;
  static constexpr Type BOT_SUBSTITUTION =
    ContinueAction_Type_BOT_SUBSTITUTION;
  static constexpr Type NEXT_STAGE =
    ContinueAction_Type_NEXT_STAGE;
  static constexpr Type END_GAME =
    ContinueAction_Type_END_GAME;
  static constexpr Type ACCEPT_GOAL =
    ContinueAction_Type_ACCEPT_GOAL;
  static constexpr Type REJECT_GOAL =
    ContinueAction_Type_REJECT_GOAL;
  static constexpr Type NORMAL_START =
    ContinueAction_Type_NORMAL_START;
  static constexpr Type CHALLENGE_ACCEPT =
    ContinueAction_Type_CHALLENGE_ACCEPT;
  static constexpr Type CHALLENGE_REJECT =
    ContinueAction_Type_CHALLENGE_REJECT;
  static inline bool Type_IsValid(int value) {
    return ContinueAction_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ContinueAction_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ContinueAction_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ContinueAction_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ContinueAction_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ContinueAction_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ContinueAction_Type_Parse(name, value);
  }

  typedef ContinueAction_State State;
  static constexpr State STATE_UNKNOWN =
    ContinueAction_State_STATE_UNKNOWN;
  static constexpr State BLOCKED =
    ContinueAction_State_BLOCKED;
  static constexpr State WAITING =
    ContinueAction_State_WAITING;
  static constexpr State READY_AUTO =
    ContinueAction_State_READY_AUTO;
  static constexpr State READY_MANUAL =
    ContinueAction_State_READY_MANUAL;
  static constexpr State DISABLED =
    ContinueAction_State_DISABLED;
  static inline bool State_IsValid(int value) {
    return ContinueAction_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ContinueAction_State_State_MIN;
  static constexpr State State_MAX =
    ContinueAction_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ContinueAction_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ContinueAction_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ContinueAction_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ContinueAction_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContinuationIssuesFieldNumber = 3,
    kReadyAtFieldNumber = 4,
    kTypeFieldNumber = 1,
    kForTeamFieldNumber = 2,
    kStateFieldNumber = 5,
  };
  // repeated string continuation_issues = 3;
  int continuation_issues_size() const;
  private:
  int _internal_continuation_issues_size() const;
  public:
  void clear_continuation_issues();
  const std::string& continuation_issues(int index) const;
  std::string* mutable_continuation_issues(int index);
  void set_continuation_issues(int index, const std::string& value);
  void set_continuation_issues(int index, std::string&& value);
  void set_continuation_issues(int index, const char* value);
  void set_continuation_issues(int index, const char* value, size_t size);
  std::string* add_continuation_issues();
  void add_continuation_issues(const std::string& value);
  void add_continuation_issues(std::string&& value);
  void add_continuation_issues(const char* value);
  void add_continuation_issues(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& continuation_issues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_continuation_issues();
  private:
  const std::string& _internal_continuation_issues(int index) const;
  std::string* _internal_add_continuation_issues();
  public:

  // optional .google.protobuf.Timestamp ready_at = 4;
  bool has_ready_at() const;
  private:
  bool _internal_has_ready_at() const;
  public:
  void clear_ready_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ready_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ready_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ready_at();
  void set_allocated_ready_at(::PROTOBUF_NAMESPACE_ID::Timestamp* ready_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ready_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ready_at();
  public:
  void unsafe_arena_set_allocated_ready_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ready_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ready_at();

  // required .ContinueAction.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ContinueAction_Type type() const;
  void set_type(::ContinueAction_Type value);
  private:
  ::ContinueAction_Type _internal_type() const;
  void _internal_set_type(::ContinueAction_Type value);
  public:

  // required .Team for_team = 2;
  bool has_for_team() const;
  private:
  bool _internal_has_for_team() const;
  public:
  void clear_for_team();
  ::Team for_team() const;
  void set_for_team(::Team value);
  private:
  ::Team _internal_for_team() const;
  void _internal_set_for_team(::Team value);
  public:

  // optional .ContinueAction.State state = 5;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::ContinueAction_State state() const;
  void set_state(::ContinueAction_State value);
  private:
  ::ContinueAction_State _internal_state() const;
  void _internal_set_state(::ContinueAction_State value);
  public:

  // @@protoc_insertion_point(class_scope:ContinueAction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> continuation_issues_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ready_at_;
    int type_;
    int for_team_;
    int state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};
// -------------------------------------------------------------------

class ContinueHint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContinueHint) */ {
 public:
  inline ContinueHint() : ContinueHint(nullptr) {}
  ~ContinueHint() override;
  explicit PROTOBUF_CONSTEXPR ContinueHint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContinueHint(const ContinueHint& from);
  ContinueHint(ContinueHint&& from) noexcept
    : ContinueHint() {
    *this = ::std::move(from);
  }

  inline ContinueHint& operator=(const ContinueHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContinueHint& operator=(ContinueHint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContinueHint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContinueHint* internal_default_instance() {
    return reinterpret_cast<const ContinueHint*>(
               &_ContinueHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ContinueHint& a, ContinueHint& b) {
    a.Swap(&b);
  }
  inline void Swap(ContinueHint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContinueHint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContinueHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContinueHint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContinueHint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContinueHint& from) {
    ContinueHint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContinueHint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContinueHint";
  }
  protected:
  explicit ContinueHint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:ContinueHint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_engine_2fssl_5fgc_5fengine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GcState

// map<string, .GcStateTeam> team_state = 1;
inline int GcState::_internal_team_state_size() const {
  return _impl_.team_state_.size();
}
inline int GcState::team_state_size() const {
  return _internal_team_state_size();
}
inline void GcState::clear_team_state() {
  _impl_.team_state_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >&
GcState::_internal_team_state() const {
  return _impl_.team_state_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >&
GcState::team_state() const {
  // @@protoc_insertion_point(field_map:GcState.team_state)
  return _internal_team_state();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >*
GcState::_internal_mutable_team_state() {
  return _impl_.team_state_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >*
GcState::mutable_team_state() {
  // @@protoc_insertion_point(field_mutable_map:GcState.team_state)
  return _internal_mutable_team_state();
}

// map<string, .GcStateAutoRef> auto_ref_state = 2;
inline int GcState::_internal_auto_ref_state_size() const {
  return _impl_.auto_ref_state_.size();
}
inline int GcState::auto_ref_state_size() const {
  return _internal_auto_ref_state_size();
}
inline void GcState::clear_auto_ref_state() {
  _impl_.auto_ref_state_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >&
GcState::_internal_auto_ref_state() const {
  return _impl_.auto_ref_state_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >&
GcState::auto_ref_state() const {
  // @@protoc_insertion_point(field_map:GcState.auto_ref_state)
  return _internal_auto_ref_state();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >*
GcState::_internal_mutable_auto_ref_state() {
  return _impl_.auto_ref_state_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >*
GcState::mutable_auto_ref_state() {
  // @@protoc_insertion_point(field_mutable_map:GcState.auto_ref_state)
  return _internal_mutable_auto_ref_state();
}

// map<string, string> trackers = 3;
inline int GcState::_internal_trackers_size() const {
  return _impl_.trackers_.size();
}
inline int GcState::trackers_size() const {
  return _internal_trackers_size();
}
inline void GcState::clear_trackers() {
  _impl_.trackers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GcState::_internal_trackers() const {
  return _impl_.trackers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GcState::trackers() const {
  // @@protoc_insertion_point(field_map:GcState.trackers)
  return _internal_trackers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GcState::_internal_mutable_trackers() {
  return _impl_.trackers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GcState::mutable_trackers() {
  // @@protoc_insertion_point(field_mutable_map:GcState.trackers)
  return _internal_mutable_trackers();
}

// repeated .ContinueAction continue_actions = 4;
inline int GcState::_internal_continue_actions_size() const {
  return _impl_.continue_actions_.size();
}
inline int GcState::continue_actions_size() const {
  return _internal_continue_actions_size();
}
inline void GcState::clear_continue_actions() {
  _impl_.continue_actions_.Clear();
}
inline ::ContinueAction* GcState::mutable_continue_actions(int index) {
  // @@protoc_insertion_point(field_mutable:GcState.continue_actions)
  return _impl_.continue_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContinueAction >*
GcState::mutable_continue_actions() {
  // @@protoc_insertion_point(field_mutable_list:GcState.continue_actions)
  return &_impl_.continue_actions_;
}
inline const ::ContinueAction& GcState::_internal_continue_actions(int index) const {
  return _impl_.continue_actions_.Get(index);
}
inline const ::ContinueAction& GcState::continue_actions(int index) const {
  // @@protoc_insertion_point(field_get:GcState.continue_actions)
  return _internal_continue_actions(index);
}
inline ::ContinueAction* GcState::_internal_add_continue_actions() {
  return _impl_.continue_actions_.Add();
}
inline ::ContinueAction* GcState::add_continue_actions() {
  ::ContinueAction* _add = _internal_add_continue_actions();
  // @@protoc_insertion_point(field_add:GcState.continue_actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContinueAction >&
GcState::continue_actions() const {
  // @@protoc_insertion_point(field_list:GcState.continue_actions)
  return _impl_.continue_actions_;
}

// repeated .ContinueHint continue_hints = 5;
inline int GcState::_internal_continue_hints_size() const {
  return _impl_.continue_hints_.size();
}
inline int GcState::continue_hints_size() const {
  return _internal_continue_hints_size();
}
inline void GcState::clear_continue_hints() {
  _impl_.continue_hints_.Clear();
}
inline ::ContinueHint* GcState::mutable_continue_hints(int index) {
  // @@protoc_insertion_point(field_mutable:GcState.continue_hints)
  return _impl_.continue_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContinueHint >*
GcState::mutable_continue_hints() {
  // @@protoc_insertion_point(field_mutable_list:GcState.continue_hints)
  return &_impl_.continue_hints_;
}
inline const ::ContinueHint& GcState::_internal_continue_hints(int index) const {
  return _impl_.continue_hints_.Get(index);
}
inline const ::ContinueHint& GcState::continue_hints(int index) const {
  // @@protoc_insertion_point(field_get:GcState.continue_hints)
  return _internal_continue_hints(index);
}
inline ::ContinueHint* GcState::_internal_add_continue_hints() {
  return _impl_.continue_hints_.Add();
}
inline ::ContinueHint* GcState::add_continue_hints() {
  ::ContinueHint* _add = _internal_add_continue_hints();
  // @@protoc_insertion_point(field_add:GcState.continue_hints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContinueHint >&
GcState::continue_hints() const {
  // @@protoc_insertion_point(field_list:GcState.continue_hints)
  return _impl_.continue_hints_;
}

// -------------------------------------------------------------------

// GcStateTeam

// optional bool connected = 1;
inline bool GcStateTeam::_internal_has_connected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GcStateTeam::has_connected() const {
  return _internal_has_connected();
}
inline void GcStateTeam::clear_connected() {
  _impl_.connected_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool GcStateTeam::_internal_connected() const {
  return _impl_.connected_;
}
inline bool GcStateTeam::connected() const {
  // @@protoc_insertion_point(field_get:GcStateTeam.connected)
  return _internal_connected();
}
inline void GcStateTeam::_internal_set_connected(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.connected_ = value;
}
inline void GcStateTeam::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:GcStateTeam.connected)
}

// optional bool connection_verified = 2;
inline bool GcStateTeam::_internal_has_connection_verified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GcStateTeam::has_connection_verified() const {
  return _internal_has_connection_verified();
}
inline void GcStateTeam::clear_connection_verified() {
  _impl_.connection_verified_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool GcStateTeam::_internal_connection_verified() const {
  return _impl_.connection_verified_;
}
inline bool GcStateTeam::connection_verified() const {
  // @@protoc_insertion_point(field_get:GcStateTeam.connection_verified)
  return _internal_connection_verified();
}
inline void GcStateTeam::_internal_set_connection_verified(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.connection_verified_ = value;
}
inline void GcStateTeam::set_connection_verified(bool value) {
  _internal_set_connection_verified(value);
  // @@protoc_insertion_point(field_set:GcStateTeam.connection_verified)
}

// optional bool remote_control_connected = 3;
inline bool GcStateTeam::_internal_has_remote_control_connected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GcStateTeam::has_remote_control_connected() const {
  return _internal_has_remote_control_connected();
}
inline void GcStateTeam::clear_remote_control_connected() {
  _impl_.remote_control_connected_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool GcStateTeam::_internal_remote_control_connected() const {
  return _impl_.remote_control_connected_;
}
inline bool GcStateTeam::remote_control_connected() const {
  // @@protoc_insertion_point(field_get:GcStateTeam.remote_control_connected)
  return _internal_remote_control_connected();
}
inline void GcStateTeam::_internal_set_remote_control_connected(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.remote_control_connected_ = value;
}
inline void GcStateTeam::set_remote_control_connected(bool value) {
  _internal_set_remote_control_connected(value);
  // @@protoc_insertion_point(field_set:GcStateTeam.remote_control_connected)
}

// optional bool remote_control_connection_verified = 4;
inline bool GcStateTeam::_internal_has_remote_control_connection_verified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GcStateTeam::has_remote_control_connection_verified() const {
  return _internal_has_remote_control_connection_verified();
}
inline void GcStateTeam::clear_remote_control_connection_verified() {
  _impl_.remote_control_connection_verified_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool GcStateTeam::_internal_remote_control_connection_verified() const {
  return _impl_.remote_control_connection_verified_;
}
inline bool GcStateTeam::remote_control_connection_verified() const {
  // @@protoc_insertion_point(field_get:GcStateTeam.remote_control_connection_verified)
  return _internal_remote_control_connection_verified();
}
inline void GcStateTeam::_internal_set_remote_control_connection_verified(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.remote_control_connection_verified_ = value;
}
inline void GcStateTeam::set_remote_control_connection_verified(bool value) {
  _internal_set_remote_control_connection_verified(value);
  // @@protoc_insertion_point(field_set:GcStateTeam.remote_control_connection_verified)
}

// optional .TeamAdvantageChoice advantage_choice = 5;
inline bool GcStateTeam::_internal_has_advantage_choice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advantage_choice_ != nullptr);
  return value;
}
inline bool GcStateTeam::has_advantage_choice() const {
  return _internal_has_advantage_choice();
}
inline void GcStateTeam::clear_advantage_choice() {
  if (_impl_.advantage_choice_ != nullptr) _impl_.advantage_choice_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TeamAdvantageChoice& GcStateTeam::_internal_advantage_choice() const {
  const ::TeamAdvantageChoice* p = _impl_.advantage_choice_;
  return p != nullptr ? *p : reinterpret_cast<const ::TeamAdvantageChoice&>(
      ::_TeamAdvantageChoice_default_instance_);
}
inline const ::TeamAdvantageChoice& GcStateTeam::advantage_choice() const {
  // @@protoc_insertion_point(field_get:GcStateTeam.advantage_choice)
  return _internal_advantage_choice();
}
inline void GcStateTeam::unsafe_arena_set_allocated_advantage_choice(
    ::TeamAdvantageChoice* advantage_choice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advantage_choice_);
  }
  _impl_.advantage_choice_ = advantage_choice;
  if (advantage_choice) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GcStateTeam.advantage_choice)
}
inline ::TeamAdvantageChoice* GcStateTeam::release_advantage_choice() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TeamAdvantageChoice* temp = _impl_.advantage_choice_;
  _impl_.advantage_choice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TeamAdvantageChoice* GcStateTeam::unsafe_arena_release_advantage_choice() {
  // @@protoc_insertion_point(field_release:GcStateTeam.advantage_choice)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TeamAdvantageChoice* temp = _impl_.advantage_choice_;
  _impl_.advantage_choice_ = nullptr;
  return temp;
}
inline ::TeamAdvantageChoice* GcStateTeam::_internal_mutable_advantage_choice() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.advantage_choice_ == nullptr) {
    auto* p = CreateMaybeMessage<::TeamAdvantageChoice>(GetArenaForAllocation());
    _impl_.advantage_choice_ = p;
  }
  return _impl_.advantage_choice_;
}
inline ::TeamAdvantageChoice* GcStateTeam::mutable_advantage_choice() {
  ::TeamAdvantageChoice* _msg = _internal_mutable_advantage_choice();
  // @@protoc_insertion_point(field_mutable:GcStateTeam.advantage_choice)
  return _msg;
}
inline void GcStateTeam::set_allocated_advantage_choice(::TeamAdvantageChoice* advantage_choice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.advantage_choice_;
  }
  if (advantage_choice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(advantage_choice);
    if (message_arena != submessage_arena) {
      advantage_choice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advantage_choice, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.advantage_choice_ = advantage_choice;
  // @@protoc_insertion_point(field_set_allocated:GcStateTeam.advantage_choice)
}

// -------------------------------------------------------------------

// TeamAdvantageChoice

// optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
inline bool TeamAdvantageChoice::_internal_has_choice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TeamAdvantageChoice::has_choice() const {
  return _internal_has_choice();
}
inline void TeamAdvantageChoice::clear_choice() {
  _impl_.choice_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::_internal_choice() const {
  return static_cast< ::TeamAdvantageChoice_AdvantageChoice >(_impl_.choice_);
}
inline ::TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::choice() const {
  // @@protoc_insertion_point(field_get:TeamAdvantageChoice.choice)
  return _internal_choice();
}
inline void TeamAdvantageChoice::_internal_set_choice(::TeamAdvantageChoice_AdvantageChoice value) {
  assert(::TeamAdvantageChoice_AdvantageChoice_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.choice_ = value;
}
inline void TeamAdvantageChoice::set_choice(::TeamAdvantageChoice_AdvantageChoice value) {
  _internal_set_choice(value);
  // @@protoc_insertion_point(field_set:TeamAdvantageChoice.choice)
}

// -------------------------------------------------------------------

// GcStateAutoRef

// optional bool connection_verified = 1;
inline bool GcStateAutoRef::_internal_has_connection_verified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GcStateAutoRef::has_connection_verified() const {
  return _internal_has_connection_verified();
}
inline void GcStateAutoRef::clear_connection_verified() {
  _impl_.connection_verified_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool GcStateAutoRef::_internal_connection_verified() const {
  return _impl_.connection_verified_;
}
inline bool GcStateAutoRef::connection_verified() const {
  // @@protoc_insertion_point(field_get:GcStateAutoRef.connection_verified)
  return _internal_connection_verified();
}
inline void GcStateAutoRef::_internal_set_connection_verified(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.connection_verified_ = value;
}
inline void GcStateAutoRef::set_connection_verified(bool value) {
  _internal_set_connection_verified(value);
  // @@protoc_insertion_point(field_set:GcStateAutoRef.connection_verified)
}

// -------------------------------------------------------------------

// GcStateTracker

// optional string source_name = 1;
inline bool GcStateTracker::_internal_has_source_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GcStateTracker::has_source_name() const {
  return _internal_has_source_name();
}
inline void GcStateTracker::clear_source_name() {
  _impl_.source_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GcStateTracker::source_name() const {
  // @@protoc_insertion_point(field_get:GcStateTracker.source_name)
  return _internal_source_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GcStateTracker::set_source_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GcStateTracker.source_name)
}
inline std::string* GcStateTracker::mutable_source_name() {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:GcStateTracker.source_name)
  return _s;
}
inline const std::string& GcStateTracker::_internal_source_name() const {
  return _impl_.source_name_.Get();
}
inline void GcStateTracker::_internal_set_source_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GcStateTracker::_internal_mutable_source_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GcStateTracker::release_source_name() {
  // @@protoc_insertion_point(field_release:GcStateTracker.source_name)
  if (!_internal_has_source_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_name_.IsDefault()) {
    _impl_.source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GcStateTracker::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_name_.SetAllocated(source_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_name_.IsDefault()) {
    _impl_.source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GcStateTracker.source_name)
}

// optional string uuid = 4;
inline bool GcStateTracker::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GcStateTracker::has_uuid() const {
  return _internal_has_uuid();
}
inline void GcStateTracker::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GcStateTracker::uuid() const {
  // @@protoc_insertion_point(field_get:GcStateTracker.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GcStateTracker::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GcStateTracker.uuid)
}
inline std::string* GcStateTracker::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:GcStateTracker.uuid)
  return _s;
}
inline const std::string& GcStateTracker::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void GcStateTracker::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* GcStateTracker::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* GcStateTracker::release_uuid() {
  // @@protoc_insertion_point(field_release:GcStateTracker.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GcStateTracker::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GcStateTracker.uuid)
}

// optional .Ball ball = 2;
inline bool GcStateTracker::_internal_has_ball() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ball_ != nullptr);
  return value;
}
inline bool GcStateTracker::has_ball() const {
  return _internal_has_ball();
}
inline void GcStateTracker::clear_ball() {
  if (_impl_.ball_ != nullptr) _impl_.ball_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Ball& GcStateTracker::_internal_ball() const {
  const ::Ball* p = _impl_.ball_;
  return p != nullptr ? *p : reinterpret_cast<const ::Ball&>(
      ::_Ball_default_instance_);
}
inline const ::Ball& GcStateTracker::ball() const {
  // @@protoc_insertion_point(field_get:GcStateTracker.ball)
  return _internal_ball();
}
inline void GcStateTracker::unsafe_arena_set_allocated_ball(
    ::Ball* ball) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ball_);
  }
  _impl_.ball_ = ball;
  if (ball) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GcStateTracker.ball)
}
inline ::Ball* GcStateTracker::release_ball() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Ball* temp = _impl_.ball_;
  _impl_.ball_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Ball* GcStateTracker::unsafe_arena_release_ball() {
  // @@protoc_insertion_point(field_release:GcStateTracker.ball)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Ball* temp = _impl_.ball_;
  _impl_.ball_ = nullptr;
  return temp;
}
inline ::Ball* GcStateTracker::_internal_mutable_ball() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.ball_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ball>(GetArenaForAllocation());
    _impl_.ball_ = p;
  }
  return _impl_.ball_;
}
inline ::Ball* GcStateTracker::mutable_ball() {
  ::Ball* _msg = _internal_mutable_ball();
  // @@protoc_insertion_point(field_mutable:GcStateTracker.ball)
  return _msg;
}
inline void GcStateTracker::set_allocated_ball(::Ball* ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ball_;
  }
  if (ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ball);
    if (message_arena != submessage_arena) {
      ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ball_ = ball;
  // @@protoc_insertion_point(field_set_allocated:GcStateTracker.ball)
}

// repeated .Robot robots = 3;
inline int GcStateTracker::_internal_robots_size() const {
  return _impl_.robots_.size();
}
inline int GcStateTracker::robots_size() const {
  return _internal_robots_size();
}
inline void GcStateTracker::clear_robots() {
  _impl_.robots_.Clear();
}
inline ::Robot* GcStateTracker::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:GcStateTracker.robots)
  return _impl_.robots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Robot >*
GcStateTracker::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:GcStateTracker.robots)
  return &_impl_.robots_;
}
inline const ::Robot& GcStateTracker::_internal_robots(int index) const {
  return _impl_.robots_.Get(index);
}
inline const ::Robot& GcStateTracker::robots(int index) const {
  // @@protoc_insertion_point(field_get:GcStateTracker.robots)
  return _internal_robots(index);
}
inline ::Robot* GcStateTracker::_internal_add_robots() {
  return _impl_.robots_.Add();
}
inline ::Robot* GcStateTracker::add_robots() {
  ::Robot* _add = _internal_add_robots();
  // @@protoc_insertion_point(field_add:GcStateTracker.robots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Robot >&
GcStateTracker::robots() const {
  // @@protoc_insertion_point(field_list:GcStateTracker.robots)
  return _impl_.robots_;
}

// -------------------------------------------------------------------

// Ball

// optional .Vector3 pos = 1;
inline bool Ball::_internal_has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline bool Ball::has_pos() const {
  return _internal_has_pos();
}
inline const ::Vector3& Ball::_internal_pos() const {
  const ::Vector3* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& Ball::pos() const {
  // @@protoc_insertion_point(field_get:Ball.pos)
  return _internal_pos();
}
inline void Ball::unsafe_arena_set_allocated_pos(
    ::Vector3* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Ball.pos)
}
inline ::Vector3* Ball::release_pos() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector3* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* Ball::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Ball.pos)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector3* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::Vector3* Ball::_internal_mutable_pos() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::Vector3* Ball::mutable_pos() {
  ::Vector3* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:Ball.pos)
  return _msg;
}
inline void Ball::set_allocated_pos(::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Ball.pos)
}

// optional .Vector3 vel = 2;
inline bool Ball::_internal_has_vel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vel_ != nullptr);
  return value;
}
inline bool Ball::has_vel() const {
  return _internal_has_vel();
}
inline const ::Vector3& Ball::_internal_vel() const {
  const ::Vector3* p = _impl_.vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& Ball::vel() const {
  // @@protoc_insertion_point(field_get:Ball.vel)
  return _internal_vel();
}
inline void Ball::unsafe_arena_set_allocated_vel(
    ::Vector3* vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  _impl_.vel_ = vel;
  if (vel) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Ball.vel)
}
inline ::Vector3* Ball::release_vel() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* Ball::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:Ball.vel)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
  return temp;
}
inline ::Vector3* Ball::_internal_mutable_vel() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    _impl_.vel_ = p;
  }
  return _impl_.vel_;
}
inline ::Vector3* Ball::mutable_vel() {
  ::Vector3* _msg = _internal_mutable_vel();
  // @@protoc_insertion_point(field_mutable:Ball.vel)
  return _msg;
}
inline void Ball::set_allocated_vel(::Vector3* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel));
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:Ball.vel)
}

// -------------------------------------------------------------------

// Robot

// optional .RobotId id = 1;
inline bool Robot::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool Robot::has_id() const {
  return _internal_has_id();
}
inline const ::RobotId& Robot::_internal_id() const {
  const ::RobotId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::RobotId&>(
      ::_RobotId_default_instance_);
}
inline const ::RobotId& Robot::id() const {
  // @@protoc_insertion_point(field_get:Robot.id)
  return _internal_id();
}
inline void Robot::unsafe_arena_set_allocated_id(
    ::RobotId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Robot.id)
}
inline ::RobotId* Robot::release_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RobotId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RobotId* Robot::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:Robot.id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RobotId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::RobotId* Robot::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RobotId>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::RobotId* Robot::mutable_id() {
  ::RobotId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Robot.id)
  return _msg;
}
inline void Robot::set_allocated_id(::RobotId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:Robot.id)
}

// optional .Vector2 pos = 2;
inline bool Robot::_internal_has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline bool Robot::has_pos() const {
  return _internal_has_pos();
}
inline const ::Vector2& Robot::_internal_pos() const {
  const ::Vector2* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(
      ::_Vector2_default_instance_);
}
inline const ::Vector2& Robot::pos() const {
  // @@protoc_insertion_point(field_get:Robot.pos)
  return _internal_pos();
}
inline void Robot::unsafe_arena_set_allocated_pos(
    ::Vector2* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Robot.pos)
}
inline ::Vector2* Robot::release_pos() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector2* Robot::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Robot.pos)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::Vector2* Robot::_internal_mutable_pos() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::Vector2* Robot::mutable_pos() {
  ::Vector2* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:Robot.pos)
  return _msg;
}
inline void Robot::set_allocated_pos(::Vector2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Robot.pos)
}

// -------------------------------------------------------------------

// ContinueAction

// required .ContinueAction.Type type = 1;
inline bool ContinueAction::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContinueAction::has_type() const {
  return _internal_has_type();
}
inline void ContinueAction::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ContinueAction_Type ContinueAction::_internal_type() const {
  return static_cast< ::ContinueAction_Type >(_impl_.type_);
}
inline ::ContinueAction_Type ContinueAction::type() const {
  // @@protoc_insertion_point(field_get:ContinueAction.type)
  return _internal_type();
}
inline void ContinueAction::_internal_set_type(::ContinueAction_Type value) {
  assert(::ContinueAction_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void ContinueAction::set_type(::ContinueAction_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ContinueAction.type)
}

// required .Team for_team = 2;
inline bool ContinueAction::_internal_has_for_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContinueAction::has_for_team() const {
  return _internal_has_for_team();
}
inline void ContinueAction::clear_for_team() {
  _impl_.for_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team ContinueAction::_internal_for_team() const {
  return static_cast< ::Team >(_impl_.for_team_);
}
inline ::Team ContinueAction::for_team() const {
  // @@protoc_insertion_point(field_get:ContinueAction.for_team)
  return _internal_for_team();
}
inline void ContinueAction::_internal_set_for_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.for_team_ = value;
}
inline void ContinueAction::set_for_team(::Team value) {
  _internal_set_for_team(value);
  // @@protoc_insertion_point(field_set:ContinueAction.for_team)
}

// repeated string continuation_issues = 3;
inline int ContinueAction::_internal_continuation_issues_size() const {
  return _impl_.continuation_issues_.size();
}
inline int ContinueAction::continuation_issues_size() const {
  return _internal_continuation_issues_size();
}
inline void ContinueAction::clear_continuation_issues() {
  _impl_.continuation_issues_.Clear();
}
inline std::string* ContinueAction::add_continuation_issues() {
  std::string* _s = _internal_add_continuation_issues();
  // @@protoc_insertion_point(field_add_mutable:ContinueAction.continuation_issues)
  return _s;
}
inline const std::string& ContinueAction::_internal_continuation_issues(int index) const {
  return _impl_.continuation_issues_.Get(index);
}
inline const std::string& ContinueAction::continuation_issues(int index) const {
  // @@protoc_insertion_point(field_get:ContinueAction.continuation_issues)
  return _internal_continuation_issues(index);
}
inline std::string* ContinueAction::mutable_continuation_issues(int index) {
  // @@protoc_insertion_point(field_mutable:ContinueAction.continuation_issues)
  return _impl_.continuation_issues_.Mutable(index);
}
inline void ContinueAction::set_continuation_issues(int index, const std::string& value) {
  _impl_.continuation_issues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ContinueAction.continuation_issues)
}
inline void ContinueAction::set_continuation_issues(int index, std::string&& value) {
  _impl_.continuation_issues_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ContinueAction.continuation_issues)
}
inline void ContinueAction::set_continuation_issues(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.continuation_issues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ContinueAction.continuation_issues)
}
inline void ContinueAction::set_continuation_issues(int index, const char* value, size_t size) {
  _impl_.continuation_issues_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContinueAction.continuation_issues)
}
inline std::string* ContinueAction::_internal_add_continuation_issues() {
  return _impl_.continuation_issues_.Add();
}
inline void ContinueAction::add_continuation_issues(const std::string& value) {
  _impl_.continuation_issues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ContinueAction.continuation_issues)
}
inline void ContinueAction::add_continuation_issues(std::string&& value) {
  _impl_.continuation_issues_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ContinueAction.continuation_issues)
}
inline void ContinueAction::add_continuation_issues(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.continuation_issues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ContinueAction.continuation_issues)
}
inline void ContinueAction::add_continuation_issues(const char* value, size_t size) {
  _impl_.continuation_issues_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ContinueAction.continuation_issues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContinueAction::continuation_issues() const {
  // @@protoc_insertion_point(field_list:ContinueAction.continuation_issues)
  return _impl_.continuation_issues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContinueAction::mutable_continuation_issues() {
  // @@protoc_insertion_point(field_mutable_list:ContinueAction.continuation_issues)
  return &_impl_.continuation_issues_;
}

// optional .google.protobuf.Timestamp ready_at = 4;
inline bool ContinueAction::_internal_has_ready_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ready_at_ != nullptr);
  return value;
}
inline bool ContinueAction::has_ready_at() const {
  return _internal_has_ready_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ContinueAction::_internal_ready_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ready_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ContinueAction::ready_at() const {
  // @@protoc_insertion_point(field_get:ContinueAction.ready_at)
  return _internal_ready_at();
}
inline void ContinueAction::unsafe_arena_set_allocated_ready_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ready_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ready_at_);
  }
  _impl_.ready_at_ = ready_at;
  if (ready_at) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ContinueAction.ready_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ContinueAction::release_ready_at() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ready_at_;
  _impl_.ready_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ContinueAction::unsafe_arena_release_ready_at() {
  // @@protoc_insertion_point(field_release:ContinueAction.ready_at)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ready_at_;
  _impl_.ready_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ContinueAction::_internal_mutable_ready_at() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ready_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ready_at_ = p;
  }
  return _impl_.ready_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ContinueAction::mutable_ready_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ready_at();
  // @@protoc_insertion_point(field_mutable:ContinueAction.ready_at)
  return _msg;
}
inline void ContinueAction::set_allocated_ready_at(::PROTOBUF_NAMESPACE_ID::Timestamp* ready_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ready_at_);
  }
  if (ready_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ready_at));
    if (message_arena != submessage_arena) {
      ready_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ready_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ready_at_ = ready_at;
  // @@protoc_insertion_point(field_set_allocated:ContinueAction.ready_at)
}

// optional .ContinueAction.State state = 5;
inline bool ContinueAction::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContinueAction::has_state() const {
  return _internal_has_state();
}
inline void ContinueAction::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::ContinueAction_State ContinueAction::_internal_state() const {
  return static_cast< ::ContinueAction_State >(_impl_.state_);
}
inline ::ContinueAction_State ContinueAction::state() const {
  // @@protoc_insertion_point(field_get:ContinueAction.state)
  return _internal_state();
}
inline void ContinueAction::_internal_set_state(::ContinueAction_State value) {
  assert(::ContinueAction_State_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_ = value;
}
inline void ContinueAction::set_state(::ContinueAction_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ContinueAction.state)
}

// -------------------------------------------------------------------

// ContinueHint

// required string message = 1;
inline bool ContinueHint::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContinueHint::has_message() const {
  return _internal_has_message();
}
inline void ContinueHint::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContinueHint::message() const {
  // @@protoc_insertion_point(field_get:ContinueHint.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContinueHint::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContinueHint.message)
}
inline std::string* ContinueHint::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ContinueHint.message)
  return _s;
}
inline const std::string& ContinueHint::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ContinueHint::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ContinueHint::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ContinueHint::release_message() {
  // @@protoc_insertion_point(field_release:ContinueHint.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContinueHint::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContinueHint.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TeamAdvantageChoice_AdvantageChoice> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamAdvantageChoice_AdvantageChoice>() {
  return ::TeamAdvantageChoice_AdvantageChoice_descriptor();
}
template <> struct is_proto_enum< ::ContinueAction_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ContinueAction_Type>() {
  return ::ContinueAction_Type_descriptor();
}
template <> struct is_proto_enum< ::ContinueAction_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ContinueAction_State>() {
  return ::ContinueAction_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_engine_2fssl_5fgc_5fengine_2eproto
