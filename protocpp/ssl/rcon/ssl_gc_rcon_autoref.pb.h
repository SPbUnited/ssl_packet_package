// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcon/ssl_gc_rcon_autoref.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "state/ssl_gc_game_event.pb.h"
#include "rcon/ssl_gc_rcon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto;
class AutoRefRegistration;
struct AutoRefRegistrationDefaultTypeInternal;
extern AutoRefRegistrationDefaultTypeInternal _AutoRefRegistration_default_instance_;
class AutoRefToController;
struct AutoRefToControllerDefaultTypeInternal;
extern AutoRefToControllerDefaultTypeInternal _AutoRefToController_default_instance_;
class ControllerToAutoRef;
struct ControllerToAutoRefDefaultTypeInternal;
extern ControllerToAutoRefDefaultTypeInternal _ControllerToAutoRef_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AutoRefRegistration* Arena::CreateMaybeMessage<::AutoRefRegistration>(Arena*);
template<> ::AutoRefToController* Arena::CreateMaybeMessage<::AutoRefToController>(Arena*);
template<> ::ControllerToAutoRef* Arena::CreateMaybeMessage<::ControllerToAutoRef>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AutoRefRegistration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AutoRefRegistration) */ {
 public:
  inline AutoRefRegistration() : AutoRefRegistration(nullptr) {}
  ~AutoRefRegistration() override;
  explicit PROTOBUF_CONSTEXPR AutoRefRegistration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoRefRegistration(const AutoRefRegistration& from);
  AutoRefRegistration(AutoRefRegistration&& from) noexcept
    : AutoRefRegistration() {
    *this = ::std::move(from);
  }

  inline AutoRefRegistration& operator=(const AutoRefRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefRegistration& operator=(AutoRefRegistration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoRefRegistration& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoRefRegistration* internal_default_instance() {
    return reinterpret_cast<const AutoRefRegistration*>(
               &_AutoRefRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutoRefRegistration& a, AutoRefRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefRegistration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoRefRegistration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoRefRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutoRefRegistration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoRefRegistration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutoRefRegistration& from) {
    AutoRefRegistration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefRegistration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AutoRefRegistration";
  }
  protected:
  explicit AutoRefRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // required string identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // optional .Signature signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::Signature& signature() const;
  PROTOBUF_NODISCARD ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);
  private:
  const ::Signature& _internal_signature() const;
  ::Signature* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::Signature* signature);
  ::Signature* unsafe_arena_release_signature();

  // @@protoc_insertion_point(class_scope:AutoRefRegistration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::Signature* signature_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto;
};
// -------------------------------------------------------------------

class AutoRefToController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AutoRefToController) */ {
 public:
  inline AutoRefToController() : AutoRefToController(nullptr) {}
  ~AutoRefToController() override;
  explicit PROTOBUF_CONSTEXPR AutoRefToController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoRefToController(const AutoRefToController& from);
  AutoRefToController(AutoRefToController&& from) noexcept
    : AutoRefToController() {
    *this = ::std::move(from);
  }

  inline AutoRefToController& operator=(const AutoRefToController& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefToController& operator=(AutoRefToController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoRefToController& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoRefToController* internal_default_instance() {
    return reinterpret_cast<const AutoRefToController*>(
               &_AutoRefToController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutoRefToController& a, AutoRefToController& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefToController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoRefToController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoRefToController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutoRefToController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoRefToController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutoRefToController& from) {
    AutoRefToController::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefToController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AutoRefToController";
  }
  protected:
  explicit AutoRefToController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kGameEventFieldNumber = 2,
  };
  // optional .Signature signature = 1;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::Signature& signature() const;
  PROTOBUF_NODISCARD ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);
  private:
  const ::Signature& _internal_signature() const;
  ::Signature* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::Signature* signature);
  ::Signature* unsafe_arena_release_signature();

  // optional .GameEvent game_event = 2;
  bool has_game_event() const;
  private:
  bool _internal_has_game_event() const;
  public:
  void clear_game_event();
  const ::GameEvent& game_event() const;
  PROTOBUF_NODISCARD ::GameEvent* release_game_event();
  ::GameEvent* mutable_game_event();
  void set_allocated_game_event(::GameEvent* game_event);
  private:
  const ::GameEvent& _internal_game_event() const;
  ::GameEvent* _internal_mutable_game_event();
  public:
  void unsafe_arena_set_allocated_game_event(
      ::GameEvent* game_event);
  ::GameEvent* unsafe_arena_release_game_event();

  // @@protoc_insertion_point(class_scope:AutoRefToController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Signature* signature_;
    ::GameEvent* game_event_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto;
};
// -------------------------------------------------------------------

class ControllerToAutoRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControllerToAutoRef) */ {
 public:
  inline ControllerToAutoRef() : ControllerToAutoRef(nullptr) {}
  ~ControllerToAutoRef() override;
  explicit PROTOBUF_CONSTEXPR ControllerToAutoRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerToAutoRef(const ControllerToAutoRef& from);
  ControllerToAutoRef(ControllerToAutoRef&& from) noexcept
    : ControllerToAutoRef() {
    *this = ::std::move(from);
  }

  inline ControllerToAutoRef& operator=(const ControllerToAutoRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerToAutoRef& operator=(ControllerToAutoRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerToAutoRef& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kControllerReply = 1,
    MSG_NOT_SET = 0,
  };

  static inline const ControllerToAutoRef* internal_default_instance() {
    return reinterpret_cast<const ControllerToAutoRef*>(
               &_ControllerToAutoRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControllerToAutoRef& a, ControllerToAutoRef& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerToAutoRef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerToAutoRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerToAutoRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerToAutoRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerToAutoRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerToAutoRef& from) {
    ControllerToAutoRef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerToAutoRef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControllerToAutoRef";
  }
  protected:
  explicit ControllerToAutoRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerReplyFieldNumber = 1,
  };
  // .ControllerReply controller_reply = 1;
  bool has_controller_reply() const;
  private:
  bool _internal_has_controller_reply() const;
  public:
  void clear_controller_reply();
  const ::ControllerReply& controller_reply() const;
  PROTOBUF_NODISCARD ::ControllerReply* release_controller_reply();
  ::ControllerReply* mutable_controller_reply();
  void set_allocated_controller_reply(::ControllerReply* controller_reply);
  private:
  const ::ControllerReply& _internal_controller_reply() const;
  ::ControllerReply* _internal_mutable_controller_reply();
  public:
  void unsafe_arena_set_allocated_controller_reply(
      ::ControllerReply* controller_reply);
  ::ControllerReply* unsafe_arena_release_controller_reply();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:ControllerToAutoRef)
 private:
  class _Internal;
  void set_has_controller_reply();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::ControllerReply* controller_reply_;
    } msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutoRefRegistration

// required string identifier = 1;
inline bool AutoRefRegistration::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutoRefRegistration::has_identifier() const {
  return _internal_has_identifier();
}
inline void AutoRefRegistration::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutoRefRegistration::identifier() const {
  // @@protoc_insertion_point(field_get:AutoRefRegistration.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoRefRegistration::set_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AutoRefRegistration.identifier)
}
inline std::string* AutoRefRegistration::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:AutoRefRegistration.identifier)
  return _s;
}
inline const std::string& AutoRefRegistration::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void AutoRefRegistration::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* AutoRefRegistration::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* AutoRefRegistration::release_identifier() {
  // @@protoc_insertion_point(field_release:AutoRefRegistration.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identifier_.IsDefault()) {
    _impl_.identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutoRefRegistration::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_.SetAllocated(identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identifier_.IsDefault()) {
    _impl_.identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AutoRefRegistration.identifier)
}

// optional .Signature signature = 2;
inline bool AutoRefRegistration::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline bool AutoRefRegistration::has_signature() const {
  return _internal_has_signature();
}
inline const ::Signature& AutoRefRegistration::_internal_signature() const {
  const ::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::Signature&>(
      ::_Signature_default_instance_);
}
inline const ::Signature& AutoRefRegistration::signature() const {
  // @@protoc_insertion_point(field_get:AutoRefRegistration.signature)
  return _internal_signature();
}
inline void AutoRefRegistration::unsafe_arena_set_allocated_signature(
    ::Signature* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = signature;
  if (signature) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AutoRefRegistration.signature)
}
inline ::Signature* AutoRefRegistration::release_signature() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Signature* AutoRefRegistration::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:AutoRefRegistration.signature)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::Signature* AutoRefRegistration::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaForAllocation());
    _impl_.signature_ = p;
  }
  return _impl_.signature_;
}
inline ::Signature* AutoRefRegistration::mutable_signature() {
  ::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:AutoRefRegistration.signature)
  return _msg;
}
inline void AutoRefRegistration::set_allocated_signature(::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature));
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:AutoRefRegistration.signature)
}

// -------------------------------------------------------------------

// AutoRefToController

// optional .Signature signature = 1;
inline bool AutoRefToController::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline bool AutoRefToController::has_signature() const {
  return _internal_has_signature();
}
inline const ::Signature& AutoRefToController::_internal_signature() const {
  const ::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::Signature&>(
      ::_Signature_default_instance_);
}
inline const ::Signature& AutoRefToController::signature() const {
  // @@protoc_insertion_point(field_get:AutoRefToController.signature)
  return _internal_signature();
}
inline void AutoRefToController::unsafe_arena_set_allocated_signature(
    ::Signature* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = signature;
  if (signature) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AutoRefToController.signature)
}
inline ::Signature* AutoRefToController::release_signature() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Signature* AutoRefToController::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:AutoRefToController.signature)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::Signature* AutoRefToController::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaForAllocation());
    _impl_.signature_ = p;
  }
  return _impl_.signature_;
}
inline ::Signature* AutoRefToController::mutable_signature() {
  ::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:AutoRefToController.signature)
  return _msg;
}
inline void AutoRefToController::set_allocated_signature(::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature));
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:AutoRefToController.signature)
}

// optional .GameEvent game_event = 2;
inline bool AutoRefToController::_internal_has_game_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.game_event_ != nullptr);
  return value;
}
inline bool AutoRefToController::has_game_event() const {
  return _internal_has_game_event();
}
inline const ::GameEvent& AutoRefToController::_internal_game_event() const {
  const ::GameEvent* p = _impl_.game_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent&>(
      ::_GameEvent_default_instance_);
}
inline const ::GameEvent& AutoRefToController::game_event() const {
  // @@protoc_insertion_point(field_get:AutoRefToController.game_event)
  return _internal_game_event();
}
inline void AutoRefToController::unsafe_arena_set_allocated_game_event(
    ::GameEvent* game_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_event_);
  }
  _impl_.game_event_ = game_event;
  if (game_event) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AutoRefToController.game_event)
}
inline ::GameEvent* AutoRefToController::release_game_event() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::GameEvent* temp = _impl_.game_event_;
  _impl_.game_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameEvent* AutoRefToController::unsafe_arena_release_game_event() {
  // @@protoc_insertion_point(field_release:AutoRefToController.game_event)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::GameEvent* temp = _impl_.game_event_;
  _impl_.game_event_ = nullptr;
  return temp;
}
inline ::GameEvent* AutoRefToController::_internal_mutable_game_event() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent>(GetArenaForAllocation());
    _impl_.game_event_ = p;
  }
  return _impl_.game_event_;
}
inline ::GameEvent* AutoRefToController::mutable_game_event() {
  ::GameEvent* _msg = _internal_mutable_game_event();
  // @@protoc_insertion_point(field_mutable:AutoRefToController.game_event)
  return _msg;
}
inline void AutoRefToController::set_allocated_game_event(::GameEvent* game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_event_);
  }
  if (game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event));
    if (message_arena != submessage_arena) {
      game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.game_event_ = game_event;
  // @@protoc_insertion_point(field_set_allocated:AutoRefToController.game_event)
}

// -------------------------------------------------------------------

// ControllerToAutoRef

// .ControllerReply controller_reply = 1;
inline bool ControllerToAutoRef::_internal_has_controller_reply() const {
  return msg_case() == kControllerReply;
}
inline bool ControllerToAutoRef::has_controller_reply() const {
  return _internal_has_controller_reply();
}
inline void ControllerToAutoRef::set_has_controller_reply() {
  _impl_._oneof_case_[0] = kControllerReply;
}
inline ::ControllerReply* ControllerToAutoRef::release_controller_reply() {
  // @@protoc_insertion_point(field_release:ControllerToAutoRef.controller_reply)
  if (_internal_has_controller_reply()) {
    clear_has_msg();
    ::ControllerReply* temp = _impl_.msg_.controller_reply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.controller_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ControllerReply& ControllerToAutoRef::_internal_controller_reply() const {
  return _internal_has_controller_reply()
      ? *_impl_.msg_.controller_reply_
      : reinterpret_cast< ::ControllerReply&>(::_ControllerReply_default_instance_);
}
inline const ::ControllerReply& ControllerToAutoRef::controller_reply() const {
  // @@protoc_insertion_point(field_get:ControllerToAutoRef.controller_reply)
  return _internal_controller_reply();
}
inline ::ControllerReply* ControllerToAutoRef::unsafe_arena_release_controller_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ControllerToAutoRef.controller_reply)
  if (_internal_has_controller_reply()) {
    clear_has_msg();
    ::ControllerReply* temp = _impl_.msg_.controller_reply_;
    _impl_.msg_.controller_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ControllerToAutoRef::unsafe_arena_set_allocated_controller_reply(::ControllerReply* controller_reply) {
  clear_msg();
  if (controller_reply) {
    set_has_controller_reply();
    _impl_.msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControllerToAutoRef.controller_reply)
}
inline ::ControllerReply* ControllerToAutoRef::_internal_mutable_controller_reply() {
  if (!_internal_has_controller_reply()) {
    clear_msg();
    set_has_controller_reply();
    _impl_.msg_.controller_reply_ = CreateMaybeMessage< ::ControllerReply >(GetArenaForAllocation());
  }
  return _impl_.msg_.controller_reply_;
}
inline ::ControllerReply* ControllerToAutoRef::mutable_controller_reply() {
  ::ControllerReply* _msg = _internal_mutable_controller_reply();
  // @@protoc_insertion_point(field_mutable:ControllerToAutoRef.controller_reply)
  return _msg;
}

inline bool ControllerToAutoRef::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ControllerToAutoRef::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline ControllerToAutoRef::MsgCase ControllerToAutoRef::msg_case() const {
  return ControllerToAutoRef::MsgCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto
