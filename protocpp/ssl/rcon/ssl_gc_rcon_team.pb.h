// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcon/ssl_gc_rcon_team.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rcon_2fssl_5fgc_5frcon_5fteam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rcon_2fssl_5fgc_5frcon_5fteam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "state/ssl_gc_common.pb.h"
#include "rcon/ssl_gc_rcon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rcon_2fssl_5fgc_5frcon_5fteam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rcon_2fssl_5fgc_5frcon_5fteam_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto;
class ControllerToTeam;
struct ControllerToTeamDefaultTypeInternal;
extern ControllerToTeamDefaultTypeInternal _ControllerToTeam_default_instance_;
class TeamRegistration;
struct TeamRegistrationDefaultTypeInternal;
extern TeamRegistrationDefaultTypeInternal _TeamRegistration_default_instance_;
class TeamToController;
struct TeamToControllerDefaultTypeInternal;
extern TeamToControllerDefaultTypeInternal _TeamToController_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ControllerToTeam* Arena::CreateMaybeMessage<::ControllerToTeam>(Arena*);
template<> ::TeamRegistration* Arena::CreateMaybeMessage<::TeamRegistration>(Arena*);
template<> ::TeamToController* Arena::CreateMaybeMessage<::TeamToController>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum AdvantageChoice : int {
  STOP = 0,
  CONTINUE = 1
};
bool AdvantageChoice_IsValid(int value);
constexpr AdvantageChoice AdvantageChoice_MIN = STOP;
constexpr AdvantageChoice AdvantageChoice_MAX = CONTINUE;
constexpr int AdvantageChoice_ARRAYSIZE = AdvantageChoice_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdvantageChoice_descriptor();
template<typename T>
inline const std::string& AdvantageChoice_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdvantageChoice>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdvantageChoice_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdvantageChoice_descriptor(), enum_t_value);
}
inline bool AdvantageChoice_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AdvantageChoice* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdvantageChoice>(
    AdvantageChoice_descriptor(), name, value);
}
// ===================================================================

class TeamRegistration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeamRegistration) */ {
 public:
  inline TeamRegistration() : TeamRegistration(nullptr) {}
  ~TeamRegistration() override;
  explicit PROTOBUF_CONSTEXPR TeamRegistration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamRegistration(const TeamRegistration& from);
  TeamRegistration(TeamRegistration&& from) noexcept
    : TeamRegistration() {
    *this = ::std::move(from);
  }

  inline TeamRegistration& operator=(const TeamRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamRegistration& operator=(TeamRegistration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamRegistration& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamRegistration* internal_default_instance() {
    return reinterpret_cast<const TeamRegistration*>(
               &_TeamRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TeamRegistration& a, TeamRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamRegistration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamRegistration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamRegistration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamRegistration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamRegistration& from) {
    TeamRegistration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamRegistration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeamRegistration";
  }
  protected:
  explicit TeamRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kTeamFieldNumber = 3,
  };
  // required string team_name = 1;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional .Signature signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::Signature& signature() const;
  PROTOBUF_NODISCARD ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);
  private:
  const ::Signature& _internal_signature() const;
  ::Signature* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::Signature* signature);
  ::Signature* unsafe_arena_release_signature();

  // optional .Team team = 3;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::Team team() const;
  void set_team(::Team value);
  private:
  ::Team _internal_team() const;
  void _internal_set_team(::Team value);
  public:

  // @@protoc_insertion_point(class_scope:TeamRegistration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    ::Signature* signature_;
    int team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rcon_2fssl_5fgc_5frcon_5fteam_2eproto;
};
// -------------------------------------------------------------------

class TeamToController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeamToController) */ {
 public:
  inline TeamToController() : TeamToController(nullptr) {}
  ~TeamToController() override;
  explicit PROTOBUF_CONSTEXPR TeamToController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamToController(const TeamToController& from);
  TeamToController(TeamToController&& from) noexcept
    : TeamToController() {
    *this = ::std::move(from);
  }

  inline TeamToController& operator=(const TeamToController& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamToController& operator=(TeamToController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamToController& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kDesiredKeeper = 2,
    kAdvantageChoice = 3,
    kSubstituteBot = 4,
    kPing = 5,
    MSG_NOT_SET = 0,
  };

  static inline const TeamToController* internal_default_instance() {
    return reinterpret_cast<const TeamToController*>(
               &_TeamToController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TeamToController& a, TeamToController& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamToController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamToController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamToController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamToController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamToController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamToController& from) {
    TeamToController::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamToController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeamToController";
  }
  protected:
  explicit TeamToController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kDesiredKeeperFieldNumber = 2,
    kAdvantageChoiceFieldNumber = 3,
    kSubstituteBotFieldNumber = 4,
    kPingFieldNumber = 5,
  };
  // optional .Signature signature = 1;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::Signature& signature() const;
  PROTOBUF_NODISCARD ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);
  private:
  const ::Signature& _internal_signature() const;
  ::Signature* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::Signature* signature);
  ::Signature* unsafe_arena_release_signature();

  // int32 desired_keeper = 2;
  bool has_desired_keeper() const;
  private:
  bool _internal_has_desired_keeper() const;
  public:
  void clear_desired_keeper();
  int32_t desired_keeper() const;
  void set_desired_keeper(int32_t value);
  private:
  int32_t _internal_desired_keeper() const;
  void _internal_set_desired_keeper(int32_t value);
  public:

  // .AdvantageChoice advantage_choice = 3;
  bool has_advantage_choice() const;
  private:
  bool _internal_has_advantage_choice() const;
  public:
  void clear_advantage_choice();
  ::AdvantageChoice advantage_choice() const;
  void set_advantage_choice(::AdvantageChoice value);
  private:
  ::AdvantageChoice _internal_advantage_choice() const;
  void _internal_set_advantage_choice(::AdvantageChoice value);
  public:

  // bool substitute_bot = 4;
  bool has_substitute_bot() const;
  private:
  bool _internal_has_substitute_bot() const;
  public:
  void clear_substitute_bot();
  bool substitute_bot() const;
  void set_substitute_bot(bool value);
  private:
  bool _internal_substitute_bot() const;
  void _internal_set_substitute_bot(bool value);
  public:

  // bool ping = 5;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  bool ping() const;
  void set_ping(bool value);
  private:
  bool _internal_ping() const;
  void _internal_set_ping(bool value);
  public:

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:TeamToController)
 private:
  class _Internal;
  void set_has_desired_keeper();
  void set_has_advantage_choice();
  void set_has_substitute_bot();
  void set_has_ping();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Signature* signature_;
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t desired_keeper_;
      int advantage_choice_;
      bool substitute_bot_;
      bool ping_;
    } msg_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rcon_2fssl_5fgc_5frcon_5fteam_2eproto;
};
// -------------------------------------------------------------------

class ControllerToTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControllerToTeam) */ {
 public:
  inline ControllerToTeam() : ControllerToTeam(nullptr) {}
  ~ControllerToTeam() override;
  explicit PROTOBUF_CONSTEXPR ControllerToTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerToTeam(const ControllerToTeam& from);
  ControllerToTeam(ControllerToTeam&& from) noexcept
    : ControllerToTeam() {
    *this = ::std::move(from);
  }

  inline ControllerToTeam& operator=(const ControllerToTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerToTeam& operator=(ControllerToTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerToTeam& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kControllerReply = 1,
    MSG_NOT_SET = 0,
  };

  static inline const ControllerToTeam* internal_default_instance() {
    return reinterpret_cast<const ControllerToTeam*>(
               &_ControllerToTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControllerToTeam& a, ControllerToTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerToTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerToTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerToTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerToTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerToTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerToTeam& from) {
    ControllerToTeam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerToTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControllerToTeam";
  }
  protected:
  explicit ControllerToTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerReplyFieldNumber = 1,
  };
  // .ControllerReply controller_reply = 1;
  bool has_controller_reply() const;
  private:
  bool _internal_has_controller_reply() const;
  public:
  void clear_controller_reply();
  const ::ControllerReply& controller_reply() const;
  PROTOBUF_NODISCARD ::ControllerReply* release_controller_reply();
  ::ControllerReply* mutable_controller_reply();
  void set_allocated_controller_reply(::ControllerReply* controller_reply);
  private:
  const ::ControllerReply& _internal_controller_reply() const;
  ::ControllerReply* _internal_mutable_controller_reply();
  public:
  void unsafe_arena_set_allocated_controller_reply(
      ::ControllerReply* controller_reply);
  ::ControllerReply* unsafe_arena_release_controller_reply();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:ControllerToTeam)
 private:
  class _Internal;
  void set_has_controller_reply();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::ControllerReply* controller_reply_;
    } msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rcon_2fssl_5fgc_5frcon_5fteam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TeamRegistration

// required string team_name = 1;
inline bool TeamRegistration::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TeamRegistration::has_team_name() const {
  return _internal_has_team_name();
}
inline void TeamRegistration::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TeamRegistration::team_name() const {
  // @@protoc_insertion_point(field_get:TeamRegistration.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamRegistration::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TeamRegistration.team_name)
}
inline std::string* TeamRegistration::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:TeamRegistration.team_name)
  return _s;
}
inline const std::string& TeamRegistration::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void TeamRegistration::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamRegistration::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamRegistration::release_team_name() {
  // @@protoc_insertion_point(field_release:TeamRegistration.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TeamRegistration::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TeamRegistration.team_name)
}

// optional .Signature signature = 2;
inline bool TeamRegistration::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline bool TeamRegistration::has_signature() const {
  return _internal_has_signature();
}
inline const ::Signature& TeamRegistration::_internal_signature() const {
  const ::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::Signature&>(
      ::_Signature_default_instance_);
}
inline const ::Signature& TeamRegistration::signature() const {
  // @@protoc_insertion_point(field_get:TeamRegistration.signature)
  return _internal_signature();
}
inline void TeamRegistration::unsafe_arena_set_allocated_signature(
    ::Signature* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = signature;
  if (signature) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TeamRegistration.signature)
}
inline ::Signature* TeamRegistration::release_signature() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Signature* TeamRegistration::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:TeamRegistration.signature)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::Signature* TeamRegistration::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaForAllocation());
    _impl_.signature_ = p;
  }
  return _impl_.signature_;
}
inline ::Signature* TeamRegistration::mutable_signature() {
  ::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:TeamRegistration.signature)
  return _msg;
}
inline void TeamRegistration::set_allocated_signature(::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature));
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:TeamRegistration.signature)
}

// optional .Team team = 3;
inline bool TeamRegistration::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TeamRegistration::has_team() const {
  return _internal_has_team();
}
inline void TeamRegistration::clear_team() {
  _impl_.team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team TeamRegistration::_internal_team() const {
  return static_cast< ::Team >(_impl_.team_);
}
inline ::Team TeamRegistration::team() const {
  // @@protoc_insertion_point(field_get:TeamRegistration.team)
  return _internal_team();
}
inline void TeamRegistration::_internal_set_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_ = value;
}
inline void TeamRegistration::set_team(::Team value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:TeamRegistration.team)
}

// -------------------------------------------------------------------

// TeamToController

// optional .Signature signature = 1;
inline bool TeamToController::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline bool TeamToController::has_signature() const {
  return _internal_has_signature();
}
inline const ::Signature& TeamToController::_internal_signature() const {
  const ::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::Signature&>(
      ::_Signature_default_instance_);
}
inline const ::Signature& TeamToController::signature() const {
  // @@protoc_insertion_point(field_get:TeamToController.signature)
  return _internal_signature();
}
inline void TeamToController::unsafe_arena_set_allocated_signature(
    ::Signature* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = signature;
  if (signature) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TeamToController.signature)
}
inline ::Signature* TeamToController::release_signature() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Signature* TeamToController::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:TeamToController.signature)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::Signature* TeamToController::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaForAllocation());
    _impl_.signature_ = p;
  }
  return _impl_.signature_;
}
inline ::Signature* TeamToController::mutable_signature() {
  ::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:TeamToController.signature)
  return _msg;
}
inline void TeamToController::set_allocated_signature(::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature));
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:TeamToController.signature)
}

// int32 desired_keeper = 2;
inline bool TeamToController::_internal_has_desired_keeper() const {
  return msg_case() == kDesiredKeeper;
}
inline bool TeamToController::has_desired_keeper() const {
  return _internal_has_desired_keeper();
}
inline void TeamToController::set_has_desired_keeper() {
  _impl_._oneof_case_[0] = kDesiredKeeper;
}
inline void TeamToController::clear_desired_keeper() {
  if (_internal_has_desired_keeper()) {
    _impl_.msg_.desired_keeper_ = 0;
    clear_has_msg();
  }
}
inline int32_t TeamToController::_internal_desired_keeper() const {
  if (_internal_has_desired_keeper()) {
    return _impl_.msg_.desired_keeper_;
  }
  return 0;
}
inline void TeamToController::_internal_set_desired_keeper(int32_t value) {
  if (!_internal_has_desired_keeper()) {
    clear_msg();
    set_has_desired_keeper();
  }
  _impl_.msg_.desired_keeper_ = value;
}
inline int32_t TeamToController::desired_keeper() const {
  // @@protoc_insertion_point(field_get:TeamToController.desired_keeper)
  return _internal_desired_keeper();
}
inline void TeamToController::set_desired_keeper(int32_t value) {
  _internal_set_desired_keeper(value);
  // @@protoc_insertion_point(field_set:TeamToController.desired_keeper)
}

// .AdvantageChoice advantage_choice = 3;
inline bool TeamToController::_internal_has_advantage_choice() const {
  return msg_case() == kAdvantageChoice;
}
inline bool TeamToController::has_advantage_choice() const {
  return _internal_has_advantage_choice();
}
inline void TeamToController::set_has_advantage_choice() {
  _impl_._oneof_case_[0] = kAdvantageChoice;
}
inline void TeamToController::clear_advantage_choice() {
  if (_internal_has_advantage_choice()) {
    _impl_.msg_.advantage_choice_ = 0;
    clear_has_msg();
  }
}
inline ::AdvantageChoice TeamToController::_internal_advantage_choice() const {
  if (_internal_has_advantage_choice()) {
    return static_cast< ::AdvantageChoice >(_impl_.msg_.advantage_choice_);
  }
  return static_cast< ::AdvantageChoice >(0);
}
inline ::AdvantageChoice TeamToController::advantage_choice() const {
  // @@protoc_insertion_point(field_get:TeamToController.advantage_choice)
  return _internal_advantage_choice();
}
inline void TeamToController::_internal_set_advantage_choice(::AdvantageChoice value) {
  assert(::AdvantageChoice_IsValid(value));
  if (!_internal_has_advantage_choice()) {
    clear_msg();
    set_has_advantage_choice();
  }
  _impl_.msg_.advantage_choice_ = value;
}
inline void TeamToController::set_advantage_choice(::AdvantageChoice value) {
  _internal_set_advantage_choice(value);
  // @@protoc_insertion_point(field_set:TeamToController.advantage_choice)
}

// bool substitute_bot = 4;
inline bool TeamToController::_internal_has_substitute_bot() const {
  return msg_case() == kSubstituteBot;
}
inline bool TeamToController::has_substitute_bot() const {
  return _internal_has_substitute_bot();
}
inline void TeamToController::set_has_substitute_bot() {
  _impl_._oneof_case_[0] = kSubstituteBot;
}
inline void TeamToController::clear_substitute_bot() {
  if (_internal_has_substitute_bot()) {
    _impl_.msg_.substitute_bot_ = false;
    clear_has_msg();
  }
}
inline bool TeamToController::_internal_substitute_bot() const {
  if (_internal_has_substitute_bot()) {
    return _impl_.msg_.substitute_bot_;
  }
  return false;
}
inline void TeamToController::_internal_set_substitute_bot(bool value) {
  if (!_internal_has_substitute_bot()) {
    clear_msg();
    set_has_substitute_bot();
  }
  _impl_.msg_.substitute_bot_ = value;
}
inline bool TeamToController::substitute_bot() const {
  // @@protoc_insertion_point(field_get:TeamToController.substitute_bot)
  return _internal_substitute_bot();
}
inline void TeamToController::set_substitute_bot(bool value) {
  _internal_set_substitute_bot(value);
  // @@protoc_insertion_point(field_set:TeamToController.substitute_bot)
}

// bool ping = 5;
inline bool TeamToController::_internal_has_ping() const {
  return msg_case() == kPing;
}
inline bool TeamToController::has_ping() const {
  return _internal_has_ping();
}
inline void TeamToController::set_has_ping() {
  _impl_._oneof_case_[0] = kPing;
}
inline void TeamToController::clear_ping() {
  if (_internal_has_ping()) {
    _impl_.msg_.ping_ = false;
    clear_has_msg();
  }
}
inline bool TeamToController::_internal_ping() const {
  if (_internal_has_ping()) {
    return _impl_.msg_.ping_;
  }
  return false;
}
inline void TeamToController::_internal_set_ping(bool value) {
  if (!_internal_has_ping()) {
    clear_msg();
    set_has_ping();
  }
  _impl_.msg_.ping_ = value;
}
inline bool TeamToController::ping() const {
  // @@protoc_insertion_point(field_get:TeamToController.ping)
  return _internal_ping();
}
inline void TeamToController::set_ping(bool value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:TeamToController.ping)
}

inline bool TeamToController::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void TeamToController::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline TeamToController::MsgCase TeamToController::msg_case() const {
  return TeamToController::MsgCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControllerToTeam

// .ControllerReply controller_reply = 1;
inline bool ControllerToTeam::_internal_has_controller_reply() const {
  return msg_case() == kControllerReply;
}
inline bool ControllerToTeam::has_controller_reply() const {
  return _internal_has_controller_reply();
}
inline void ControllerToTeam::set_has_controller_reply() {
  _impl_._oneof_case_[0] = kControllerReply;
}
inline ::ControllerReply* ControllerToTeam::release_controller_reply() {
  // @@protoc_insertion_point(field_release:ControllerToTeam.controller_reply)
  if (_internal_has_controller_reply()) {
    clear_has_msg();
    ::ControllerReply* temp = _impl_.msg_.controller_reply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.controller_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ControllerReply& ControllerToTeam::_internal_controller_reply() const {
  return _internal_has_controller_reply()
      ? *_impl_.msg_.controller_reply_
      : reinterpret_cast< ::ControllerReply&>(::_ControllerReply_default_instance_);
}
inline const ::ControllerReply& ControllerToTeam::controller_reply() const {
  // @@protoc_insertion_point(field_get:ControllerToTeam.controller_reply)
  return _internal_controller_reply();
}
inline ::ControllerReply* ControllerToTeam::unsafe_arena_release_controller_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ControllerToTeam.controller_reply)
  if (_internal_has_controller_reply()) {
    clear_has_msg();
    ::ControllerReply* temp = _impl_.msg_.controller_reply_;
    _impl_.msg_.controller_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ControllerToTeam::unsafe_arena_set_allocated_controller_reply(::ControllerReply* controller_reply) {
  clear_msg();
  if (controller_reply) {
    set_has_controller_reply();
    _impl_.msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControllerToTeam.controller_reply)
}
inline ::ControllerReply* ControllerToTeam::_internal_mutable_controller_reply() {
  if (!_internal_has_controller_reply()) {
    clear_msg();
    set_has_controller_reply();
    _impl_.msg_.controller_reply_ = CreateMaybeMessage< ::ControllerReply >(GetArenaForAllocation());
  }
  return _impl_.msg_.controller_reply_;
}
inline ::ControllerReply* ControllerToTeam::mutable_controller_reply() {
  ::ControllerReply* _msg = _internal_mutable_controller_reply();
  // @@protoc_insertion_point(field_mutable:ControllerToTeam.controller_reply)
  return _msg;
}

inline bool ControllerToTeam::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ControllerToTeam::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline ControllerToTeam::MsgCase ControllerToTeam::msg_case() const {
  return ControllerToTeam::MsgCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AdvantageChoice> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AdvantageChoice>() {
  return ::AdvantageChoice_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rcon_2fssl_5fgc_5frcon_5fteam_2eproto
