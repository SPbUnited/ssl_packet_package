// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcon/ssl_gc_rcon_autoref.proto

#include "rcon/ssl_gc_rcon_autoref.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR AutoRefRegistration::AutoRefRegistration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/nullptr} {}
struct AutoRefRegistrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoRefRegistrationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoRefRegistrationDefaultTypeInternal() {}
  union {
    AutoRefRegistration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoRefRegistrationDefaultTypeInternal _AutoRefRegistration_default_instance_;
PROTOBUF_CONSTEXPR AutoRefToController::AutoRefToController(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_.game_event_)*/nullptr} {}
struct AutoRefToControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoRefToControllerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoRefToControllerDefaultTypeInternal() {}
  union {
    AutoRefToController _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoRefToControllerDefaultTypeInternal _AutoRefToController_default_instance_;
PROTOBUF_CONSTEXPR ControllerToAutoRef::ControllerToAutoRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ControllerToAutoRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerToAutoRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerToAutoRefDefaultTypeInternal() {}
  union {
    ControllerToAutoRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerToAutoRefDefaultTypeInternal _ControllerToAutoRef_default_instance_;
static ::_pb::Metadata file_level_metadata_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto = nullptr;

const uint32_t TableStruct_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AutoRefRegistration, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AutoRefRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AutoRefRegistration, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::AutoRefRegistration, _impl_.signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AutoRefToController, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AutoRefToController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AutoRefToController, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::AutoRefToController, _impl_.game_event_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControllerToAutoRef, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ControllerToAutoRef, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ControllerToAutoRef, _impl_.msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::AutoRefRegistration)},
  { 10, 18, -1, sizeof(::AutoRefToController)},
  { 20, -1, -1, sizeof(::ControllerToAutoRef)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_AutoRefRegistration_default_instance_._instance,
  &::_AutoRefToController_default_instance_._instance,
  &::_ControllerToAutoRef_default_instance_._instance,
};

const char descriptor_table_protodef_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036rcon/ssl_gc_rcon_autoref.proto\032\035state/"
  "ssl_gc_game_event.proto\032\026rcon/ssl_gc_rco"
  "n.proto\"H\n\023AutoRefRegistration\022\022\n\nidenti"
  "fier\030\001 \002(\t\022\035\n\tsignature\030\002 \001(\0132\n.Signatur"
  "e\"`\n\023AutoRefToController\022\035\n\tsignature\030\001 "
  "\001(\0132\n.Signature\022\036\n\ngame_event\030\002 \001(\0132\n.Ga"
  "meEventJ\004\010\003\020\004J\004\010\004\020\005\"J\n\023ControllerToAutoR"
  "ef\022,\n\020controller_reply\030\001 \001(\0132\020.Controlle"
  "rReplyH\000B\005\n\003msg"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto_deps[2] = {
  &::descriptor_table_rcon_2fssl_5fgc_5frcon_2eproto,
  &::descriptor_table_state_2fssl_5fgc_5fgame_5fevent_2eproto,
};
static ::_pbi::once_flag descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto = {
    false, false, 335, descriptor_table_protodef_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto,
    "rcon/ssl_gc_rcon_autoref.proto",
    &descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto_once, descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto::offsets,
    file_level_metadata_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto, file_level_enum_descriptors_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto,
    file_level_service_descriptors_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto_getter() {
  return &descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto(&descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto);

// ===================================================================

class AutoRefRegistration::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoRefRegistration>()._impl_._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Signature& signature(const AutoRefRegistration* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::Signature&
AutoRefRegistration::_Internal::signature(const AutoRefRegistration* msg) {
  return *msg->_impl_.signature_;
}
void AutoRefRegistration::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AutoRefRegistration::AutoRefRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AutoRefRegistration)
}
AutoRefRegistration::AutoRefRegistration(const AutoRefRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutoRefRegistration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.signature_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::Signature(*from._impl_.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:AutoRefRegistration)
}

inline void AutoRefRegistration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.signature_){nullptr}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AutoRefRegistration::~AutoRefRegistration() {
  // @@protoc_insertion_point(destructor:AutoRefRegistration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutoRefRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.signature_;
}

void AutoRefRegistration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoRefRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefRegistration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.signature_ != nullptr);
      _impl_.signature_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefRegistration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AutoRefRegistration.identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoRefRegistration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefRegistration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AutoRefRegistration.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional .Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefRegistration)
  return target;
}

size_t AutoRefRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefRegistration)
  size_t total_size = 0;

  // required string identifier = 1;
  if (_internal_has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Signature signature = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.signature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoRefRegistration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutoRefRegistration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoRefRegistration::GetClassData() const { return &_class_data_; }


void AutoRefRegistration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutoRefRegistration*>(&to_msg);
  auto& from = static_cast<const AutoRefRegistration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AutoRefRegistration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_signature()->::Signature::MergeFrom(
          from._internal_signature());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoRefRegistration::CopyFrom(const AutoRefRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefRegistration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_signature()) {
    if (!_impl_.signature_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefRegistration::InternalSwap(AutoRefRegistration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  swap(_impl_.signature_, other->_impl_.signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefRegistration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto_getter, &descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto_once,
      file_level_metadata_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto[0]);
}

// ===================================================================

class AutoRefToController::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoRefToController>()._impl_._has_bits_);
  static const ::Signature& signature(const AutoRefToController* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GameEvent& game_event(const AutoRefToController* msg);
  static void set_has_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Signature&
AutoRefToController::_Internal::signature(const AutoRefToController* msg) {
  return *msg->_impl_.signature_;
}
const ::GameEvent&
AutoRefToController::_Internal::game_event(const AutoRefToController* msg) {
  return *msg->_impl_.game_event_;
}
void AutoRefToController::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AutoRefToController::clear_game_event() {
  if (_impl_.game_event_ != nullptr) _impl_.game_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AutoRefToController::AutoRefToController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AutoRefToController)
}
AutoRefToController::AutoRefToController(const AutoRefToController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutoRefToController* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.game_event_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::Signature(*from._impl_.signature_);
  }
  if (from._internal_has_game_event()) {
    _this->_impl_.game_event_ = new ::GameEvent(*from._impl_.game_event_);
  }
  // @@protoc_insertion_point(copy_constructor:AutoRefToController)
}

inline void AutoRefToController::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.game_event_){nullptr}
  };
}

AutoRefToController::~AutoRefToController() {
  // @@protoc_insertion_point(destructor:AutoRefToController)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutoRefToController::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.signature_;
  if (this != internal_default_instance()) delete _impl_.game_event_;
}

void AutoRefToController::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoRefToController::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefToController)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.signature_ != nullptr);
      _impl_.signature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.game_event_ != nullptr);
      _impl_.game_event_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefToController::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Signature signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameEvent game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoRefToController::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefToController)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  // optional .GameEvent game_event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::game_event(this),
        _Internal::game_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefToController)
  return target;
}

size_t AutoRefToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefToController)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Signature signature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signature_);
    }

    // optional .GameEvent game_event = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.game_event_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoRefToController::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutoRefToController::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoRefToController::GetClassData() const { return &_class_data_; }


void AutoRefToController::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutoRefToController*>(&to_msg);
  auto& from = static_cast<const AutoRefToController&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AutoRefToController)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_signature()->::Signature::MergeFrom(
          from._internal_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_game_event()->::GameEvent::MergeFrom(
          from._internal_game_event());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoRefToController::CopyFrom(const AutoRefToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefToController::IsInitialized() const {
  if (_internal_has_signature()) {
    if (!_impl_.signature_->IsInitialized()) return false;
  }
  if (_internal_has_game_event()) {
    if (!_impl_.game_event_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefToController::InternalSwap(AutoRefToController* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoRefToController, _impl_.game_event_)
      + sizeof(AutoRefToController::_impl_.game_event_)
      - PROTOBUF_FIELD_OFFSET(AutoRefToController, _impl_.signature_)>(
          reinterpret_cast<char*>(&_impl_.signature_),
          reinterpret_cast<char*>(&other->_impl_.signature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefToController::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto_getter, &descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto_once,
      file_level_metadata_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto[1]);
}

// ===================================================================

class ControllerToAutoRef::_Internal {
 public:
  static const ::ControllerReply& controller_reply(const ControllerToAutoRef* msg);
};

const ::ControllerReply&
ControllerToAutoRef::_Internal::controller_reply(const ControllerToAutoRef* msg) {
  return *msg->_impl_.msg_.controller_reply_;
}
void ControllerToAutoRef::set_allocated_controller_reply(::ControllerReply* controller_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (controller_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_reply));
    if (message_arena != submessage_arena) {
      controller_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_reply, submessage_arena);
    }
    set_has_controller_reply();
    _impl_.msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ControllerToAutoRef.controller_reply)
}
void ControllerToAutoRef::clear_controller_reply() {
  if (_internal_has_controller_reply()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.controller_reply_;
    }
    clear_has_msg();
  }
}
ControllerToAutoRef::ControllerToAutoRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ControllerToAutoRef)
}
ControllerToAutoRef::ControllerToAutoRef(const ControllerToAutoRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControllerToAutoRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kControllerReply: {
      _this->_internal_mutable_controller_reply()->::ControllerReply::MergeFrom(
          from._internal_controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ControllerToAutoRef)
}

inline void ControllerToAutoRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

ControllerToAutoRef::~ControllerToAutoRef() {
  // @@protoc_insertion_point(destructor:ControllerToAutoRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControllerToAutoRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ControllerToAutoRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControllerToAutoRef::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ControllerToAutoRef)
  switch (msg_case()) {
    case kControllerReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.controller_reply_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void ControllerToAutoRef::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerToAutoRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerToAutoRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControllerReply controller_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControllerToAutoRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerToAutoRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControllerReply controller_reply = 1;
  if (_internal_has_controller_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controller_reply(this),
        _Internal::controller_reply(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerToAutoRef)
  return target;
}

size_t ControllerToAutoRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerToAutoRef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .ControllerReply controller_reply = 1;
    case kControllerReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.controller_reply_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerToAutoRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControllerToAutoRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerToAutoRef::GetClassData() const { return &_class_data_; }


void ControllerToAutoRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControllerToAutoRef*>(&to_msg);
  auto& from = static_cast<const ControllerToAutoRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ControllerToAutoRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kControllerReply: {
      _this->_internal_mutable_controller_reply()->::ControllerReply::MergeFrom(
          from._internal_controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerToAutoRef::CopyFrom(const ControllerToAutoRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerToAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToAutoRef::IsInitialized() const {
  return true;
}

void ControllerToAutoRef::InternalSwap(ControllerToAutoRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerToAutoRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto_getter, &descriptor_table_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto_once,
      file_level_metadata_rcon_2fssl_5fgc_5frcon_5fautoref_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AutoRefRegistration*
Arena::CreateMaybeMessage< ::AutoRefRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::AutoRefToController*
Arena::CreateMaybeMessage< ::AutoRefToController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefToController >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerToAutoRef*
Arena::CreateMaybeMessage< ::ControllerToAutoRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerToAutoRef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
