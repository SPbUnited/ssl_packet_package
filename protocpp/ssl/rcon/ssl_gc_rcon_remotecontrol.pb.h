// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcon/ssl_gc_rcon_remotecontrol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "state/ssl_gc_common.pb.h"
#include "rcon/ssl_gc_rcon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto;
class ControllerToRemoteControl;
struct ControllerToRemoteControlDefaultTypeInternal;
extern ControllerToRemoteControlDefaultTypeInternal _ControllerToRemoteControl_default_instance_;
class RemoteControlRegistration;
struct RemoteControlRegistrationDefaultTypeInternal;
extern RemoteControlRegistrationDefaultTypeInternal _RemoteControlRegistration_default_instance_;
class RemoteControlTeamState;
struct RemoteControlTeamStateDefaultTypeInternal;
extern RemoteControlTeamStateDefaultTypeInternal _RemoteControlTeamState_default_instance_;
class RemoteControlToController;
struct RemoteControlToControllerDefaultTypeInternal;
extern RemoteControlToControllerDefaultTypeInternal _RemoteControlToController_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ControllerToRemoteControl* Arena::CreateMaybeMessage<::ControllerToRemoteControl>(Arena*);
template<> ::RemoteControlRegistration* Arena::CreateMaybeMessage<::RemoteControlRegistration>(Arena*);
template<> ::RemoteControlTeamState* Arena::CreateMaybeMessage<::RemoteControlTeamState>(Arena*);
template<> ::RemoteControlToController* Arena::CreateMaybeMessage<::RemoteControlToController>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum RemoteControlToController_Request : int {
  RemoteControlToController_Request_UNKNOWN = 0,
  RemoteControlToController_Request_PING = 1,
  RemoteControlToController_Request_CHALLENGE_FLAG = 2,
  RemoteControlToController_Request_STOP_TIMEOUT = 3,
  RemoteControlToController_Request_FAIL_BALLPLACEMENT = 4
};
bool RemoteControlToController_Request_IsValid(int value);
constexpr RemoteControlToController_Request RemoteControlToController_Request_Request_MIN = RemoteControlToController_Request_UNKNOWN;
constexpr RemoteControlToController_Request RemoteControlToController_Request_Request_MAX = RemoteControlToController_Request_FAIL_BALLPLACEMENT;
constexpr int RemoteControlToController_Request_Request_ARRAYSIZE = RemoteControlToController_Request_Request_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemoteControlToController_Request_descriptor();
template<typename T>
inline const std::string& RemoteControlToController_Request_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RemoteControlToController_Request>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RemoteControlToController_Request_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RemoteControlToController_Request_descriptor(), enum_t_value);
}
inline bool RemoteControlToController_Request_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RemoteControlToController_Request* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RemoteControlToController_Request>(
    RemoteControlToController_Request_descriptor(), name, value);
}
enum RemoteControlRequestType : int {
  UNKNOWN_REQUEST_TYPE = 0,
  EMERGENCY_STOP = 1,
  ROBOT_SUBSTITUTION = 2,
  TIMEOUT = 3,
  CHALLENGE_FLAG = 4,
  CHANGE_KEEPER_ID = 5,
  STOP_TIMEOUT = 6,
  FAIL_BALLPLACEMENT = 7
};
bool RemoteControlRequestType_IsValid(int value);
constexpr RemoteControlRequestType RemoteControlRequestType_MIN = UNKNOWN_REQUEST_TYPE;
constexpr RemoteControlRequestType RemoteControlRequestType_MAX = FAIL_BALLPLACEMENT;
constexpr int RemoteControlRequestType_ARRAYSIZE = RemoteControlRequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemoteControlRequestType_descriptor();
template<typename T>
inline const std::string& RemoteControlRequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RemoteControlRequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RemoteControlRequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RemoteControlRequestType_descriptor(), enum_t_value);
}
inline bool RemoteControlRequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RemoteControlRequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RemoteControlRequestType>(
    RemoteControlRequestType_descriptor(), name, value);
}
// ===================================================================

class RemoteControlRegistration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RemoteControlRegistration) */ {
 public:
  inline RemoteControlRegistration() : RemoteControlRegistration(nullptr) {}
  ~RemoteControlRegistration() override;
  explicit PROTOBUF_CONSTEXPR RemoteControlRegistration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteControlRegistration(const RemoteControlRegistration& from);
  RemoteControlRegistration(RemoteControlRegistration&& from) noexcept
    : RemoteControlRegistration() {
    *this = ::std::move(from);
  }

  inline RemoteControlRegistration& operator=(const RemoteControlRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteControlRegistration& operator=(RemoteControlRegistration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteControlRegistration& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteControlRegistration* internal_default_instance() {
    return reinterpret_cast<const RemoteControlRegistration*>(
               &_RemoteControlRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RemoteControlRegistration& a, RemoteControlRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteControlRegistration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteControlRegistration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteControlRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteControlRegistration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteControlRegistration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoteControlRegistration& from) {
    RemoteControlRegistration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteControlRegistration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RemoteControlRegistration";
  }
  protected:
  explicit RemoteControlRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kTeamFieldNumber = 1,
  };
  // optional .Signature signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::Signature& signature() const;
  PROTOBUF_NODISCARD ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);
  private:
  const ::Signature& _internal_signature() const;
  ::Signature* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::Signature* signature);
  ::Signature* unsafe_arena_release_signature();

  // required .Team team = 1;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::Team team() const;
  void set_team(::Team value);
  private:
  ::Team _internal_team() const;
  void _internal_set_team(::Team value);
  public:

  // @@protoc_insertion_point(class_scope:RemoteControlRegistration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Signature* signature_;
    int team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto;
};
// -------------------------------------------------------------------

class RemoteControlToController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RemoteControlToController) */ {
 public:
  inline RemoteControlToController() : RemoteControlToController(nullptr) {}
  ~RemoteControlToController() override;
  explicit PROTOBUF_CONSTEXPR RemoteControlToController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteControlToController(const RemoteControlToController& from);
  RemoteControlToController(RemoteControlToController&& from) noexcept
    : RemoteControlToController() {
    *this = ::std::move(from);
  }

  inline RemoteControlToController& operator=(const RemoteControlToController& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteControlToController& operator=(RemoteControlToController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteControlToController& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kRequest = 2,
    kDesiredKeeper = 3,
    kRequestRobotSubstitution = 4,
    kRequestTimeout = 5,
    kRequestEmergencyStop = 6,
    MSG_NOT_SET = 0,
  };

  static inline const RemoteControlToController* internal_default_instance() {
    return reinterpret_cast<const RemoteControlToController*>(
               &_RemoteControlToController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RemoteControlToController& a, RemoteControlToController& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteControlToController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteControlToController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteControlToController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteControlToController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteControlToController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoteControlToController& from) {
    RemoteControlToController::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteControlToController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RemoteControlToController";
  }
  protected:
  explicit RemoteControlToController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RemoteControlToController_Request Request;
  static constexpr Request UNKNOWN =
    RemoteControlToController_Request_UNKNOWN;
  static constexpr Request PING =
    RemoteControlToController_Request_PING;
  static constexpr Request CHALLENGE_FLAG =
    RemoteControlToController_Request_CHALLENGE_FLAG;
  static constexpr Request STOP_TIMEOUT =
    RemoteControlToController_Request_STOP_TIMEOUT;
  static constexpr Request FAIL_BALLPLACEMENT =
    RemoteControlToController_Request_FAIL_BALLPLACEMENT;
  static inline bool Request_IsValid(int value) {
    return RemoteControlToController_Request_IsValid(value);
  }
  static constexpr Request Request_MIN =
    RemoteControlToController_Request_Request_MIN;
  static constexpr Request Request_MAX =
    RemoteControlToController_Request_Request_MAX;
  static constexpr int Request_ARRAYSIZE =
    RemoteControlToController_Request_Request_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Request_descriptor() {
    return RemoteControlToController_Request_descriptor();
  }
  template<typename T>
  static inline const std::string& Request_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Request>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Request_Name.");
    return RemoteControlToController_Request_Name(enum_t_value);
  }
  static inline bool Request_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Request* value) {
    return RemoteControlToController_Request_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kRequestFieldNumber = 2,
    kDesiredKeeperFieldNumber = 3,
    kRequestRobotSubstitutionFieldNumber = 4,
    kRequestTimeoutFieldNumber = 5,
    kRequestEmergencyStopFieldNumber = 6,
  };
  // optional .Signature signature = 1;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::Signature& signature() const;
  PROTOBUF_NODISCARD ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);
  private:
  const ::Signature& _internal_signature() const;
  ::Signature* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::Signature* signature);
  ::Signature* unsafe_arena_release_signature();

  // .RemoteControlToController.Request request = 2;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  ::RemoteControlToController_Request request() const;
  void set_request(::RemoteControlToController_Request value);
  private:
  ::RemoteControlToController_Request _internal_request() const;
  void _internal_set_request(::RemoteControlToController_Request value);
  public:

  // int32 desired_keeper = 3;
  bool has_desired_keeper() const;
  private:
  bool _internal_has_desired_keeper() const;
  public:
  void clear_desired_keeper();
  int32_t desired_keeper() const;
  void set_desired_keeper(int32_t value);
  private:
  int32_t _internal_desired_keeper() const;
  void _internal_set_desired_keeper(int32_t value);
  public:

  // bool request_robot_substitution = 4;
  bool has_request_robot_substitution() const;
  private:
  bool _internal_has_request_robot_substitution() const;
  public:
  void clear_request_robot_substitution();
  bool request_robot_substitution() const;
  void set_request_robot_substitution(bool value);
  private:
  bool _internal_request_robot_substitution() const;
  void _internal_set_request_robot_substitution(bool value);
  public:

  // bool request_timeout = 5;
  bool has_request_timeout() const;
  private:
  bool _internal_has_request_timeout() const;
  public:
  void clear_request_timeout();
  bool request_timeout() const;
  void set_request_timeout(bool value);
  private:
  bool _internal_request_timeout() const;
  void _internal_set_request_timeout(bool value);
  public:

  // bool request_emergency_stop = 6;
  bool has_request_emergency_stop() const;
  private:
  bool _internal_has_request_emergency_stop() const;
  public:
  void clear_request_emergency_stop();
  bool request_emergency_stop() const;
  void set_request_emergency_stop(bool value);
  private:
  bool _internal_request_emergency_stop() const;
  void _internal_set_request_emergency_stop(bool value);
  public:

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:RemoteControlToController)
 private:
  class _Internal;
  void set_has_request();
  void set_has_desired_keeper();
  void set_has_request_robot_substitution();
  void set_has_request_timeout();
  void set_has_request_emergency_stop();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Signature* signature_;
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int request_;
      int32_t desired_keeper_;
      bool request_robot_substitution_;
      bool request_timeout_;
      bool request_emergency_stop_;
    } msg_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto;
};
// -------------------------------------------------------------------

class ControllerToRemoteControl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControllerToRemoteControl) */ {
 public:
  inline ControllerToRemoteControl() : ControllerToRemoteControl(nullptr) {}
  ~ControllerToRemoteControl() override;
  explicit PROTOBUF_CONSTEXPR ControllerToRemoteControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerToRemoteControl(const ControllerToRemoteControl& from);
  ControllerToRemoteControl(ControllerToRemoteControl&& from) noexcept
    : ControllerToRemoteControl() {
    *this = ::std::move(from);
  }

  inline ControllerToRemoteControl& operator=(const ControllerToRemoteControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerToRemoteControl& operator=(ControllerToRemoteControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerToRemoteControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerToRemoteControl* internal_default_instance() {
    return reinterpret_cast<const ControllerToRemoteControl*>(
               &_ControllerToRemoteControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControllerToRemoteControl& a, ControllerToRemoteControl& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerToRemoteControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerToRemoteControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerToRemoteControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerToRemoteControl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerToRemoteControl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerToRemoteControl& from) {
    ControllerToRemoteControl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerToRemoteControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControllerToRemoteControl";
  }
  protected:
  explicit ControllerToRemoteControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerReplyFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional .ControllerReply controller_reply = 1;
  bool has_controller_reply() const;
  private:
  bool _internal_has_controller_reply() const;
  public:
  void clear_controller_reply();
  const ::ControllerReply& controller_reply() const;
  PROTOBUF_NODISCARD ::ControllerReply* release_controller_reply();
  ::ControllerReply* mutable_controller_reply();
  void set_allocated_controller_reply(::ControllerReply* controller_reply);
  private:
  const ::ControllerReply& _internal_controller_reply() const;
  ::ControllerReply* _internal_mutable_controller_reply();
  public:
  void unsafe_arena_set_allocated_controller_reply(
      ::ControllerReply* controller_reply);
  ::ControllerReply* unsafe_arena_release_controller_reply();

  // optional .RemoteControlTeamState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::RemoteControlTeamState& state() const;
  PROTOBUF_NODISCARD ::RemoteControlTeamState* release_state();
  ::RemoteControlTeamState* mutable_state();
  void set_allocated_state(::RemoteControlTeamState* state);
  private:
  const ::RemoteControlTeamState& _internal_state() const;
  ::RemoteControlTeamState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::RemoteControlTeamState* state);
  ::RemoteControlTeamState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:ControllerToRemoteControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ControllerReply* controller_reply_;
    ::RemoteControlTeamState* state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto;
};
// -------------------------------------------------------------------

class RemoteControlTeamState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RemoteControlTeamState) */ {
 public:
  inline RemoteControlTeamState() : RemoteControlTeamState(nullptr) {}
  ~RemoteControlTeamState() override;
  explicit PROTOBUF_CONSTEXPR RemoteControlTeamState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteControlTeamState(const RemoteControlTeamState& from);
  RemoteControlTeamState(RemoteControlTeamState&& from) noexcept
    : RemoteControlTeamState() {
    *this = ::std::move(from);
  }

  inline RemoteControlTeamState& operator=(const RemoteControlTeamState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteControlTeamState& operator=(RemoteControlTeamState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteControlTeamState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteControlTeamState* internal_default_instance() {
    return reinterpret_cast<const RemoteControlTeamState*>(
               &_RemoteControlTeamState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemoteControlTeamState& a, RemoteControlTeamState& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteControlTeamState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteControlTeamState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteControlTeamState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteControlTeamState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteControlTeamState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoteControlTeamState& from) {
    RemoteControlTeamState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteControlTeamState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RemoteControlTeamState";
  }
  protected:
  explicit RemoteControlTeamState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableRequestsFieldNumber = 1,
    kActiveRequestsFieldNumber = 2,
    kYellowCardsDueFieldNumber = 8,
    kKeeperIdFieldNumber = 3,
    kEmergencyStopInFieldNumber = 4,
    kTimeoutsLeftFieldNumber = 5,
    kChallengeFlagsLeftFieldNumber = 6,
    kMaxRobotsFieldNumber = 7,
    kRobotsOnFieldFieldNumber = 9,
    kTimeoutTimeLeftFieldNumber = 10,
    kCanSubstituteRobotFieldNumber = 11,
    kTeamFieldNumber = 12,
    kBotSubstitutionsLeftFieldNumber = 13,
    kBotSubstitutionTimeLeftFieldNumber = 14,
  };
  // repeated .RemoteControlRequestType available_requests = 1;
  int available_requests_size() const;
  private:
  int _internal_available_requests_size() const;
  public:
  void clear_available_requests();
  private:
  ::RemoteControlRequestType _internal_available_requests(int index) const;
  void _internal_add_available_requests(::RemoteControlRequestType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_available_requests();
  public:
  ::RemoteControlRequestType available_requests(int index) const;
  void set_available_requests(int index, ::RemoteControlRequestType value);
  void add_available_requests(::RemoteControlRequestType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& available_requests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_available_requests();

  // repeated .RemoteControlRequestType active_requests = 2;
  int active_requests_size() const;
  private:
  int _internal_active_requests_size() const;
  public:
  void clear_active_requests();
  private:
  ::RemoteControlRequestType _internal_active_requests(int index) const;
  void _internal_add_active_requests(::RemoteControlRequestType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_active_requests();
  public:
  ::RemoteControlRequestType active_requests(int index) const;
  void set_active_requests(int index, ::RemoteControlRequestType value);
  void add_active_requests(::RemoteControlRequestType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& active_requests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_active_requests();

  // repeated float yellow_cards_due = 8;
  int yellow_cards_due_size() const;
  private:
  int _internal_yellow_cards_due_size() const;
  public:
  void clear_yellow_cards_due();
  private:
  float _internal_yellow_cards_due(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_yellow_cards_due() const;
  void _internal_add_yellow_cards_due(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_yellow_cards_due();
  public:
  float yellow_cards_due(int index) const;
  void set_yellow_cards_due(int index, float value);
  void add_yellow_cards_due(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      yellow_cards_due() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_yellow_cards_due();

  // optional int32 keeper_id = 3;
  bool has_keeper_id() const;
  private:
  bool _internal_has_keeper_id() const;
  public:
  void clear_keeper_id();
  int32_t keeper_id() const;
  void set_keeper_id(int32_t value);
  private:
  int32_t _internal_keeper_id() const;
  void _internal_set_keeper_id(int32_t value);
  public:

  // optional float emergency_stop_in = 4;
  bool has_emergency_stop_in() const;
  private:
  bool _internal_has_emergency_stop_in() const;
  public:
  void clear_emergency_stop_in();
  float emergency_stop_in() const;
  void set_emergency_stop_in(float value);
  private:
  float _internal_emergency_stop_in() const;
  void _internal_set_emergency_stop_in(float value);
  public:

  // optional int32 timeouts_left = 5;
  bool has_timeouts_left() const;
  private:
  bool _internal_has_timeouts_left() const;
  public:
  void clear_timeouts_left();
  int32_t timeouts_left() const;
  void set_timeouts_left(int32_t value);
  private:
  int32_t _internal_timeouts_left() const;
  void _internal_set_timeouts_left(int32_t value);
  public:

  // optional int32 challenge_flags_left = 6;
  bool has_challenge_flags_left() const;
  private:
  bool _internal_has_challenge_flags_left() const;
  public:
  void clear_challenge_flags_left();
  int32_t challenge_flags_left() const;
  void set_challenge_flags_left(int32_t value);
  private:
  int32_t _internal_challenge_flags_left() const;
  void _internal_set_challenge_flags_left(int32_t value);
  public:

  // optional int32 max_robots = 7;
  bool has_max_robots() const;
  private:
  bool _internal_has_max_robots() const;
  public:
  void clear_max_robots();
  int32_t max_robots() const;
  void set_max_robots(int32_t value);
  private:
  int32_t _internal_max_robots() const;
  void _internal_set_max_robots(int32_t value);
  public:

  // optional int32 robots_on_field = 9;
  bool has_robots_on_field() const;
  private:
  bool _internal_has_robots_on_field() const;
  public:
  void clear_robots_on_field();
  int32_t robots_on_field() const;
  void set_robots_on_field(int32_t value);
  private:
  int32_t _internal_robots_on_field() const;
  void _internal_set_robots_on_field(int32_t value);
  public:

  // optional float timeout_time_left = 10;
  bool has_timeout_time_left() const;
  private:
  bool _internal_has_timeout_time_left() const;
  public:
  void clear_timeout_time_left();
  float timeout_time_left() const;
  void set_timeout_time_left(float value);
  private:
  float _internal_timeout_time_left() const;
  void _internal_set_timeout_time_left(float value);
  public:

  // optional bool can_substitute_robot = 11;
  bool has_can_substitute_robot() const;
  private:
  bool _internal_has_can_substitute_robot() const;
  public:
  void clear_can_substitute_robot();
  bool can_substitute_robot() const;
  void set_can_substitute_robot(bool value);
  private:
  bool _internal_can_substitute_robot() const;
  void _internal_set_can_substitute_robot(bool value);
  public:

  // optional .Team team = 12;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::Team team() const;
  void set_team(::Team value);
  private:
  ::Team _internal_team() const;
  void _internal_set_team(::Team value);
  public:

  // optional uint32 bot_substitutions_left = 13;
  bool has_bot_substitutions_left() const;
  private:
  bool _internal_has_bot_substitutions_left() const;
  public:
  void clear_bot_substitutions_left();
  uint32_t bot_substitutions_left() const;
  void set_bot_substitutions_left(uint32_t value);
  private:
  uint32_t _internal_bot_substitutions_left() const;
  void _internal_set_bot_substitutions_left(uint32_t value);
  public:

  // optional float bot_substitution_time_left = 14;
  bool has_bot_substitution_time_left() const;
  private:
  bool _internal_has_bot_substitution_time_left() const;
  public:
  void clear_bot_substitution_time_left();
  float bot_substitution_time_left() const;
  void set_bot_substitution_time_left(float value);
  private:
  float _internal_bot_substitution_time_left() const;
  void _internal_set_bot_substitution_time_left(float value);
  public:

  // @@protoc_insertion_point(class_scope:RemoteControlTeamState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> available_requests_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> active_requests_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > yellow_cards_due_;
    int32_t keeper_id_;
    float emergency_stop_in_;
    int32_t timeouts_left_;
    int32_t challenge_flags_left_;
    int32_t max_robots_;
    int32_t robots_on_field_;
    float timeout_time_left_;
    bool can_substitute_robot_;
    int team_;
    uint32_t bot_substitutions_left_;
    float bot_substitution_time_left_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RemoteControlRegistration

// required .Team team = 1;
inline bool RemoteControlRegistration::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RemoteControlRegistration::has_team() const {
  return _internal_has_team();
}
inline void RemoteControlRegistration::clear_team() {
  _impl_.team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team RemoteControlRegistration::_internal_team() const {
  return static_cast< ::Team >(_impl_.team_);
}
inline ::Team RemoteControlRegistration::team() const {
  // @@protoc_insertion_point(field_get:RemoteControlRegistration.team)
  return _internal_team();
}
inline void RemoteControlRegistration::_internal_set_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_ = value;
}
inline void RemoteControlRegistration::set_team(::Team value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:RemoteControlRegistration.team)
}

// optional .Signature signature = 2;
inline bool RemoteControlRegistration::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline bool RemoteControlRegistration::has_signature() const {
  return _internal_has_signature();
}
inline const ::Signature& RemoteControlRegistration::_internal_signature() const {
  const ::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::Signature&>(
      ::_Signature_default_instance_);
}
inline const ::Signature& RemoteControlRegistration::signature() const {
  // @@protoc_insertion_point(field_get:RemoteControlRegistration.signature)
  return _internal_signature();
}
inline void RemoteControlRegistration::unsafe_arena_set_allocated_signature(
    ::Signature* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = signature;
  if (signature) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RemoteControlRegistration.signature)
}
inline ::Signature* RemoteControlRegistration::release_signature() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Signature* RemoteControlRegistration::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:RemoteControlRegistration.signature)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::Signature* RemoteControlRegistration::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaForAllocation());
    _impl_.signature_ = p;
  }
  return _impl_.signature_;
}
inline ::Signature* RemoteControlRegistration::mutable_signature() {
  ::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:RemoteControlRegistration.signature)
  return _msg;
}
inline void RemoteControlRegistration::set_allocated_signature(::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature));
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:RemoteControlRegistration.signature)
}

// -------------------------------------------------------------------

// RemoteControlToController

// optional .Signature signature = 1;
inline bool RemoteControlToController::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline bool RemoteControlToController::has_signature() const {
  return _internal_has_signature();
}
inline const ::Signature& RemoteControlToController::_internal_signature() const {
  const ::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::Signature&>(
      ::_Signature_default_instance_);
}
inline const ::Signature& RemoteControlToController::signature() const {
  // @@protoc_insertion_point(field_get:RemoteControlToController.signature)
  return _internal_signature();
}
inline void RemoteControlToController::unsafe_arena_set_allocated_signature(
    ::Signature* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = signature;
  if (signature) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RemoteControlToController.signature)
}
inline ::Signature* RemoteControlToController::release_signature() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Signature* RemoteControlToController::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:RemoteControlToController.signature)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::Signature* RemoteControlToController::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaForAllocation());
    _impl_.signature_ = p;
  }
  return _impl_.signature_;
}
inline ::Signature* RemoteControlToController::mutable_signature() {
  ::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:RemoteControlToController.signature)
  return _msg;
}
inline void RemoteControlToController::set_allocated_signature(::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature));
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:RemoteControlToController.signature)
}

// .RemoteControlToController.Request request = 2;
inline bool RemoteControlToController::_internal_has_request() const {
  return msg_case() == kRequest;
}
inline bool RemoteControlToController::has_request() const {
  return _internal_has_request();
}
inline void RemoteControlToController::set_has_request() {
  _impl_._oneof_case_[0] = kRequest;
}
inline void RemoteControlToController::clear_request() {
  if (_internal_has_request()) {
    _impl_.msg_.request_ = 0;
    clear_has_msg();
  }
}
inline ::RemoteControlToController_Request RemoteControlToController::_internal_request() const {
  if (_internal_has_request()) {
    return static_cast< ::RemoteControlToController_Request >(_impl_.msg_.request_);
  }
  return static_cast< ::RemoteControlToController_Request >(0);
}
inline ::RemoteControlToController_Request RemoteControlToController::request() const {
  // @@protoc_insertion_point(field_get:RemoteControlToController.request)
  return _internal_request();
}
inline void RemoteControlToController::_internal_set_request(::RemoteControlToController_Request value) {
  assert(::RemoteControlToController_Request_IsValid(value));
  if (!_internal_has_request()) {
    clear_msg();
    set_has_request();
  }
  _impl_.msg_.request_ = value;
}
inline void RemoteControlToController::set_request(::RemoteControlToController_Request value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:RemoteControlToController.request)
}

// int32 desired_keeper = 3;
inline bool RemoteControlToController::_internal_has_desired_keeper() const {
  return msg_case() == kDesiredKeeper;
}
inline bool RemoteControlToController::has_desired_keeper() const {
  return _internal_has_desired_keeper();
}
inline void RemoteControlToController::set_has_desired_keeper() {
  _impl_._oneof_case_[0] = kDesiredKeeper;
}
inline void RemoteControlToController::clear_desired_keeper() {
  if (_internal_has_desired_keeper()) {
    _impl_.msg_.desired_keeper_ = 0;
    clear_has_msg();
  }
}
inline int32_t RemoteControlToController::_internal_desired_keeper() const {
  if (_internal_has_desired_keeper()) {
    return _impl_.msg_.desired_keeper_;
  }
  return 0;
}
inline void RemoteControlToController::_internal_set_desired_keeper(int32_t value) {
  if (!_internal_has_desired_keeper()) {
    clear_msg();
    set_has_desired_keeper();
  }
  _impl_.msg_.desired_keeper_ = value;
}
inline int32_t RemoteControlToController::desired_keeper() const {
  // @@protoc_insertion_point(field_get:RemoteControlToController.desired_keeper)
  return _internal_desired_keeper();
}
inline void RemoteControlToController::set_desired_keeper(int32_t value) {
  _internal_set_desired_keeper(value);
  // @@protoc_insertion_point(field_set:RemoteControlToController.desired_keeper)
}

// bool request_robot_substitution = 4;
inline bool RemoteControlToController::_internal_has_request_robot_substitution() const {
  return msg_case() == kRequestRobotSubstitution;
}
inline bool RemoteControlToController::has_request_robot_substitution() const {
  return _internal_has_request_robot_substitution();
}
inline void RemoteControlToController::set_has_request_robot_substitution() {
  _impl_._oneof_case_[0] = kRequestRobotSubstitution;
}
inline void RemoteControlToController::clear_request_robot_substitution() {
  if (_internal_has_request_robot_substitution()) {
    _impl_.msg_.request_robot_substitution_ = false;
    clear_has_msg();
  }
}
inline bool RemoteControlToController::_internal_request_robot_substitution() const {
  if (_internal_has_request_robot_substitution()) {
    return _impl_.msg_.request_robot_substitution_;
  }
  return false;
}
inline void RemoteControlToController::_internal_set_request_robot_substitution(bool value) {
  if (!_internal_has_request_robot_substitution()) {
    clear_msg();
    set_has_request_robot_substitution();
  }
  _impl_.msg_.request_robot_substitution_ = value;
}
inline bool RemoteControlToController::request_robot_substitution() const {
  // @@protoc_insertion_point(field_get:RemoteControlToController.request_robot_substitution)
  return _internal_request_robot_substitution();
}
inline void RemoteControlToController::set_request_robot_substitution(bool value) {
  _internal_set_request_robot_substitution(value);
  // @@protoc_insertion_point(field_set:RemoteControlToController.request_robot_substitution)
}

// bool request_timeout = 5;
inline bool RemoteControlToController::_internal_has_request_timeout() const {
  return msg_case() == kRequestTimeout;
}
inline bool RemoteControlToController::has_request_timeout() const {
  return _internal_has_request_timeout();
}
inline void RemoteControlToController::set_has_request_timeout() {
  _impl_._oneof_case_[0] = kRequestTimeout;
}
inline void RemoteControlToController::clear_request_timeout() {
  if (_internal_has_request_timeout()) {
    _impl_.msg_.request_timeout_ = false;
    clear_has_msg();
  }
}
inline bool RemoteControlToController::_internal_request_timeout() const {
  if (_internal_has_request_timeout()) {
    return _impl_.msg_.request_timeout_;
  }
  return false;
}
inline void RemoteControlToController::_internal_set_request_timeout(bool value) {
  if (!_internal_has_request_timeout()) {
    clear_msg();
    set_has_request_timeout();
  }
  _impl_.msg_.request_timeout_ = value;
}
inline bool RemoteControlToController::request_timeout() const {
  // @@protoc_insertion_point(field_get:RemoteControlToController.request_timeout)
  return _internal_request_timeout();
}
inline void RemoteControlToController::set_request_timeout(bool value) {
  _internal_set_request_timeout(value);
  // @@protoc_insertion_point(field_set:RemoteControlToController.request_timeout)
}

// bool request_emergency_stop = 6;
inline bool RemoteControlToController::_internal_has_request_emergency_stop() const {
  return msg_case() == kRequestEmergencyStop;
}
inline bool RemoteControlToController::has_request_emergency_stop() const {
  return _internal_has_request_emergency_stop();
}
inline void RemoteControlToController::set_has_request_emergency_stop() {
  _impl_._oneof_case_[0] = kRequestEmergencyStop;
}
inline void RemoteControlToController::clear_request_emergency_stop() {
  if (_internal_has_request_emergency_stop()) {
    _impl_.msg_.request_emergency_stop_ = false;
    clear_has_msg();
  }
}
inline bool RemoteControlToController::_internal_request_emergency_stop() const {
  if (_internal_has_request_emergency_stop()) {
    return _impl_.msg_.request_emergency_stop_;
  }
  return false;
}
inline void RemoteControlToController::_internal_set_request_emergency_stop(bool value) {
  if (!_internal_has_request_emergency_stop()) {
    clear_msg();
    set_has_request_emergency_stop();
  }
  _impl_.msg_.request_emergency_stop_ = value;
}
inline bool RemoteControlToController::request_emergency_stop() const {
  // @@protoc_insertion_point(field_get:RemoteControlToController.request_emergency_stop)
  return _internal_request_emergency_stop();
}
inline void RemoteControlToController::set_request_emergency_stop(bool value) {
  _internal_set_request_emergency_stop(value);
  // @@protoc_insertion_point(field_set:RemoteControlToController.request_emergency_stop)
}

inline bool RemoteControlToController::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void RemoteControlToController::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline RemoteControlToController::MsgCase RemoteControlToController::msg_case() const {
  return RemoteControlToController::MsgCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControllerToRemoteControl

// optional .ControllerReply controller_reply = 1;
inline bool ControllerToRemoteControl::_internal_has_controller_reply() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.controller_reply_ != nullptr);
  return value;
}
inline bool ControllerToRemoteControl::has_controller_reply() const {
  return _internal_has_controller_reply();
}
inline const ::ControllerReply& ControllerToRemoteControl::_internal_controller_reply() const {
  const ::ControllerReply* p = _impl_.controller_reply_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControllerReply&>(
      ::_ControllerReply_default_instance_);
}
inline const ::ControllerReply& ControllerToRemoteControl::controller_reply() const {
  // @@protoc_insertion_point(field_get:ControllerToRemoteControl.controller_reply)
  return _internal_controller_reply();
}
inline void ControllerToRemoteControl::unsafe_arena_set_allocated_controller_reply(
    ::ControllerReply* controller_reply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controller_reply_);
  }
  _impl_.controller_reply_ = controller_reply;
  if (controller_reply) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControllerToRemoteControl.controller_reply)
}
inline ::ControllerReply* ControllerToRemoteControl::release_controller_reply() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ControllerReply* temp = _impl_.controller_reply_;
  _impl_.controller_reply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControllerReply* ControllerToRemoteControl::unsafe_arena_release_controller_reply() {
  // @@protoc_insertion_point(field_release:ControllerToRemoteControl.controller_reply)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ControllerReply* temp = _impl_.controller_reply_;
  _impl_.controller_reply_ = nullptr;
  return temp;
}
inline ::ControllerReply* ControllerToRemoteControl::_internal_mutable_controller_reply() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.controller_reply_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControllerReply>(GetArenaForAllocation());
    _impl_.controller_reply_ = p;
  }
  return _impl_.controller_reply_;
}
inline ::ControllerReply* ControllerToRemoteControl::mutable_controller_reply() {
  ::ControllerReply* _msg = _internal_mutable_controller_reply();
  // @@protoc_insertion_point(field_mutable:ControllerToRemoteControl.controller_reply)
  return _msg;
}
inline void ControllerToRemoteControl::set_allocated_controller_reply(::ControllerReply* controller_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controller_reply_);
  }
  if (controller_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_reply));
    if (message_arena != submessage_arena) {
      controller_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_reply, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.controller_reply_ = controller_reply;
  // @@protoc_insertion_point(field_set_allocated:ControllerToRemoteControl.controller_reply)
}

// optional .RemoteControlTeamState state = 2;
inline bool ControllerToRemoteControl::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline bool ControllerToRemoteControl::has_state() const {
  return _internal_has_state();
}
inline void ControllerToRemoteControl::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::RemoteControlTeamState& ControllerToRemoteControl::_internal_state() const {
  const ::RemoteControlTeamState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::RemoteControlTeamState&>(
      ::_RemoteControlTeamState_default_instance_);
}
inline const ::RemoteControlTeamState& ControllerToRemoteControl::state() const {
  // @@protoc_insertion_point(field_get:ControllerToRemoteControl.state)
  return _internal_state();
}
inline void ControllerToRemoteControl::unsafe_arena_set_allocated_state(
    ::RemoteControlTeamState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControllerToRemoteControl.state)
}
inline ::RemoteControlTeamState* ControllerToRemoteControl::release_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RemoteControlTeamState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RemoteControlTeamState* ControllerToRemoteControl::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:ControllerToRemoteControl.state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RemoteControlTeamState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::RemoteControlTeamState* ControllerToRemoteControl::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::RemoteControlTeamState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::RemoteControlTeamState* ControllerToRemoteControl::mutable_state() {
  ::RemoteControlTeamState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:ControllerToRemoteControl.state)
  return _msg;
}
inline void ControllerToRemoteControl::set_allocated_state(::RemoteControlTeamState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:ControllerToRemoteControl.state)
}

// -------------------------------------------------------------------

// RemoteControlTeamState

// optional .Team team = 12;
inline bool RemoteControlTeamState::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RemoteControlTeamState::has_team() const {
  return _internal_has_team();
}
inline void RemoteControlTeamState::clear_team() {
  _impl_.team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::Team RemoteControlTeamState::_internal_team() const {
  return static_cast< ::Team >(_impl_.team_);
}
inline ::Team RemoteControlTeamState::team() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.team)
  return _internal_team();
}
inline void RemoteControlTeamState::_internal_set_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.team_ = value;
}
inline void RemoteControlTeamState::set_team(::Team value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.team)
}

// repeated .RemoteControlRequestType available_requests = 1;
inline int RemoteControlTeamState::_internal_available_requests_size() const {
  return _impl_.available_requests_.size();
}
inline int RemoteControlTeamState::available_requests_size() const {
  return _internal_available_requests_size();
}
inline void RemoteControlTeamState::clear_available_requests() {
  _impl_.available_requests_.Clear();
}
inline ::RemoteControlRequestType RemoteControlTeamState::_internal_available_requests(int index) const {
  return static_cast< ::RemoteControlRequestType >(_impl_.available_requests_.Get(index));
}
inline ::RemoteControlRequestType RemoteControlTeamState::available_requests(int index) const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.available_requests)
  return _internal_available_requests(index);
}
inline void RemoteControlTeamState::set_available_requests(int index, ::RemoteControlRequestType value) {
  assert(::RemoteControlRequestType_IsValid(value));
  _impl_.available_requests_.Set(index, value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.available_requests)
}
inline void RemoteControlTeamState::_internal_add_available_requests(::RemoteControlRequestType value) {
  assert(::RemoteControlRequestType_IsValid(value));
  _impl_.available_requests_.Add(value);
}
inline void RemoteControlTeamState::add_available_requests(::RemoteControlRequestType value) {
  _internal_add_available_requests(value);
  // @@protoc_insertion_point(field_add:RemoteControlTeamState.available_requests)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
RemoteControlTeamState::available_requests() const {
  // @@protoc_insertion_point(field_list:RemoteControlTeamState.available_requests)
  return _impl_.available_requests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
RemoteControlTeamState::_internal_mutable_available_requests() {
  return &_impl_.available_requests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
RemoteControlTeamState::mutable_available_requests() {
  // @@protoc_insertion_point(field_mutable_list:RemoteControlTeamState.available_requests)
  return _internal_mutable_available_requests();
}

// repeated .RemoteControlRequestType active_requests = 2;
inline int RemoteControlTeamState::_internal_active_requests_size() const {
  return _impl_.active_requests_.size();
}
inline int RemoteControlTeamState::active_requests_size() const {
  return _internal_active_requests_size();
}
inline void RemoteControlTeamState::clear_active_requests() {
  _impl_.active_requests_.Clear();
}
inline ::RemoteControlRequestType RemoteControlTeamState::_internal_active_requests(int index) const {
  return static_cast< ::RemoteControlRequestType >(_impl_.active_requests_.Get(index));
}
inline ::RemoteControlRequestType RemoteControlTeamState::active_requests(int index) const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.active_requests)
  return _internal_active_requests(index);
}
inline void RemoteControlTeamState::set_active_requests(int index, ::RemoteControlRequestType value) {
  assert(::RemoteControlRequestType_IsValid(value));
  _impl_.active_requests_.Set(index, value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.active_requests)
}
inline void RemoteControlTeamState::_internal_add_active_requests(::RemoteControlRequestType value) {
  assert(::RemoteControlRequestType_IsValid(value));
  _impl_.active_requests_.Add(value);
}
inline void RemoteControlTeamState::add_active_requests(::RemoteControlRequestType value) {
  _internal_add_active_requests(value);
  // @@protoc_insertion_point(field_add:RemoteControlTeamState.active_requests)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
RemoteControlTeamState::active_requests() const {
  // @@protoc_insertion_point(field_list:RemoteControlTeamState.active_requests)
  return _impl_.active_requests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
RemoteControlTeamState::_internal_mutable_active_requests() {
  return &_impl_.active_requests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
RemoteControlTeamState::mutable_active_requests() {
  // @@protoc_insertion_point(field_mutable_list:RemoteControlTeamState.active_requests)
  return _internal_mutable_active_requests();
}

// optional int32 keeper_id = 3;
inline bool RemoteControlTeamState::_internal_has_keeper_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RemoteControlTeamState::has_keeper_id() const {
  return _internal_has_keeper_id();
}
inline void RemoteControlTeamState::clear_keeper_id() {
  _impl_.keeper_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t RemoteControlTeamState::_internal_keeper_id() const {
  return _impl_.keeper_id_;
}
inline int32_t RemoteControlTeamState::keeper_id() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.keeper_id)
  return _internal_keeper_id();
}
inline void RemoteControlTeamState::_internal_set_keeper_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.keeper_id_ = value;
}
inline void RemoteControlTeamState::set_keeper_id(int32_t value) {
  _internal_set_keeper_id(value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.keeper_id)
}

// optional float emergency_stop_in = 4;
inline bool RemoteControlTeamState::_internal_has_emergency_stop_in() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RemoteControlTeamState::has_emergency_stop_in() const {
  return _internal_has_emergency_stop_in();
}
inline void RemoteControlTeamState::clear_emergency_stop_in() {
  _impl_.emergency_stop_in_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float RemoteControlTeamState::_internal_emergency_stop_in() const {
  return _impl_.emergency_stop_in_;
}
inline float RemoteControlTeamState::emergency_stop_in() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.emergency_stop_in)
  return _internal_emergency_stop_in();
}
inline void RemoteControlTeamState::_internal_set_emergency_stop_in(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.emergency_stop_in_ = value;
}
inline void RemoteControlTeamState::set_emergency_stop_in(float value) {
  _internal_set_emergency_stop_in(value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.emergency_stop_in)
}

// optional int32 timeouts_left = 5;
inline bool RemoteControlTeamState::_internal_has_timeouts_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RemoteControlTeamState::has_timeouts_left() const {
  return _internal_has_timeouts_left();
}
inline void RemoteControlTeamState::clear_timeouts_left() {
  _impl_.timeouts_left_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t RemoteControlTeamState::_internal_timeouts_left() const {
  return _impl_.timeouts_left_;
}
inline int32_t RemoteControlTeamState::timeouts_left() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.timeouts_left)
  return _internal_timeouts_left();
}
inline void RemoteControlTeamState::_internal_set_timeouts_left(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timeouts_left_ = value;
}
inline void RemoteControlTeamState::set_timeouts_left(int32_t value) {
  _internal_set_timeouts_left(value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.timeouts_left)
}

// optional float timeout_time_left = 10;
inline bool RemoteControlTeamState::_internal_has_timeout_time_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RemoteControlTeamState::has_timeout_time_left() const {
  return _internal_has_timeout_time_left();
}
inline void RemoteControlTeamState::clear_timeout_time_left() {
  _impl_.timeout_time_left_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float RemoteControlTeamState::_internal_timeout_time_left() const {
  return _impl_.timeout_time_left_;
}
inline float RemoteControlTeamState::timeout_time_left() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.timeout_time_left)
  return _internal_timeout_time_left();
}
inline void RemoteControlTeamState::_internal_set_timeout_time_left(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.timeout_time_left_ = value;
}
inline void RemoteControlTeamState::set_timeout_time_left(float value) {
  _internal_set_timeout_time_left(value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.timeout_time_left)
}

// optional int32 challenge_flags_left = 6;
inline bool RemoteControlTeamState::_internal_has_challenge_flags_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RemoteControlTeamState::has_challenge_flags_left() const {
  return _internal_has_challenge_flags_left();
}
inline void RemoteControlTeamState::clear_challenge_flags_left() {
  _impl_.challenge_flags_left_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t RemoteControlTeamState::_internal_challenge_flags_left() const {
  return _impl_.challenge_flags_left_;
}
inline int32_t RemoteControlTeamState::challenge_flags_left() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.challenge_flags_left)
  return _internal_challenge_flags_left();
}
inline void RemoteControlTeamState::_internal_set_challenge_flags_left(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.challenge_flags_left_ = value;
}
inline void RemoteControlTeamState::set_challenge_flags_left(int32_t value) {
  _internal_set_challenge_flags_left(value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.challenge_flags_left)
}

// optional int32 max_robots = 7;
inline bool RemoteControlTeamState::_internal_has_max_robots() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RemoteControlTeamState::has_max_robots() const {
  return _internal_has_max_robots();
}
inline void RemoteControlTeamState::clear_max_robots() {
  _impl_.max_robots_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t RemoteControlTeamState::_internal_max_robots() const {
  return _impl_.max_robots_;
}
inline int32_t RemoteControlTeamState::max_robots() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.max_robots)
  return _internal_max_robots();
}
inline void RemoteControlTeamState::_internal_set_max_robots(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.max_robots_ = value;
}
inline void RemoteControlTeamState::set_max_robots(int32_t value) {
  _internal_set_max_robots(value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.max_robots)
}

// optional int32 robots_on_field = 9;
inline bool RemoteControlTeamState::_internal_has_robots_on_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RemoteControlTeamState::has_robots_on_field() const {
  return _internal_has_robots_on_field();
}
inline void RemoteControlTeamState::clear_robots_on_field() {
  _impl_.robots_on_field_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t RemoteControlTeamState::_internal_robots_on_field() const {
  return _impl_.robots_on_field_;
}
inline int32_t RemoteControlTeamState::robots_on_field() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.robots_on_field)
  return _internal_robots_on_field();
}
inline void RemoteControlTeamState::_internal_set_robots_on_field(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.robots_on_field_ = value;
}
inline void RemoteControlTeamState::set_robots_on_field(int32_t value) {
  _internal_set_robots_on_field(value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.robots_on_field)
}

// repeated float yellow_cards_due = 8;
inline int RemoteControlTeamState::_internal_yellow_cards_due_size() const {
  return _impl_.yellow_cards_due_.size();
}
inline int RemoteControlTeamState::yellow_cards_due_size() const {
  return _internal_yellow_cards_due_size();
}
inline void RemoteControlTeamState::clear_yellow_cards_due() {
  _impl_.yellow_cards_due_.Clear();
}
inline float RemoteControlTeamState::_internal_yellow_cards_due(int index) const {
  return _impl_.yellow_cards_due_.Get(index);
}
inline float RemoteControlTeamState::yellow_cards_due(int index) const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.yellow_cards_due)
  return _internal_yellow_cards_due(index);
}
inline void RemoteControlTeamState::set_yellow_cards_due(int index, float value) {
  _impl_.yellow_cards_due_.Set(index, value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.yellow_cards_due)
}
inline void RemoteControlTeamState::_internal_add_yellow_cards_due(float value) {
  _impl_.yellow_cards_due_.Add(value);
}
inline void RemoteControlTeamState::add_yellow_cards_due(float value) {
  _internal_add_yellow_cards_due(value);
  // @@protoc_insertion_point(field_add:RemoteControlTeamState.yellow_cards_due)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RemoteControlTeamState::_internal_yellow_cards_due() const {
  return _impl_.yellow_cards_due_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RemoteControlTeamState::yellow_cards_due() const {
  // @@protoc_insertion_point(field_list:RemoteControlTeamState.yellow_cards_due)
  return _internal_yellow_cards_due();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RemoteControlTeamState::_internal_mutable_yellow_cards_due() {
  return &_impl_.yellow_cards_due_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RemoteControlTeamState::mutable_yellow_cards_due() {
  // @@protoc_insertion_point(field_mutable_list:RemoteControlTeamState.yellow_cards_due)
  return _internal_mutable_yellow_cards_due();
}

// optional bool can_substitute_robot = 11;
inline bool RemoteControlTeamState::_internal_has_can_substitute_robot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RemoteControlTeamState::has_can_substitute_robot() const {
  return _internal_has_can_substitute_robot();
}
inline void RemoteControlTeamState::clear_can_substitute_robot() {
  _impl_.can_substitute_robot_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool RemoteControlTeamState::_internal_can_substitute_robot() const {
  return _impl_.can_substitute_robot_;
}
inline bool RemoteControlTeamState::can_substitute_robot() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.can_substitute_robot)
  return _internal_can_substitute_robot();
}
inline void RemoteControlTeamState::_internal_set_can_substitute_robot(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.can_substitute_robot_ = value;
}
inline void RemoteControlTeamState::set_can_substitute_robot(bool value) {
  _internal_set_can_substitute_robot(value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.can_substitute_robot)
}

// optional uint32 bot_substitutions_left = 13;
inline bool RemoteControlTeamState::_internal_has_bot_substitutions_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RemoteControlTeamState::has_bot_substitutions_left() const {
  return _internal_has_bot_substitutions_left();
}
inline void RemoteControlTeamState::clear_bot_substitutions_left() {
  _impl_.bot_substitutions_left_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t RemoteControlTeamState::_internal_bot_substitutions_left() const {
  return _impl_.bot_substitutions_left_;
}
inline uint32_t RemoteControlTeamState::bot_substitutions_left() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.bot_substitutions_left)
  return _internal_bot_substitutions_left();
}
inline void RemoteControlTeamState::_internal_set_bot_substitutions_left(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bot_substitutions_left_ = value;
}
inline void RemoteControlTeamState::set_bot_substitutions_left(uint32_t value) {
  _internal_set_bot_substitutions_left(value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.bot_substitutions_left)
}

// optional float bot_substitution_time_left = 14;
inline bool RemoteControlTeamState::_internal_has_bot_substitution_time_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RemoteControlTeamState::has_bot_substitution_time_left() const {
  return _internal_has_bot_substitution_time_left();
}
inline void RemoteControlTeamState::clear_bot_substitution_time_left() {
  _impl_.bot_substitution_time_left_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float RemoteControlTeamState::_internal_bot_substitution_time_left() const {
  return _impl_.bot_substitution_time_left_;
}
inline float RemoteControlTeamState::bot_substitution_time_left() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.bot_substitution_time_left)
  return _internal_bot_substitution_time_left();
}
inline void RemoteControlTeamState::_internal_set_bot_substitution_time_left(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bot_substitution_time_left_ = value;
}
inline void RemoteControlTeamState::set_bot_substitution_time_left(float value) {
  _internal_set_bot_substitution_time_left(value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.bot_substitution_time_left)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RemoteControlToController_Request> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RemoteControlToController_Request>() {
  return ::RemoteControlToController_Request_descriptor();
}
template <> struct is_proto_enum< ::RemoteControlRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RemoteControlRequestType>() {
  return ::RemoteControlRequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto
