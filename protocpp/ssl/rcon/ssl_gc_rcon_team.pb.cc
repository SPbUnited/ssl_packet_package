// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcon/ssl_gc_rcon_team.proto

#include "rcon/ssl_gc_rcon_team.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TeamRegistration::TeamRegistration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_.team_)*/0} {}
struct TeamRegistrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamRegistrationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamRegistrationDefaultTypeInternal() {}
  union {
    TeamRegistration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamRegistrationDefaultTypeInternal _TeamRegistration_default_instance_;
PROTOBUF_CONSTEXPR TeamToController::TeamToController(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TeamToControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamToControllerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamToControllerDefaultTypeInternal() {}
  union {
    TeamToController _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamToControllerDefaultTypeInternal _TeamToController_default_instance_;
PROTOBUF_CONSTEXPR ControllerToTeam::ControllerToTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ControllerToTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerToTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerToTeamDefaultTypeInternal() {}
  union {
    ControllerToTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerToTeamDefaultTypeInternal _ControllerToTeam_default_instance_;
static ::_pb::Metadata file_level_metadata_rcon_2fssl_5fgc_5frcon_5fteam_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rcon_2fssl_5fgc_5frcon_5fteam_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rcon_2fssl_5fgc_5frcon_5fteam_2eproto = nullptr;

const uint32_t TableStruct_rcon_2fssl_5fgc_5frcon_5fteam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TeamRegistration, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeamRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TeamRegistration, _impl_.team_name_),
  PROTOBUF_FIELD_OFFSET(::TeamRegistration, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::TeamRegistration, _impl_.team_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TeamToController, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeamToController, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TeamToController, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TeamToController, _impl_.signature_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TeamToController, _impl_.msg_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControllerToTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ControllerToTeam, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ControllerToTeam, _impl_.msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::TeamRegistration)},
  { 12, 24, -1, sizeof(::TeamToController)},
  { 29, -1, -1, sizeof(::ControllerToTeam)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TeamRegistration_default_instance_._instance,
  &::_TeamToController_default_instance_._instance,
  &::_ControllerToTeam_default_instance_._instance,
};

const char descriptor_table_protodef_rcon_2fssl_5fgc_5frcon_5fteam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033rcon/ssl_gc_rcon_team.proto\032\031state/ssl"
  "_gc_common.proto\032\026rcon/ssl_gc_rcon.proto"
  "\"Y\n\020TeamRegistration\022\021\n\tteam_name\030\001 \002(\t\022"
  "\035\n\tsignature\030\002 \001(\0132\n.Signature\022\023\n\004team\030\003"
  " \001(\0162\005.Team\"\252\001\n\020TeamToController\022\035\n\tsign"
  "ature\030\001 \001(\0132\n.Signature\022\030\n\016desired_keepe"
  "r\030\002 \001(\005H\000\022,\n\020advantage_choice\030\003 \001(\0162\020.Ad"
  "vantageChoiceH\000\022\030\n\016substitute_bot\030\004 \001(\010H"
  "\000\022\016\n\004ping\030\005 \001(\010H\000B\005\n\003msg\"M\n\020ControllerTo"
  "Team\022,\n\020controller_reply\030\001 \001(\0132\020.Control"
  "lerReplyH\000B\005\n\003msgJ\004\010\002\020\003*)\n\017AdvantageChoi"
  "ce\022\010\n\004STOP\020\000\022\014\n\010CONTINUE\020\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto_deps[2] = {
  &::descriptor_table_rcon_2fssl_5fgc_5frcon_2eproto,
  &::descriptor_table_state_2fssl_5fgc_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto = {
    false, false, 466, descriptor_table_protodef_rcon_2fssl_5fgc_5frcon_5fteam_2eproto,
    "rcon/ssl_gc_rcon_team.proto",
    &descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto_once, descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_rcon_2fssl_5fgc_5frcon_5fteam_2eproto::offsets,
    file_level_metadata_rcon_2fssl_5fgc_5frcon_5fteam_2eproto, file_level_enum_descriptors_rcon_2fssl_5fgc_5frcon_5fteam_2eproto,
    file_level_service_descriptors_rcon_2fssl_5fgc_5frcon_5fteam_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto_getter() {
  return &descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rcon_2fssl_5fgc_5frcon_5fteam_2eproto(&descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdvantageChoice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto);
  return file_level_enum_descriptors_rcon_2fssl_5fgc_5frcon_5fteam_2eproto[0];
}
bool AdvantageChoice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TeamRegistration::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamRegistration>()._impl_._has_bits_);
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Signature& signature(const TeamRegistration* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::Signature&
TeamRegistration::_Internal::signature(const TeamRegistration* msg) {
  return *msg->_impl_.signature_;
}
void TeamRegistration::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TeamRegistration::TeamRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TeamRegistration)
}
TeamRegistration::TeamRegistration(const TeamRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamRegistration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name()) {
    _this->_impl_.team_name_.Set(from._internal_team_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::Signature(*from._impl_.signature_);
  }
  _this->_impl_.team_ = from._impl_.team_;
  // @@protoc_insertion_point(copy_constructor:TeamRegistration)
}

inline void TeamRegistration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.team_){0}
  };
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeamRegistration::~TeamRegistration() {
  // @@protoc_insertion_point(destructor:TeamRegistration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.signature_;
}

void TeamRegistration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRegistration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.signature_ != nullptr);
      _impl_.signature_->Clear();
    }
  }
  _impl_.team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamRegistration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string team_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_team_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TeamRegistration.team_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Team team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamRegistration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamRegistration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TeamRegistration.team_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_team_name(), target);
  }

  // optional .Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  // optional .Team team = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRegistration)
  return target;
}

size_t TeamRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRegistration)
  size_t total_size = 0;

  // required string team_name = 1;
  if (_internal_has_team_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_team_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .Signature signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signature_);
    }

    // optional .Team team = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamRegistration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamRegistration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamRegistration::GetClassData() const { return &_class_data_; }


void TeamRegistration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamRegistration*>(&to_msg);
  auto& from = static_cast<const TeamRegistration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TeamRegistration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_signature()->::Signature::MergeFrom(
          from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamRegistration::CopyFrom(const TeamRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRegistration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_signature()) {
    if (!_impl_.signature_->IsInitialized()) return false;
  }
  return true;
}

void TeamRegistration::InternalSwap(TeamRegistration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_, lhs_arena,
      &other->_impl_.team_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamRegistration, _impl_.team_)
      + sizeof(TeamRegistration::_impl_.team_)
      - PROTOBUF_FIELD_OFFSET(TeamRegistration, _impl_.signature_)>(
          reinterpret_cast<char*>(&_impl_.signature_),
          reinterpret_cast<char*>(&other->_impl_.signature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamRegistration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto_getter, &descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto_once,
      file_level_metadata_rcon_2fssl_5fgc_5frcon_5fteam_2eproto[0]);
}

// ===================================================================

class TeamToController::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamToController>()._impl_._has_bits_);
  static const ::Signature& signature(const TeamToController* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Signature&
TeamToController::_Internal::signature(const TeamToController* msg) {
  return *msg->_impl_.signature_;
}
void TeamToController::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TeamToController::TeamToController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TeamToController)
}
TeamToController::TeamToController(const TeamToController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamToController* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.msg_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::Signature(*from._impl_.signature_);
  }
  clear_has_msg();
  switch (from.msg_case()) {
    case kDesiredKeeper: {
      _this->_internal_set_desired_keeper(from._internal_desired_keeper());
      break;
    }
    case kAdvantageChoice: {
      _this->_internal_set_advantage_choice(from._internal_advantage_choice());
      break;
    }
    case kSubstituteBot: {
      _this->_internal_set_substitute_bot(from._internal_substitute_bot());
      break;
    }
    case kPing: {
      _this->_internal_set_ping(from._internal_ping());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TeamToController)
}

inline void TeamToController::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.msg_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

TeamToController::~TeamToController() {
  // @@protoc_insertion_point(destructor:TeamToController)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamToController::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.signature_;
  if (has_msg()) {
    clear_msg();
  }
}

void TeamToController::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamToController::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:TeamToController)
  switch (msg_case()) {
    case kDesiredKeeper: {
      // No need to clear
      break;
    }
    case kAdvantageChoice: {
      // No need to clear
      break;
    }
    case kSubstituteBot: {
      // No need to clear
      break;
    }
    case kPing: {
      // No need to clear
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void TeamToController::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamToController)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.signature_ != nullptr);
    _impl_.signature_->Clear();
  }
  clear_msg();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamToController::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Signature signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 desired_keeper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_desired_keeper(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AdvantageChoice advantage_choice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AdvantageChoice_IsValid(val))) {
            _internal_set_advantage_choice(static_cast<::AdvantageChoice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // bool substitute_bot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_substitute_bot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ping = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_ping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamToController::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamToController)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  switch (msg_case()) {
    case kDesiredKeeper: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_desired_keeper(), target);
      break;
    }
    case kAdvantageChoice: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_advantage_choice(), target);
      break;
    }
    case kSubstituteBot: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_substitute_bot(), target);
      break;
    }
    case kPing: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_ping(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamToController)
  return target;
}

size_t TeamToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamToController)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Signature signature = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.signature_);
  }

  switch (msg_case()) {
    // int32 desired_keeper = 2;
    case kDesiredKeeper: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_desired_keeper());
      break;
    }
    // .AdvantageChoice advantage_choice = 3;
    case kAdvantageChoice: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_advantage_choice());
      break;
    }
    // bool substitute_bot = 4;
    case kSubstituteBot: {
      total_size += 1 + 1;
      break;
    }
    // bool ping = 5;
    case kPing: {
      total_size += 1 + 1;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamToController::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamToController::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamToController::GetClassData() const { return &_class_data_; }


void TeamToController::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamToController*>(&to_msg);
  auto& from = static_cast<const TeamToController&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TeamToController)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signature()) {
    _this->_internal_mutable_signature()->::Signature::MergeFrom(
        from._internal_signature());
  }
  switch (from.msg_case()) {
    case kDesiredKeeper: {
      _this->_internal_set_desired_keeper(from._internal_desired_keeper());
      break;
    }
    case kAdvantageChoice: {
      _this->_internal_set_advantage_choice(from._internal_advantage_choice());
      break;
    }
    case kSubstituteBot: {
      _this->_internal_set_substitute_bot(from._internal_substitute_bot());
      break;
    }
    case kPing: {
      _this->_internal_set_ping(from._internal_ping());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamToController::CopyFrom(const TeamToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamToController::IsInitialized() const {
  if (_internal_has_signature()) {
    if (!_impl_.signature_->IsInitialized()) return false;
  }
  return true;
}

void TeamToController::InternalSwap(TeamToController* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.signature_, other->_impl_.signature_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamToController::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto_getter, &descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto_once,
      file_level_metadata_rcon_2fssl_5fgc_5frcon_5fteam_2eproto[1]);
}

// ===================================================================

class ControllerToTeam::_Internal {
 public:
  static const ::ControllerReply& controller_reply(const ControllerToTeam* msg);
};

const ::ControllerReply&
ControllerToTeam::_Internal::controller_reply(const ControllerToTeam* msg) {
  return *msg->_impl_.msg_.controller_reply_;
}
void ControllerToTeam::set_allocated_controller_reply(::ControllerReply* controller_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (controller_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_reply));
    if (message_arena != submessage_arena) {
      controller_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_reply, submessage_arena);
    }
    set_has_controller_reply();
    _impl_.msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ControllerToTeam.controller_reply)
}
void ControllerToTeam::clear_controller_reply() {
  if (_internal_has_controller_reply()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.controller_reply_;
    }
    clear_has_msg();
  }
}
ControllerToTeam::ControllerToTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ControllerToTeam)
}
ControllerToTeam::ControllerToTeam(const ControllerToTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControllerToTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kControllerReply: {
      _this->_internal_mutable_controller_reply()->::ControllerReply::MergeFrom(
          from._internal_controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ControllerToTeam)
}

inline void ControllerToTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

ControllerToTeam::~ControllerToTeam() {
  // @@protoc_insertion_point(destructor:ControllerToTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControllerToTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ControllerToTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControllerToTeam::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ControllerToTeam)
  switch (msg_case()) {
    case kControllerReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.controller_reply_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void ControllerToTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerToTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerToTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControllerReply controller_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControllerToTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerToTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControllerReply controller_reply = 1;
  if (_internal_has_controller_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controller_reply(this),
        _Internal::controller_reply(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerToTeam)
  return target;
}

size_t ControllerToTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerToTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .ControllerReply controller_reply = 1;
    case kControllerReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.controller_reply_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerToTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControllerToTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerToTeam::GetClassData() const { return &_class_data_; }


void ControllerToTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControllerToTeam*>(&to_msg);
  auto& from = static_cast<const ControllerToTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ControllerToTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kControllerReply: {
      _this->_internal_mutable_controller_reply()->::ControllerReply::MergeFrom(
          from._internal_controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerToTeam::CopyFrom(const ControllerToTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToTeam::IsInitialized() const {
  return true;
}

void ControllerToTeam::InternalSwap(ControllerToTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerToTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto_getter, &descriptor_table_rcon_2fssl_5fgc_5frcon_5fteam_2eproto_once,
      file_level_metadata_rcon_2fssl_5fgc_5frcon_5fteam_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TeamRegistration*
Arena::CreateMaybeMessage< ::TeamRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeamRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::TeamToController*
Arena::CreateMaybeMessage< ::TeamToController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeamToController >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerToTeam*
Arena::CreateMaybeMessage< ::ControllerToTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerToTeam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
