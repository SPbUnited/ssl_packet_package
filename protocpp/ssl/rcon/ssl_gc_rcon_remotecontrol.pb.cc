// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcon/ssl_gc_rcon_remotecontrol.proto

#include "rcon/ssl_gc_rcon_remotecontrol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR RemoteControlRegistration::RemoteControlRegistration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_.team_)*/0} {}
struct RemoteControlRegistrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteControlRegistrationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteControlRegistrationDefaultTypeInternal() {}
  union {
    RemoteControlRegistration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteControlRegistrationDefaultTypeInternal _RemoteControlRegistration_default_instance_;
PROTOBUF_CONSTEXPR RemoteControlToController::RemoteControlToController(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RemoteControlToControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteControlToControllerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteControlToControllerDefaultTypeInternal() {}
  union {
    RemoteControlToController _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteControlToControllerDefaultTypeInternal _RemoteControlToController_default_instance_;
PROTOBUF_CONSTEXPR ControllerToRemoteControl::ControllerToRemoteControl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.controller_reply_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr} {}
struct ControllerToRemoteControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerToRemoteControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerToRemoteControlDefaultTypeInternal() {}
  union {
    ControllerToRemoteControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerToRemoteControlDefaultTypeInternal _ControllerToRemoteControl_default_instance_;
PROTOBUF_CONSTEXPR RemoteControlTeamState::RemoteControlTeamState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.available_requests_)*/{}
  , /*decltype(_impl_.active_requests_)*/{}
  , /*decltype(_impl_.yellow_cards_due_)*/{}
  , /*decltype(_impl_.keeper_id_)*/0
  , /*decltype(_impl_.emergency_stop_in_)*/0
  , /*decltype(_impl_.timeouts_left_)*/0
  , /*decltype(_impl_.challenge_flags_left_)*/0
  , /*decltype(_impl_.max_robots_)*/0
  , /*decltype(_impl_.robots_on_field_)*/0
  , /*decltype(_impl_.timeout_time_left_)*/0
  , /*decltype(_impl_.can_substitute_robot_)*/false
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.bot_substitutions_left_)*/0u
  , /*decltype(_impl_.bot_substitution_time_left_)*/0} {}
struct RemoteControlTeamStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteControlTeamStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteControlTeamStateDefaultTypeInternal() {}
  union {
    RemoteControlTeamState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteControlTeamStateDefaultTypeInternal _RemoteControlTeamState_default_instance_;
static ::_pb::Metadata file_level_metadata_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto = nullptr;

const uint32_t TableStruct_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RemoteControlRegistration, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemoteControlRegistration, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlRegistration, _impl_.signature_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::RemoteControlToController, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlToController, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::RemoteControlToController, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemoteControlToController, _impl_.signature_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::RemoteControlToController, _impl_.msg_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ControllerToRemoteControl, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ControllerToRemoteControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControllerToRemoteControl, _impl_.controller_reply_),
  PROTOBUF_FIELD_OFFSET(::ControllerToRemoteControl, _impl_.state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.available_requests_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.active_requests_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.keeper_id_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.emergency_stop_in_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.timeouts_left_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.timeout_time_left_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.challenge_flags_left_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.max_robots_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.robots_on_field_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.yellow_cards_due_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.can_substitute_robot_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.bot_substitutions_left_),
  PROTOBUF_FIELD_OFFSET(::RemoteControlTeamState, _impl_.bot_substitution_time_left_),
  8,
  ~0u,
  ~0u,
  0,
  1,
  2,
  6,
  3,
  4,
  5,
  ~0u,
  7,
  9,
  10,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::RemoteControlRegistration)},
  { 10, 23, -1, sizeof(::RemoteControlToController)},
  { 29, 37, -1, sizeof(::ControllerToRemoteControl)},
  { 39, 59, -1, sizeof(::RemoteControlTeamState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_RemoteControlRegistration_default_instance_._instance,
  &::_RemoteControlToController_default_instance_._instance,
  &::_ControllerToRemoteControl_default_instance_._instance,
  &::_RemoteControlTeamState_default_instance_._instance,
};

const char descriptor_table_protodef_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$rcon/ssl_gc_rcon_remotecontrol.proto\032\031"
  "state/ssl_gc_common.proto\032\026rcon/ssl_gc_r"
  "con.proto\"O\n\031RemoteControlRegistration\022\023"
  "\n\004team\030\001 \002(\0162\005.Team\022\035\n\tsignature\030\002 \001(\0132\n"
  ".Signature\"\325\002\n\031RemoteControlToController"
  "\022\035\n\tsignature\030\001 \001(\0132\n.Signature\0225\n\007reque"
  "st\030\002 \001(\0162\".RemoteControlToController.Req"
  "uestH\000\022\030\n\016desired_keeper\030\003 \001(\005H\000\022$\n\032requ"
  "est_robot_substitution\030\004 \001(\010H\000\022\031\n\017reques"
  "t_timeout\030\005 \001(\010H\000\022 \n\026request_emergency_s"
  "top\030\006 \001(\010H\000\"^\n\007Request\022\013\n\007UNKNOWN\020\000\022\010\n\004P"
  "ING\020\001\022\022\n\016CHALLENGE_FLAG\020\002\022\020\n\014STOP_TIMEOU"
  "T\020\003\022\026\n\022FAIL_BALLPLACEMENT\020\004B\005\n\003msg\"o\n\031Co"
  "ntrollerToRemoteControl\022*\n\020controller_re"
  "ply\030\001 \001(\0132\020.ControllerReply\022&\n\005state\030\002 \001"
  "(\0132\027.RemoteControlTeamState\"\277\003\n\026RemoteCo"
  "ntrolTeamState\022\023\n\004team\030\014 \001(\0162\005.Team\0225\n\022a"
  "vailable_requests\030\001 \003(\0162\031.RemoteControlR"
  "equestType\0222\n\017active_requests\030\002 \003(\0162\031.Re"
  "moteControlRequestType\022\021\n\tkeeper_id\030\003 \001("
  "\005\022\031\n\021emergency_stop_in\030\004 \001(\002\022\025\n\rtimeouts"
  "_left\030\005 \001(\005\022\031\n\021timeout_time_left\030\n \001(\002\022\034"
  "\n\024challenge_flags_left\030\006 \001(\005\022\022\n\nmax_robo"
  "ts\030\007 \001(\005\022\027\n\017robots_on_field\030\t \001(\005\022\030\n\020yel"
  "low_cards_due\030\010 \003(\002\022\034\n\024can_substitute_ro"
  "bot\030\013 \001(\010\022\036\n\026bot_substitutions_left\030\r \001("
  "\r\022\"\n\032bot_substitution_time_left\030\016 \001(\002*\301\001"
  "\n\030RemoteControlRequestType\022\030\n\024UNKNOWN_RE"
  "QUEST_TYPE\020\000\022\022\n\016EMERGENCY_STOP\020\001\022\026\n\022ROBO"
  "T_SUBSTITUTION\020\002\022\013\n\007TIMEOUT\020\003\022\022\n\016CHALLEN"
  "GE_FLAG\020\004\022\024\n\020CHANGE_KEEPER_ID\020\005\022\020\n\014STOP_"
  "TIMEOUT\020\006\022\026\n\022FAIL_BALLPLACEMENT\020\007"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_deps[2] = {
  &::descriptor_table_rcon_2fssl_5fgc_5frcon_2eproto,
  &::descriptor_table_state_2fssl_5fgc_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto = {
    false, false, 1273, descriptor_table_protodef_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto,
    "rcon/ssl_gc_rcon_remotecontrol.proto",
    &descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_once, descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto::offsets,
    file_level_metadata_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto, file_level_enum_descriptors_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto,
    file_level_service_descriptors_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_getter() {
  return &descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto(&descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemoteControlToController_Request_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto);
  return file_level_enum_descriptors_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto[0];
}
bool RemoteControlToController_Request_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RemoteControlToController_Request RemoteControlToController::UNKNOWN;
constexpr RemoteControlToController_Request RemoteControlToController::PING;
constexpr RemoteControlToController_Request RemoteControlToController::CHALLENGE_FLAG;
constexpr RemoteControlToController_Request RemoteControlToController::STOP_TIMEOUT;
constexpr RemoteControlToController_Request RemoteControlToController::FAIL_BALLPLACEMENT;
constexpr RemoteControlToController_Request RemoteControlToController::Request_MIN;
constexpr RemoteControlToController_Request RemoteControlToController::Request_MAX;
constexpr int RemoteControlToController::Request_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemoteControlRequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto);
  return file_level_enum_descriptors_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto[1];
}
bool RemoteControlRequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RemoteControlRegistration::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteControlRegistration>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Signature& signature(const RemoteControlRegistration* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Signature&
RemoteControlRegistration::_Internal::signature(const RemoteControlRegistration* msg) {
  return *msg->_impl_.signature_;
}
void RemoteControlRegistration::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RemoteControlRegistration::RemoteControlRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemoteControlRegistration)
}
RemoteControlRegistration::RemoteControlRegistration(const RemoteControlRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteControlRegistration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::Signature(*from._impl_.signature_);
  }
  _this->_impl_.team_ = from._impl_.team_;
  // @@protoc_insertion_point(copy_constructor:RemoteControlRegistration)
}

inline void RemoteControlRegistration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.team_){0}
  };
}

RemoteControlRegistration::~RemoteControlRegistration() {
  // @@protoc_insertion_point(destructor:RemoteControlRegistration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteControlRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.signature_;
}

void RemoteControlRegistration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteControlRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteControlRegistration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.signature_ != nullptr);
    _impl_.signature_->Clear();
  }
  _impl_.team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteControlRegistration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteControlRegistration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteControlRegistration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_team(), target);
  }

  // optional .Signature signature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteControlRegistration)
  return target;
}

size_t RemoteControlRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteControlRegistration)
  size_t total_size = 0;

  // required .Team team = 1;
  if (_internal_has_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Signature signature = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.signature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteControlRegistration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteControlRegistration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteControlRegistration::GetClassData() const { return &_class_data_; }


void RemoteControlRegistration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteControlRegistration*>(&to_msg);
  auto& from = static_cast<const RemoteControlRegistration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemoteControlRegistration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_signature()->::Signature::MergeFrom(
          from._internal_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteControlRegistration::CopyFrom(const RemoteControlRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteControlRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlRegistration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_signature()) {
    if (!_impl_.signature_->IsInitialized()) return false;
  }
  return true;
}

void RemoteControlRegistration::InternalSwap(RemoteControlRegistration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteControlRegistration, _impl_.team_)
      + sizeof(RemoteControlRegistration::_impl_.team_)
      - PROTOBUF_FIELD_OFFSET(RemoteControlRegistration, _impl_.signature_)>(
          reinterpret_cast<char*>(&_impl_.signature_),
          reinterpret_cast<char*>(&other->_impl_.signature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteControlRegistration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_getter, &descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_once,
      file_level_metadata_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto[0]);
}

// ===================================================================

class RemoteControlToController::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteControlToController>()._impl_._has_bits_);
  static const ::Signature& signature(const RemoteControlToController* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Signature&
RemoteControlToController::_Internal::signature(const RemoteControlToController* msg) {
  return *msg->_impl_.signature_;
}
void RemoteControlToController::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RemoteControlToController::RemoteControlToController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemoteControlToController)
}
RemoteControlToController::RemoteControlToController(const RemoteControlToController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteControlToController* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.msg_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::Signature(*from._impl_.signature_);
  }
  clear_has_msg();
  switch (from.msg_case()) {
    case kRequest: {
      _this->_internal_set_request(from._internal_request());
      break;
    }
    case kDesiredKeeper: {
      _this->_internal_set_desired_keeper(from._internal_desired_keeper());
      break;
    }
    case kRequestRobotSubstitution: {
      _this->_internal_set_request_robot_substitution(from._internal_request_robot_substitution());
      break;
    }
    case kRequestTimeout: {
      _this->_internal_set_request_timeout(from._internal_request_timeout());
      break;
    }
    case kRequestEmergencyStop: {
      _this->_internal_set_request_emergency_stop(from._internal_request_emergency_stop());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RemoteControlToController)
}

inline void RemoteControlToController::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.msg_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

RemoteControlToController::~RemoteControlToController() {
  // @@protoc_insertion_point(destructor:RemoteControlToController)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteControlToController::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.signature_;
  if (has_msg()) {
    clear_msg();
  }
}

void RemoteControlToController::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteControlToController::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:RemoteControlToController)
  switch (msg_case()) {
    case kRequest: {
      // No need to clear
      break;
    }
    case kDesiredKeeper: {
      // No need to clear
      break;
    }
    case kRequestRobotSubstitution: {
      // No need to clear
      break;
    }
    case kRequestTimeout: {
      // No need to clear
      break;
    }
    case kRequestEmergencyStop: {
      // No need to clear
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void RemoteControlToController::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteControlToController)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.signature_ != nullptr);
    _impl_.signature_->Clear();
  }
  clear_msg();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteControlToController::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Signature signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .RemoteControlToController.Request request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::RemoteControlToController_Request_IsValid(val))) {
            _internal_set_request(static_cast<::RemoteControlToController_Request>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // int32 desired_keeper = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_desired_keeper(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool request_robot_substitution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_request_robot_substitution(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool request_timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_request_timeout(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool request_emergency_stop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_request_emergency_stop(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteControlToController::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteControlToController)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  switch (msg_case()) {
    case kRequest: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_request(), target);
      break;
    }
    case kDesiredKeeper: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_desired_keeper(), target);
      break;
    }
    case kRequestRobotSubstitution: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_request_robot_substitution(), target);
      break;
    }
    case kRequestTimeout: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_request_timeout(), target);
      break;
    }
    case kRequestEmergencyStop: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_request_emergency_stop(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteControlToController)
  return target;
}

size_t RemoteControlToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteControlToController)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Signature signature = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.signature_);
  }

  switch (msg_case()) {
    // .RemoteControlToController.Request request = 2;
    case kRequest: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_request());
      break;
    }
    // int32 desired_keeper = 3;
    case kDesiredKeeper: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_desired_keeper());
      break;
    }
    // bool request_robot_substitution = 4;
    case kRequestRobotSubstitution: {
      total_size += 1 + 1;
      break;
    }
    // bool request_timeout = 5;
    case kRequestTimeout: {
      total_size += 1 + 1;
      break;
    }
    // bool request_emergency_stop = 6;
    case kRequestEmergencyStop: {
      total_size += 1 + 1;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteControlToController::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteControlToController::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteControlToController::GetClassData() const { return &_class_data_; }


void RemoteControlToController::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteControlToController*>(&to_msg);
  auto& from = static_cast<const RemoteControlToController&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemoteControlToController)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signature()) {
    _this->_internal_mutable_signature()->::Signature::MergeFrom(
        from._internal_signature());
  }
  switch (from.msg_case()) {
    case kRequest: {
      _this->_internal_set_request(from._internal_request());
      break;
    }
    case kDesiredKeeper: {
      _this->_internal_set_desired_keeper(from._internal_desired_keeper());
      break;
    }
    case kRequestRobotSubstitution: {
      _this->_internal_set_request_robot_substitution(from._internal_request_robot_substitution());
      break;
    }
    case kRequestTimeout: {
      _this->_internal_set_request_timeout(from._internal_request_timeout());
      break;
    }
    case kRequestEmergencyStop: {
      _this->_internal_set_request_emergency_stop(from._internal_request_emergency_stop());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteControlToController::CopyFrom(const RemoteControlToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteControlToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlToController::IsInitialized() const {
  if (_internal_has_signature()) {
    if (!_impl_.signature_->IsInitialized()) return false;
  }
  return true;
}

void RemoteControlToController::InternalSwap(RemoteControlToController* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.signature_, other->_impl_.signature_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteControlToController::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_getter, &descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_once,
      file_level_metadata_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto[1]);
}

// ===================================================================

class ControllerToRemoteControl::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerToRemoteControl>()._impl_._has_bits_);
  static const ::ControllerReply& controller_reply(const ControllerToRemoteControl* msg);
  static void set_has_controller_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::RemoteControlTeamState& state(const ControllerToRemoteControl* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ControllerReply&
ControllerToRemoteControl::_Internal::controller_reply(const ControllerToRemoteControl* msg) {
  return *msg->_impl_.controller_reply_;
}
const ::RemoteControlTeamState&
ControllerToRemoteControl::_Internal::state(const ControllerToRemoteControl* msg) {
  return *msg->_impl_.state_;
}
void ControllerToRemoteControl::clear_controller_reply() {
  if (_impl_.controller_reply_ != nullptr) _impl_.controller_reply_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ControllerToRemoteControl::ControllerToRemoteControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ControllerToRemoteControl)
}
ControllerToRemoteControl::ControllerToRemoteControl(const ControllerToRemoteControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControllerToRemoteControl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.controller_reply_){nullptr}
    , decltype(_impl_.state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controller_reply()) {
    _this->_impl_.controller_reply_ = new ::ControllerReply(*from._impl_.controller_reply_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::RemoteControlTeamState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:ControllerToRemoteControl)
}

inline void ControllerToRemoteControl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.controller_reply_){nullptr}
    , decltype(_impl_.state_){nullptr}
  };
}

ControllerToRemoteControl::~ControllerToRemoteControl() {
  // @@protoc_insertion_point(destructor:ControllerToRemoteControl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControllerToRemoteControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.controller_reply_;
  if (this != internal_default_instance()) delete _impl_.state_;
}

void ControllerToRemoteControl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControllerToRemoteControl::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerToRemoteControl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.controller_reply_ != nullptr);
      _impl_.controller_reply_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerToRemoteControl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ControllerReply controller_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RemoteControlTeamState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControllerToRemoteControl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerToRemoteControl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ControllerReply controller_reply = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controller_reply(this),
        _Internal::controller_reply(this).GetCachedSize(), target, stream);
  }

  // optional .RemoteControlTeamState state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerToRemoteControl)
  return target;
}

size_t ControllerToRemoteControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerToRemoteControl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ControllerReply controller_reply = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.controller_reply_);
    }

    // optional .RemoteControlTeamState state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerToRemoteControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControllerToRemoteControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerToRemoteControl::GetClassData() const { return &_class_data_; }


void ControllerToRemoteControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControllerToRemoteControl*>(&to_msg);
  auto& from = static_cast<const ControllerToRemoteControl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ControllerToRemoteControl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_controller_reply()->::ControllerReply::MergeFrom(
          from._internal_controller_reply());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_state()->::RemoteControlTeamState::MergeFrom(
          from._internal_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerToRemoteControl::CopyFrom(const ControllerToRemoteControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerToRemoteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToRemoteControl::IsInitialized() const {
  return true;
}

void ControllerToRemoteControl::InternalSwap(ControllerToRemoteControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerToRemoteControl, _impl_.state_)
      + sizeof(ControllerToRemoteControl::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(ControllerToRemoteControl, _impl_.controller_reply_)>(
          reinterpret_cast<char*>(&_impl_.controller_reply_),
          reinterpret_cast<char*>(&other->_impl_.controller_reply_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerToRemoteControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_getter, &descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_once,
      file_level_metadata_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto[2]);
}

// ===================================================================

class RemoteControlTeamState::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteControlTeamState>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_keeper_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_emergency_stop_in(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timeouts_left(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timeout_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_challenge_flags_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_robots(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_robots_on_field(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_substitute_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bot_substitutions_left(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bot_substitution_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

RemoteControlTeamState::RemoteControlTeamState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemoteControlTeamState)
}
RemoteControlTeamState::RemoteControlTeamState(const RemoteControlTeamState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteControlTeamState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.available_requests_){from._impl_.available_requests_}
    , decltype(_impl_.active_requests_){from._impl_.active_requests_}
    , decltype(_impl_.yellow_cards_due_){from._impl_.yellow_cards_due_}
    , decltype(_impl_.keeper_id_){}
    , decltype(_impl_.emergency_stop_in_){}
    , decltype(_impl_.timeouts_left_){}
    , decltype(_impl_.challenge_flags_left_){}
    , decltype(_impl_.max_robots_){}
    , decltype(_impl_.robots_on_field_){}
    , decltype(_impl_.timeout_time_left_){}
    , decltype(_impl_.can_substitute_robot_){}
    , decltype(_impl_.team_){}
    , decltype(_impl_.bot_substitutions_left_){}
    , decltype(_impl_.bot_substitution_time_left_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.keeper_id_, &from._impl_.keeper_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bot_substitution_time_left_) -
    reinterpret_cast<char*>(&_impl_.keeper_id_)) + sizeof(_impl_.bot_substitution_time_left_));
  // @@protoc_insertion_point(copy_constructor:RemoteControlTeamState)
}

inline void RemoteControlTeamState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.available_requests_){arena}
    , decltype(_impl_.active_requests_){arena}
    , decltype(_impl_.yellow_cards_due_){arena}
    , decltype(_impl_.keeper_id_){0}
    , decltype(_impl_.emergency_stop_in_){0}
    , decltype(_impl_.timeouts_left_){0}
    , decltype(_impl_.challenge_flags_left_){0}
    , decltype(_impl_.max_robots_){0}
    , decltype(_impl_.robots_on_field_){0}
    , decltype(_impl_.timeout_time_left_){0}
    , decltype(_impl_.can_substitute_robot_){false}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.bot_substitutions_left_){0u}
    , decltype(_impl_.bot_substitution_time_left_){0}
  };
}

RemoteControlTeamState::~RemoteControlTeamState() {
  // @@protoc_insertion_point(destructor:RemoteControlTeamState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteControlTeamState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.available_requests_.~RepeatedField();
  _impl_.active_requests_.~RepeatedField();
  _impl_.yellow_cards_due_.~RepeatedField();
}

void RemoteControlTeamState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteControlTeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteControlTeamState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.available_requests_.Clear();
  _impl_.active_requests_.Clear();
  _impl_.yellow_cards_due_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.keeper_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.can_substitute_robot_) -
        reinterpret_cast<char*>(&_impl_.keeper_id_)) + sizeof(_impl_.can_substitute_robot_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bot_substitution_time_left_) -
        reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.bot_substitution_time_left_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteControlTeamState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .RemoteControlRequestType available_requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::RemoteControlRequestType_IsValid(val))) {
              _internal_add_available_requests(static_cast<::RemoteControlRequestType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_available_requests(), ptr, ctx, ::RemoteControlRequestType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .RemoteControlRequestType active_requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::RemoteControlRequestType_IsValid(val))) {
              _internal_add_active_requests(static_cast<::RemoteControlRequestType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_active_requests(), ptr, ctx, ::RemoteControlRequestType_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 keeper_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_keeper_id(&has_bits);
          _impl_.keeper_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float emergency_stop_in = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_emergency_stop_in(&has_bits);
          _impl_.emergency_stop_in_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 timeouts_left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timeouts_left(&has_bits);
          _impl_.timeouts_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 challenge_flags_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_challenge_flags_left(&has_bits);
          _impl_.challenge_flags_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_robots = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_max_robots(&has_bits);
          _impl_.max_robots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float yellow_cards_due = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_yellow_cards_due(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_yellow_cards_due(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 robots_on_field = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_robots_on_field(&has_bits);
          _impl_.robots_on_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float timeout_time_left = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_timeout_time_left(&has_bits);
          _impl_.timeout_time_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_substitute_robot = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_can_substitute_robot(&has_bits);
          _impl_.can_substitute_robot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Team team = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bot_substitutions_left = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_bot_substitutions_left(&has_bits);
          _impl_.bot_substitutions_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float bot_substitution_time_left = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_bot_substitution_time_left(&has_bits);
          _impl_.bot_substitution_time_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteControlTeamState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteControlTeamState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RemoteControlRequestType available_requests = 1;
  for (int i = 0, n = this->_internal_available_requests_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_available_requests(i), target);
  }

  // repeated .RemoteControlRequestType active_requests = 2;
  for (int i = 0, n = this->_internal_active_requests_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_active_requests(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 keeper_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_keeper_id(), target);
  }

  // optional float emergency_stop_in = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_emergency_stop_in(), target);
  }

  // optional int32 timeouts_left = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_timeouts_left(), target);
  }

  // optional int32 challenge_flags_left = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_challenge_flags_left(), target);
  }

  // optional int32 max_robots = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_robots(), target);
  }

  // repeated float yellow_cards_due = 8;
  for (int i = 0, n = this->_internal_yellow_cards_due_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_yellow_cards_due(i), target);
  }

  // optional int32 robots_on_field = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_robots_on_field(), target);
  }

  // optional float timeout_time_left = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_timeout_time_left(), target);
  }

  // optional bool can_substitute_robot = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_can_substitute_robot(), target);
  }

  // optional .Team team = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_team(), target);
  }

  // optional uint32 bot_substitutions_left = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_bot_substitutions_left(), target);
  }

  // optional float bot_substitution_time_left = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_bot_substitution_time_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteControlTeamState)
  return target;
}

size_t RemoteControlTeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteControlTeamState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RemoteControlRequestType available_requests = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_available_requests_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_available_requests(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .RemoteControlRequestType active_requests = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_active_requests_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_active_requests(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated float yellow_cards_due = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_yellow_cards_due_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_yellow_cards_due_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 keeper_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_keeper_id());
    }

    // optional float emergency_stop_in = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 timeouts_left = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeouts_left());
    }

    // optional int32 challenge_flags_left = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_challenge_flags_left());
    }

    // optional int32 max_robots = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_robots());
    }

    // optional int32 robots_on_field = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_robots_on_field());
    }

    // optional float timeout_time_left = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool can_substitute_robot = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .Team team = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional uint32 bot_substitutions_left = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bot_substitutions_left());
    }

    // optional float bot_substitution_time_left = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteControlTeamState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteControlTeamState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteControlTeamState::GetClassData() const { return &_class_data_; }


void RemoteControlTeamState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteControlTeamState*>(&to_msg);
  auto& from = static_cast<const RemoteControlTeamState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemoteControlTeamState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.available_requests_.MergeFrom(from._impl_.available_requests_);
  _this->_impl_.active_requests_.MergeFrom(from._impl_.active_requests_);
  _this->_impl_.yellow_cards_due_.MergeFrom(from._impl_.yellow_cards_due_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.keeper_id_ = from._impl_.keeper_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.emergency_stop_in_ = from._impl_.emergency_stop_in_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timeouts_left_ = from._impl_.timeouts_left_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenge_flags_left_ = from._impl_.challenge_flags_left_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.max_robots_ = from._impl_.max_robots_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.robots_on_field_ = from._impl_.robots_on_field_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timeout_time_left_ = from._impl_.timeout_time_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.can_substitute_robot_ = from._impl_.can_substitute_robot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bot_substitutions_left_ = from._impl_.bot_substitutions_left_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.bot_substitution_time_left_ = from._impl_.bot_substitution_time_left_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteControlTeamState::CopyFrom(const RemoteControlTeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteControlTeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlTeamState::IsInitialized() const {
  return true;
}

void RemoteControlTeamState::InternalSwap(RemoteControlTeamState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.available_requests_.InternalSwap(&other->_impl_.available_requests_);
  _impl_.active_requests_.InternalSwap(&other->_impl_.active_requests_);
  _impl_.yellow_cards_due_.InternalSwap(&other->_impl_.yellow_cards_due_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteControlTeamState, _impl_.bot_substitution_time_left_)
      + sizeof(RemoteControlTeamState::_impl_.bot_substitution_time_left_)
      - PROTOBUF_FIELD_OFFSET(RemoteControlTeamState, _impl_.keeper_id_)>(
          reinterpret_cast<char*>(&_impl_.keeper_id_),
          reinterpret_cast<char*>(&other->_impl_.keeper_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteControlTeamState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_getter, &descriptor_table_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto_once,
      file_level_metadata_rcon_2fssl_5fgc_5frcon_5fremotecontrol_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RemoteControlRegistration*
Arena::CreateMaybeMessage< ::RemoteControlRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteControlRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteControlToController*
Arena::CreateMaybeMessage< ::RemoteControlToController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteControlToController >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerToRemoteControl*
Arena::CreateMaybeMessage< ::ControllerToRemoteControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerToRemoteControl >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteControlTeamState*
Arena::CreateMaybeMessage< ::RemoteControlTeamState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteControlTeamState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
