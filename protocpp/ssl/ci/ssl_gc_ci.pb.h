// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ci/ssl_gc_ci.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ci_2fssl_5fgc_5fci_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ci_2fssl_5fgc_5fci_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tracker/ssl_vision_wrapper_tracked.pb.h"
#include "api/ssl_gc_api.pb.h"
#include "state/ssl_gc_referee_message.pb.h"
#include "vision/ssl_vision_geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ci_2fssl_5fgc_5fci_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ci_2fssl_5fgc_5fci_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ci_2fssl_5fgc_5fci_2eproto;
class CiInput;
struct CiInputDefaultTypeInternal;
extern CiInputDefaultTypeInternal _CiInput_default_instance_;
class CiOutput;
struct CiOutputDefaultTypeInternal;
extern CiOutputDefaultTypeInternal _CiOutput_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CiInput* Arena::CreateMaybeMessage<::CiInput>(Arena*);
template<> ::CiOutput* Arena::CreateMaybeMessage<::CiOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CiInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CiInput) */ {
 public:
  inline CiInput() : CiInput(nullptr) {}
  ~CiInput() override;
  explicit PROTOBUF_CONSTEXPR CiInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CiInput(const CiInput& from);
  CiInput(CiInput&& from) noexcept
    : CiInput() {
    *this = ::std::move(from);
  }

  inline CiInput& operator=(const CiInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CiInput& operator=(CiInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CiInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const CiInput* internal_default_instance() {
    return reinterpret_cast<const CiInput*>(
               &_CiInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CiInput& a, CiInput& b) {
    a.Swap(&b);
  }
  inline void Swap(CiInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CiInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CiInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CiInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CiInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CiInput& from) {
    CiInput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CiInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CiInput";
  }
  protected:
  explicit CiInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiInputsFieldNumber = 3,
    kTrackerPacketFieldNumber = 2,
    kGeometryFieldNumber = 4,
    kTimestampFieldNumber = 1,
  };
  // repeated .Input api_inputs = 3;
  int api_inputs_size() const;
  private:
  int _internal_api_inputs_size() const;
  public:
  void clear_api_inputs();
  ::Input* mutable_api_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Input >*
      mutable_api_inputs();
  private:
  const ::Input& _internal_api_inputs(int index) const;
  ::Input* _internal_add_api_inputs();
  public:
  const ::Input& api_inputs(int index) const;
  ::Input* add_api_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Input >&
      api_inputs() const;

  // optional .TrackerWrapperPacket tracker_packet = 2;
  bool has_tracker_packet() const;
  private:
  bool _internal_has_tracker_packet() const;
  public:
  void clear_tracker_packet();
  const ::TrackerWrapperPacket& tracker_packet() const;
  PROTOBUF_NODISCARD ::TrackerWrapperPacket* release_tracker_packet();
  ::TrackerWrapperPacket* mutable_tracker_packet();
  void set_allocated_tracker_packet(::TrackerWrapperPacket* tracker_packet);
  private:
  const ::TrackerWrapperPacket& _internal_tracker_packet() const;
  ::TrackerWrapperPacket* _internal_mutable_tracker_packet();
  public:
  void unsafe_arena_set_allocated_tracker_packet(
      ::TrackerWrapperPacket* tracker_packet);
  ::TrackerWrapperPacket* unsafe_arena_release_tracker_packet();

  // optional .SSL_GeometryData geometry = 4;
  bool has_geometry() const;
  private:
  bool _internal_has_geometry() const;
  public:
  void clear_geometry();
  const ::SSL_GeometryData& geometry() const;
  PROTOBUF_NODISCARD ::SSL_GeometryData* release_geometry();
  ::SSL_GeometryData* mutable_geometry();
  void set_allocated_geometry(::SSL_GeometryData* geometry);
  private:
  const ::SSL_GeometryData& _internal_geometry() const;
  ::SSL_GeometryData* _internal_mutable_geometry();
  public:
  void unsafe_arena_set_allocated_geometry(
      ::SSL_GeometryData* geometry);
  ::SSL_GeometryData* unsafe_arena_release_geometry();

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CiInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Input > api_inputs_;
    ::TrackerWrapperPacket* tracker_packet_;
    ::SSL_GeometryData* geometry_;
    int64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ci_2fssl_5fgc_5fci_2eproto;
};
// -------------------------------------------------------------------

class CiOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CiOutput) */ {
 public:
  inline CiOutput() : CiOutput(nullptr) {}
  ~CiOutput() override;
  explicit PROTOBUF_CONSTEXPR CiOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CiOutput(const CiOutput& from);
  CiOutput(CiOutput&& from) noexcept
    : CiOutput() {
    *this = ::std::move(from);
  }

  inline CiOutput& operator=(const CiOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CiOutput& operator=(CiOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CiOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const CiOutput* internal_default_instance() {
    return reinterpret_cast<const CiOutput*>(
               &_CiOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CiOutput& a, CiOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(CiOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CiOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CiOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CiOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CiOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CiOutput& from) {
    CiOutput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CiOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CiOutput";
  }
  protected:
  explicit CiOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefereeMsgFieldNumber = 1,
  };
  // optional .Referee referee_msg = 1;
  bool has_referee_msg() const;
  private:
  bool _internal_has_referee_msg() const;
  public:
  void clear_referee_msg();
  const ::Referee& referee_msg() const;
  PROTOBUF_NODISCARD ::Referee* release_referee_msg();
  ::Referee* mutable_referee_msg();
  void set_allocated_referee_msg(::Referee* referee_msg);
  private:
  const ::Referee& _internal_referee_msg() const;
  ::Referee* _internal_mutable_referee_msg();
  public:
  void unsafe_arena_set_allocated_referee_msg(
      ::Referee* referee_msg);
  ::Referee* unsafe_arena_release_referee_msg();

  // @@protoc_insertion_point(class_scope:CiOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Referee* referee_msg_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ci_2fssl_5fgc_5fci_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CiInput

// optional int64 timestamp = 1;
inline bool CiInput::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CiInput::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CiInput::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t CiInput::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t CiInput::timestamp() const {
  // @@protoc_insertion_point(field_get:CiInput.timestamp)
  return _internal_timestamp();
}
inline void CiInput::_internal_set_timestamp(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timestamp_ = value;
}
inline void CiInput::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CiInput.timestamp)
}

// optional .TrackerWrapperPacket tracker_packet = 2;
inline bool CiInput::_internal_has_tracker_packet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tracker_packet_ != nullptr);
  return value;
}
inline bool CiInput::has_tracker_packet() const {
  return _internal_has_tracker_packet();
}
inline const ::TrackerWrapperPacket& CiInput::_internal_tracker_packet() const {
  const ::TrackerWrapperPacket* p = _impl_.tracker_packet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TrackerWrapperPacket&>(
      ::_TrackerWrapperPacket_default_instance_);
}
inline const ::TrackerWrapperPacket& CiInput::tracker_packet() const {
  // @@protoc_insertion_point(field_get:CiInput.tracker_packet)
  return _internal_tracker_packet();
}
inline void CiInput::unsafe_arena_set_allocated_tracker_packet(
    ::TrackerWrapperPacket* tracker_packet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracker_packet_);
  }
  _impl_.tracker_packet_ = tracker_packet;
  if (tracker_packet) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CiInput.tracker_packet)
}
inline ::TrackerWrapperPacket* CiInput::release_tracker_packet() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TrackerWrapperPacket* temp = _impl_.tracker_packet_;
  _impl_.tracker_packet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TrackerWrapperPacket* CiInput::unsafe_arena_release_tracker_packet() {
  // @@protoc_insertion_point(field_release:CiInput.tracker_packet)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TrackerWrapperPacket* temp = _impl_.tracker_packet_;
  _impl_.tracker_packet_ = nullptr;
  return temp;
}
inline ::TrackerWrapperPacket* CiInput::_internal_mutable_tracker_packet() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tracker_packet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TrackerWrapperPacket>(GetArenaForAllocation());
    _impl_.tracker_packet_ = p;
  }
  return _impl_.tracker_packet_;
}
inline ::TrackerWrapperPacket* CiInput::mutable_tracker_packet() {
  ::TrackerWrapperPacket* _msg = _internal_mutable_tracker_packet();
  // @@protoc_insertion_point(field_mutable:CiInput.tracker_packet)
  return _msg;
}
inline void CiInput::set_allocated_tracker_packet(::TrackerWrapperPacket* tracker_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracker_packet_);
  }
  if (tracker_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracker_packet));
    if (message_arena != submessage_arena) {
      tracker_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracker_packet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tracker_packet_ = tracker_packet;
  // @@protoc_insertion_point(field_set_allocated:CiInput.tracker_packet)
}

// repeated .Input api_inputs = 3;
inline int CiInput::_internal_api_inputs_size() const {
  return _impl_.api_inputs_.size();
}
inline int CiInput::api_inputs_size() const {
  return _internal_api_inputs_size();
}
inline ::Input* CiInput::mutable_api_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:CiInput.api_inputs)
  return _impl_.api_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Input >*
CiInput::mutable_api_inputs() {
  // @@protoc_insertion_point(field_mutable_list:CiInput.api_inputs)
  return &_impl_.api_inputs_;
}
inline const ::Input& CiInput::_internal_api_inputs(int index) const {
  return _impl_.api_inputs_.Get(index);
}
inline const ::Input& CiInput::api_inputs(int index) const {
  // @@protoc_insertion_point(field_get:CiInput.api_inputs)
  return _internal_api_inputs(index);
}
inline ::Input* CiInput::_internal_add_api_inputs() {
  return _impl_.api_inputs_.Add();
}
inline ::Input* CiInput::add_api_inputs() {
  ::Input* _add = _internal_add_api_inputs();
  // @@protoc_insertion_point(field_add:CiInput.api_inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Input >&
CiInput::api_inputs() const {
  // @@protoc_insertion_point(field_list:CiInput.api_inputs)
  return _impl_.api_inputs_;
}

// optional .SSL_GeometryData geometry = 4;
inline bool CiInput::_internal_has_geometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.geometry_ != nullptr);
  return value;
}
inline bool CiInput::has_geometry() const {
  return _internal_has_geometry();
}
inline const ::SSL_GeometryData& CiInput::_internal_geometry() const {
  const ::SSL_GeometryData* p = _impl_.geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSL_GeometryData&>(
      ::_SSL_GeometryData_default_instance_);
}
inline const ::SSL_GeometryData& CiInput::geometry() const {
  // @@protoc_insertion_point(field_get:CiInput.geometry)
  return _internal_geometry();
}
inline void CiInput::unsafe_arena_set_allocated_geometry(
    ::SSL_GeometryData* geometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geometry_);
  }
  _impl_.geometry_ = geometry;
  if (geometry) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CiInput.geometry)
}
inline ::SSL_GeometryData* CiInput::release_geometry() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SSL_GeometryData* temp = _impl_.geometry_;
  _impl_.geometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SSL_GeometryData* CiInput::unsafe_arena_release_geometry() {
  // @@protoc_insertion_point(field_release:CiInput.geometry)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SSL_GeometryData* temp = _impl_.geometry_;
  _impl_.geometry_ = nullptr;
  return temp;
}
inline ::SSL_GeometryData* CiInput::_internal_mutable_geometry() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_GeometryData>(GetArenaForAllocation());
    _impl_.geometry_ = p;
  }
  return _impl_.geometry_;
}
inline ::SSL_GeometryData* CiInput::mutable_geometry() {
  ::SSL_GeometryData* _msg = _internal_mutable_geometry();
  // @@protoc_insertion_point(field_mutable:CiInput.geometry)
  return _msg;
}
inline void CiInput::set_allocated_geometry(::SSL_GeometryData* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geometry_);
  }
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry));
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:CiInput.geometry)
}

// -------------------------------------------------------------------

// CiOutput

// optional .Referee referee_msg = 1;
inline bool CiOutput::_internal_has_referee_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.referee_msg_ != nullptr);
  return value;
}
inline bool CiOutput::has_referee_msg() const {
  return _internal_has_referee_msg();
}
inline const ::Referee& CiOutput::_internal_referee_msg() const {
  const ::Referee* p = _impl_.referee_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::Referee&>(
      ::_Referee_default_instance_);
}
inline const ::Referee& CiOutput::referee_msg() const {
  // @@protoc_insertion_point(field_get:CiOutput.referee_msg)
  return _internal_referee_msg();
}
inline void CiOutput::unsafe_arena_set_allocated_referee_msg(
    ::Referee* referee_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.referee_msg_);
  }
  _impl_.referee_msg_ = referee_msg;
  if (referee_msg) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CiOutput.referee_msg)
}
inline ::Referee* CiOutput::release_referee_msg() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Referee* temp = _impl_.referee_msg_;
  _impl_.referee_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Referee* CiOutput::unsafe_arena_release_referee_msg() {
  // @@protoc_insertion_point(field_release:CiOutput.referee_msg)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Referee* temp = _impl_.referee_msg_;
  _impl_.referee_msg_ = nullptr;
  return temp;
}
inline ::Referee* CiOutput::_internal_mutable_referee_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.referee_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::Referee>(GetArenaForAllocation());
    _impl_.referee_msg_ = p;
  }
  return _impl_.referee_msg_;
}
inline ::Referee* CiOutput::mutable_referee_msg() {
  ::Referee* _msg = _internal_mutable_referee_msg();
  // @@protoc_insertion_point(field_mutable:CiOutput.referee_msg)
  return _msg;
}
inline void CiOutput::set_allocated_referee_msg(::Referee* referee_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.referee_msg_);
  }
  if (referee_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referee_msg));
    if (message_arena != submessage_arena) {
      referee_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referee_msg, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.referee_msg_ = referee_msg;
  // @@protoc_insertion_point(field_set_allocated:CiOutput.referee_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ci_2fssl_5fgc_5fci_2eproto
