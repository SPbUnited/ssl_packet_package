// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ci/autoref/ssl_autoref_ci.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ci_2fautoref_2fssl_5fautoref_5fci_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ci_2fautoref_2fssl_5fautoref_5fci_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tracker/ssl_vision_wrapper_tracked.pb.h"
#include "vision/ssl_vision_detection.pb.h"
#include "vision/ssl_vision_geometry.pb.h"
#include "state/ssl_gc_referee_message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ci_2fautoref_2fssl_5fautoref_5fci_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ci_2fautoref_2fssl_5fautoref_5fci_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto;
class AutoRefCiInput;
struct AutoRefCiInputDefaultTypeInternal;
extern AutoRefCiInputDefaultTypeInternal _AutoRefCiInput_default_instance_;
class AutoRefCiOutput;
struct AutoRefCiOutputDefaultTypeInternal;
extern AutoRefCiOutputDefaultTypeInternal _AutoRefCiOutput_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AutoRefCiInput* Arena::CreateMaybeMessage<::AutoRefCiInput>(Arena*);
template<> ::AutoRefCiOutput* Arena::CreateMaybeMessage<::AutoRefCiOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AutoRefCiInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AutoRefCiInput) */ {
 public:
  inline AutoRefCiInput() : AutoRefCiInput(nullptr) {}
  ~AutoRefCiInput() override;
  explicit PROTOBUF_CONSTEXPR AutoRefCiInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoRefCiInput(const AutoRefCiInput& from);
  AutoRefCiInput(AutoRefCiInput&& from) noexcept
    : AutoRefCiInput() {
    *this = ::std::move(from);
  }

  inline AutoRefCiInput& operator=(const AutoRefCiInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefCiInput& operator=(AutoRefCiInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoRefCiInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoRefCiInput* internal_default_instance() {
    return reinterpret_cast<const AutoRefCiInput*>(
               &_AutoRefCiInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutoRefCiInput& a, AutoRefCiInput& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefCiInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoRefCiInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoRefCiInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutoRefCiInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoRefCiInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutoRefCiInput& from) {
    AutoRefCiInput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefCiInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AutoRefCiInput";
  }
  protected:
  explicit AutoRefCiInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionFieldNumber = 3,
    kRefereeMessageFieldNumber = 1,
    kTrackerWrapperPacketFieldNumber = 2,
    kGeometryFieldNumber = 4,
  };
  // repeated .SSL_DetectionFrame detection = 3;
  int detection_size() const;
  private:
  int _internal_detection_size() const;
  public:
  void clear_detection();
  ::SSL_DetectionFrame* mutable_detection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionFrame >*
      mutable_detection();
  private:
  const ::SSL_DetectionFrame& _internal_detection(int index) const;
  ::SSL_DetectionFrame* _internal_add_detection();
  public:
  const ::SSL_DetectionFrame& detection(int index) const;
  ::SSL_DetectionFrame* add_detection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionFrame >&
      detection() const;

  // optional .Referee referee_message = 1;
  bool has_referee_message() const;
  private:
  bool _internal_has_referee_message() const;
  public:
  void clear_referee_message();
  const ::Referee& referee_message() const;
  PROTOBUF_NODISCARD ::Referee* release_referee_message();
  ::Referee* mutable_referee_message();
  void set_allocated_referee_message(::Referee* referee_message);
  private:
  const ::Referee& _internal_referee_message() const;
  ::Referee* _internal_mutable_referee_message();
  public:
  void unsafe_arena_set_allocated_referee_message(
      ::Referee* referee_message);
  ::Referee* unsafe_arena_release_referee_message();

  // optional .TrackerWrapperPacket tracker_wrapper_packet = 2;
  bool has_tracker_wrapper_packet() const;
  private:
  bool _internal_has_tracker_wrapper_packet() const;
  public:
  void clear_tracker_wrapper_packet();
  const ::TrackerWrapperPacket& tracker_wrapper_packet() const;
  PROTOBUF_NODISCARD ::TrackerWrapperPacket* release_tracker_wrapper_packet();
  ::TrackerWrapperPacket* mutable_tracker_wrapper_packet();
  void set_allocated_tracker_wrapper_packet(::TrackerWrapperPacket* tracker_wrapper_packet);
  private:
  const ::TrackerWrapperPacket& _internal_tracker_wrapper_packet() const;
  ::TrackerWrapperPacket* _internal_mutable_tracker_wrapper_packet();
  public:
  void unsafe_arena_set_allocated_tracker_wrapper_packet(
      ::TrackerWrapperPacket* tracker_wrapper_packet);
  ::TrackerWrapperPacket* unsafe_arena_release_tracker_wrapper_packet();

  // optional .SSL_GeometryData geometry = 4;
  bool has_geometry() const;
  private:
  bool _internal_has_geometry() const;
  public:
  void clear_geometry();
  const ::SSL_GeometryData& geometry() const;
  PROTOBUF_NODISCARD ::SSL_GeometryData* release_geometry();
  ::SSL_GeometryData* mutable_geometry();
  void set_allocated_geometry(::SSL_GeometryData* geometry);
  private:
  const ::SSL_GeometryData& _internal_geometry() const;
  ::SSL_GeometryData* _internal_mutable_geometry();
  public:
  void unsafe_arena_set_allocated_geometry(
      ::SSL_GeometryData* geometry);
  ::SSL_GeometryData* unsafe_arena_release_geometry();

  // @@protoc_insertion_point(class_scope:AutoRefCiInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionFrame > detection_;
    ::Referee* referee_message_;
    ::TrackerWrapperPacket* tracker_wrapper_packet_;
    ::SSL_GeometryData* geometry_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ci_2fautoref_2fssl_5fautoref_5fci_2eproto;
};
// -------------------------------------------------------------------

class AutoRefCiOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AutoRefCiOutput) */ {
 public:
  inline AutoRefCiOutput() : AutoRefCiOutput(nullptr) {}
  ~AutoRefCiOutput() override;
  explicit PROTOBUF_CONSTEXPR AutoRefCiOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoRefCiOutput(const AutoRefCiOutput& from);
  AutoRefCiOutput(AutoRefCiOutput&& from) noexcept
    : AutoRefCiOutput() {
    *this = ::std::move(from);
  }

  inline AutoRefCiOutput& operator=(const AutoRefCiOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefCiOutput& operator=(AutoRefCiOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoRefCiOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoRefCiOutput* internal_default_instance() {
    return reinterpret_cast<const AutoRefCiOutput*>(
               &_AutoRefCiOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutoRefCiOutput& a, AutoRefCiOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefCiOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoRefCiOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoRefCiOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutoRefCiOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoRefCiOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutoRefCiOutput& from) {
    AutoRefCiOutput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefCiOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AutoRefCiOutput";
  }
  protected:
  explicit AutoRefCiOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackerWrapperPacketFieldNumber = 1,
  };
  // optional .TrackerWrapperPacket tracker_wrapper_packet = 1;
  bool has_tracker_wrapper_packet() const;
  private:
  bool _internal_has_tracker_wrapper_packet() const;
  public:
  void clear_tracker_wrapper_packet();
  const ::TrackerWrapperPacket& tracker_wrapper_packet() const;
  PROTOBUF_NODISCARD ::TrackerWrapperPacket* release_tracker_wrapper_packet();
  ::TrackerWrapperPacket* mutable_tracker_wrapper_packet();
  void set_allocated_tracker_wrapper_packet(::TrackerWrapperPacket* tracker_wrapper_packet);
  private:
  const ::TrackerWrapperPacket& _internal_tracker_wrapper_packet() const;
  ::TrackerWrapperPacket* _internal_mutable_tracker_wrapper_packet();
  public:
  void unsafe_arena_set_allocated_tracker_wrapper_packet(
      ::TrackerWrapperPacket* tracker_wrapper_packet);
  ::TrackerWrapperPacket* unsafe_arena_release_tracker_wrapper_packet();

  // @@protoc_insertion_point(class_scope:AutoRefCiOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TrackerWrapperPacket* tracker_wrapper_packet_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ci_2fautoref_2fssl_5fautoref_5fci_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutoRefCiInput

// optional .Referee referee_message = 1;
inline bool AutoRefCiInput::_internal_has_referee_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.referee_message_ != nullptr);
  return value;
}
inline bool AutoRefCiInput::has_referee_message() const {
  return _internal_has_referee_message();
}
inline const ::Referee& AutoRefCiInput::_internal_referee_message() const {
  const ::Referee* p = _impl_.referee_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::Referee&>(
      ::_Referee_default_instance_);
}
inline const ::Referee& AutoRefCiInput::referee_message() const {
  // @@protoc_insertion_point(field_get:AutoRefCiInput.referee_message)
  return _internal_referee_message();
}
inline void AutoRefCiInput::unsafe_arena_set_allocated_referee_message(
    ::Referee* referee_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.referee_message_);
  }
  _impl_.referee_message_ = referee_message;
  if (referee_message) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AutoRefCiInput.referee_message)
}
inline ::Referee* AutoRefCiInput::release_referee_message() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Referee* temp = _impl_.referee_message_;
  _impl_.referee_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Referee* AutoRefCiInput::unsafe_arena_release_referee_message() {
  // @@protoc_insertion_point(field_release:AutoRefCiInput.referee_message)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Referee* temp = _impl_.referee_message_;
  _impl_.referee_message_ = nullptr;
  return temp;
}
inline ::Referee* AutoRefCiInput::_internal_mutable_referee_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.referee_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::Referee>(GetArenaForAllocation());
    _impl_.referee_message_ = p;
  }
  return _impl_.referee_message_;
}
inline ::Referee* AutoRefCiInput::mutable_referee_message() {
  ::Referee* _msg = _internal_mutable_referee_message();
  // @@protoc_insertion_point(field_mutable:AutoRefCiInput.referee_message)
  return _msg;
}
inline void AutoRefCiInput::set_allocated_referee_message(::Referee* referee_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.referee_message_);
  }
  if (referee_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referee_message));
    if (message_arena != submessage_arena) {
      referee_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referee_message, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.referee_message_ = referee_message;
  // @@protoc_insertion_point(field_set_allocated:AutoRefCiInput.referee_message)
}

// optional .TrackerWrapperPacket tracker_wrapper_packet = 2;
inline bool AutoRefCiInput::_internal_has_tracker_wrapper_packet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tracker_wrapper_packet_ != nullptr);
  return value;
}
inline bool AutoRefCiInput::has_tracker_wrapper_packet() const {
  return _internal_has_tracker_wrapper_packet();
}
inline const ::TrackerWrapperPacket& AutoRefCiInput::_internal_tracker_wrapper_packet() const {
  const ::TrackerWrapperPacket* p = _impl_.tracker_wrapper_packet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TrackerWrapperPacket&>(
      ::_TrackerWrapperPacket_default_instance_);
}
inline const ::TrackerWrapperPacket& AutoRefCiInput::tracker_wrapper_packet() const {
  // @@protoc_insertion_point(field_get:AutoRefCiInput.tracker_wrapper_packet)
  return _internal_tracker_wrapper_packet();
}
inline void AutoRefCiInput::unsafe_arena_set_allocated_tracker_wrapper_packet(
    ::TrackerWrapperPacket* tracker_wrapper_packet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracker_wrapper_packet_);
  }
  _impl_.tracker_wrapper_packet_ = tracker_wrapper_packet;
  if (tracker_wrapper_packet) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AutoRefCiInput.tracker_wrapper_packet)
}
inline ::TrackerWrapperPacket* AutoRefCiInput::release_tracker_wrapper_packet() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TrackerWrapperPacket* temp = _impl_.tracker_wrapper_packet_;
  _impl_.tracker_wrapper_packet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TrackerWrapperPacket* AutoRefCiInput::unsafe_arena_release_tracker_wrapper_packet() {
  // @@protoc_insertion_point(field_release:AutoRefCiInput.tracker_wrapper_packet)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TrackerWrapperPacket* temp = _impl_.tracker_wrapper_packet_;
  _impl_.tracker_wrapper_packet_ = nullptr;
  return temp;
}
inline ::TrackerWrapperPacket* AutoRefCiInput::_internal_mutable_tracker_wrapper_packet() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tracker_wrapper_packet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TrackerWrapperPacket>(GetArenaForAllocation());
    _impl_.tracker_wrapper_packet_ = p;
  }
  return _impl_.tracker_wrapper_packet_;
}
inline ::TrackerWrapperPacket* AutoRefCiInput::mutable_tracker_wrapper_packet() {
  ::TrackerWrapperPacket* _msg = _internal_mutable_tracker_wrapper_packet();
  // @@protoc_insertion_point(field_mutable:AutoRefCiInput.tracker_wrapper_packet)
  return _msg;
}
inline void AutoRefCiInput::set_allocated_tracker_wrapper_packet(::TrackerWrapperPacket* tracker_wrapper_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracker_wrapper_packet_);
  }
  if (tracker_wrapper_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracker_wrapper_packet));
    if (message_arena != submessage_arena) {
      tracker_wrapper_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracker_wrapper_packet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tracker_wrapper_packet_ = tracker_wrapper_packet;
  // @@protoc_insertion_point(field_set_allocated:AutoRefCiInput.tracker_wrapper_packet)
}

// repeated .SSL_DetectionFrame detection = 3;
inline int AutoRefCiInput::_internal_detection_size() const {
  return _impl_.detection_.size();
}
inline int AutoRefCiInput::detection_size() const {
  return _internal_detection_size();
}
inline ::SSL_DetectionFrame* AutoRefCiInput::mutable_detection(int index) {
  // @@protoc_insertion_point(field_mutable:AutoRefCiInput.detection)
  return _impl_.detection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionFrame >*
AutoRefCiInput::mutable_detection() {
  // @@protoc_insertion_point(field_mutable_list:AutoRefCiInput.detection)
  return &_impl_.detection_;
}
inline const ::SSL_DetectionFrame& AutoRefCiInput::_internal_detection(int index) const {
  return _impl_.detection_.Get(index);
}
inline const ::SSL_DetectionFrame& AutoRefCiInput::detection(int index) const {
  // @@protoc_insertion_point(field_get:AutoRefCiInput.detection)
  return _internal_detection(index);
}
inline ::SSL_DetectionFrame* AutoRefCiInput::_internal_add_detection() {
  return _impl_.detection_.Add();
}
inline ::SSL_DetectionFrame* AutoRefCiInput::add_detection() {
  ::SSL_DetectionFrame* _add = _internal_add_detection();
  // @@protoc_insertion_point(field_add:AutoRefCiInput.detection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionFrame >&
AutoRefCiInput::detection() const {
  // @@protoc_insertion_point(field_list:AutoRefCiInput.detection)
  return _impl_.detection_;
}

// optional .SSL_GeometryData geometry = 4;
inline bool AutoRefCiInput::_internal_has_geometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.geometry_ != nullptr);
  return value;
}
inline bool AutoRefCiInput::has_geometry() const {
  return _internal_has_geometry();
}
inline const ::SSL_GeometryData& AutoRefCiInput::_internal_geometry() const {
  const ::SSL_GeometryData* p = _impl_.geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSL_GeometryData&>(
      ::_SSL_GeometryData_default_instance_);
}
inline const ::SSL_GeometryData& AutoRefCiInput::geometry() const {
  // @@protoc_insertion_point(field_get:AutoRefCiInput.geometry)
  return _internal_geometry();
}
inline void AutoRefCiInput::unsafe_arena_set_allocated_geometry(
    ::SSL_GeometryData* geometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geometry_);
  }
  _impl_.geometry_ = geometry;
  if (geometry) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AutoRefCiInput.geometry)
}
inline ::SSL_GeometryData* AutoRefCiInput::release_geometry() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::SSL_GeometryData* temp = _impl_.geometry_;
  _impl_.geometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SSL_GeometryData* AutoRefCiInput::unsafe_arena_release_geometry() {
  // @@protoc_insertion_point(field_release:AutoRefCiInput.geometry)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::SSL_GeometryData* temp = _impl_.geometry_;
  _impl_.geometry_ = nullptr;
  return temp;
}
inline ::SSL_GeometryData* AutoRefCiInput::_internal_mutable_geometry() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_GeometryData>(GetArenaForAllocation());
    _impl_.geometry_ = p;
  }
  return _impl_.geometry_;
}
inline ::SSL_GeometryData* AutoRefCiInput::mutable_geometry() {
  ::SSL_GeometryData* _msg = _internal_mutable_geometry();
  // @@protoc_insertion_point(field_mutable:AutoRefCiInput.geometry)
  return _msg;
}
inline void AutoRefCiInput::set_allocated_geometry(::SSL_GeometryData* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geometry_);
  }
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry));
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:AutoRefCiInput.geometry)
}

// -------------------------------------------------------------------

// AutoRefCiOutput

// optional .TrackerWrapperPacket tracker_wrapper_packet = 1;
inline bool AutoRefCiOutput::_internal_has_tracker_wrapper_packet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tracker_wrapper_packet_ != nullptr);
  return value;
}
inline bool AutoRefCiOutput::has_tracker_wrapper_packet() const {
  return _internal_has_tracker_wrapper_packet();
}
inline const ::TrackerWrapperPacket& AutoRefCiOutput::_internal_tracker_wrapper_packet() const {
  const ::TrackerWrapperPacket* p = _impl_.tracker_wrapper_packet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TrackerWrapperPacket&>(
      ::_TrackerWrapperPacket_default_instance_);
}
inline const ::TrackerWrapperPacket& AutoRefCiOutput::tracker_wrapper_packet() const {
  // @@protoc_insertion_point(field_get:AutoRefCiOutput.tracker_wrapper_packet)
  return _internal_tracker_wrapper_packet();
}
inline void AutoRefCiOutput::unsafe_arena_set_allocated_tracker_wrapper_packet(
    ::TrackerWrapperPacket* tracker_wrapper_packet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracker_wrapper_packet_);
  }
  _impl_.tracker_wrapper_packet_ = tracker_wrapper_packet;
  if (tracker_wrapper_packet) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AutoRefCiOutput.tracker_wrapper_packet)
}
inline ::TrackerWrapperPacket* AutoRefCiOutput::release_tracker_wrapper_packet() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TrackerWrapperPacket* temp = _impl_.tracker_wrapper_packet_;
  _impl_.tracker_wrapper_packet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TrackerWrapperPacket* AutoRefCiOutput::unsafe_arena_release_tracker_wrapper_packet() {
  // @@protoc_insertion_point(field_release:AutoRefCiOutput.tracker_wrapper_packet)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TrackerWrapperPacket* temp = _impl_.tracker_wrapper_packet_;
  _impl_.tracker_wrapper_packet_ = nullptr;
  return temp;
}
inline ::TrackerWrapperPacket* AutoRefCiOutput::_internal_mutable_tracker_wrapper_packet() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tracker_wrapper_packet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TrackerWrapperPacket>(GetArenaForAllocation());
    _impl_.tracker_wrapper_packet_ = p;
  }
  return _impl_.tracker_wrapper_packet_;
}
inline ::TrackerWrapperPacket* AutoRefCiOutput::mutable_tracker_wrapper_packet() {
  ::TrackerWrapperPacket* _msg = _internal_mutable_tracker_wrapper_packet();
  // @@protoc_insertion_point(field_mutable:AutoRefCiOutput.tracker_wrapper_packet)
  return _msg;
}
inline void AutoRefCiOutput::set_allocated_tracker_wrapper_packet(::TrackerWrapperPacket* tracker_wrapper_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracker_wrapper_packet_);
  }
  if (tracker_wrapper_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracker_wrapper_packet));
    if (message_arena != submessage_arena) {
      tracker_wrapper_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracker_wrapper_packet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tracker_wrapper_packet_ = tracker_wrapper_packet;
  // @@protoc_insertion_point(field_set_allocated:AutoRefCiOutput.tracker_wrapper_packet)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ci_2fautoref_2fssl_5fautoref_5fci_2eproto
