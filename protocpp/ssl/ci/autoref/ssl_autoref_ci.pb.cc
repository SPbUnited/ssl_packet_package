// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ci/autoref/ssl_autoref_ci.proto

#include "ci/autoref/ssl_autoref_ci.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR AutoRefCiInput::AutoRefCiInput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.detection_)*/{}
  , /*decltype(_impl_.referee_message_)*/nullptr
  , /*decltype(_impl_.tracker_wrapper_packet_)*/nullptr
  , /*decltype(_impl_.geometry_)*/nullptr} {}
struct AutoRefCiInputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoRefCiInputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoRefCiInputDefaultTypeInternal() {}
  union {
    AutoRefCiInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoRefCiInputDefaultTypeInternal _AutoRefCiInput_default_instance_;
PROTOBUF_CONSTEXPR AutoRefCiOutput::AutoRefCiOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tracker_wrapper_packet_)*/nullptr} {}
struct AutoRefCiOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoRefCiOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoRefCiOutputDefaultTypeInternal() {}
  union {
    AutoRefCiOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoRefCiOutputDefaultTypeInternal _AutoRefCiOutput_default_instance_;
static ::_pb::Metadata file_level_metadata_ci_2fautoref_2fssl_5fautoref_5fci_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ci_2fautoref_2fssl_5fautoref_5fci_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ci_2fautoref_2fssl_5fautoref_5fci_2eproto = nullptr;

const uint32_t TableStruct_ci_2fautoref_2fssl_5fautoref_5fci_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AutoRefCiInput, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AutoRefCiInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AutoRefCiInput, _impl_.referee_message_),
  PROTOBUF_FIELD_OFFSET(::AutoRefCiInput, _impl_.tracker_wrapper_packet_),
  PROTOBUF_FIELD_OFFSET(::AutoRefCiInput, _impl_.detection_),
  PROTOBUF_FIELD_OFFSET(::AutoRefCiInput, _impl_.geometry_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::AutoRefCiOutput, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AutoRefCiOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AutoRefCiOutput, _impl_.tracker_wrapper_packet_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::AutoRefCiInput)},
  { 14, 21, -1, sizeof(::AutoRefCiOutput)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_AutoRefCiInput_default_instance_._instance,
  &::_AutoRefCiOutput_default_instance_._instance,
};

const char descriptor_table_protodef_ci_2fautoref_2fssl_5fautoref_5fci_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037ci/autoref/ssl_autoref_ci.proto\032(track"
  "er/ssl_vision_wrapper_tracked.proto\032!vis"
  "ion/ssl_vision_detection.proto\032 vision/s"
  "sl_vision_geometry.proto\032\"state/ssl_gc_r"
  "eferee_message.proto\"\267\001\n\016AutoRefCiInput\022"
  "!\n\017referee_message\030\001 \001(\0132\010.Referee\0225\n\026tr"
  "acker_wrapper_packet\030\002 \001(\0132\025.TrackerWrap"
  "perPacket\022&\n\tdetection\030\003 \003(\0132\023.SSL_Detec"
  "tionFrame\022#\n\010geometry\030\004 \001(\0132\021.SSL_Geomet"
  "ryData\"H\n\017AutoRefCiOutput\0225\n\026tracker_wra"
  "pper_packet\030\001 \001(\0132\025.TrackerWrapperPacket"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto_deps[4] = {
  &::descriptor_table_state_2fssl_5fgc_5freferee_5fmessage_2eproto,
  &::descriptor_table_tracker_2fssl_5fvision_5fwrapper_5ftracked_2eproto,
  &::descriptor_table_vision_2fssl_5fvision_5fdetection_2eproto,
  &::descriptor_table_vision_2fssl_5fvision_5fgeometry_2eproto,
};
static ::_pbi::once_flag descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto = {
    false, false, 440, descriptor_table_protodef_ci_2fautoref_2fssl_5fautoref_5fci_2eproto,
    "ci/autoref/ssl_autoref_ci.proto",
    &descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto_once, descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto_deps, 4, 2,
    schemas, file_default_instances, TableStruct_ci_2fautoref_2fssl_5fautoref_5fci_2eproto::offsets,
    file_level_metadata_ci_2fautoref_2fssl_5fautoref_5fci_2eproto, file_level_enum_descriptors_ci_2fautoref_2fssl_5fautoref_5fci_2eproto,
    file_level_service_descriptors_ci_2fautoref_2fssl_5fautoref_5fci_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto_getter() {
  return &descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ci_2fautoref_2fssl_5fautoref_5fci_2eproto(&descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto);

// ===================================================================

class AutoRefCiInput::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoRefCiInput>()._impl_._has_bits_);
  static const ::Referee& referee_message(const AutoRefCiInput* msg);
  static void set_has_referee_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TrackerWrapperPacket& tracker_wrapper_packet(const AutoRefCiInput* msg);
  static void set_has_tracker_wrapper_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SSL_GeometryData& geometry(const AutoRefCiInput* msg);
  static void set_has_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Referee&
AutoRefCiInput::_Internal::referee_message(const AutoRefCiInput* msg) {
  return *msg->_impl_.referee_message_;
}
const ::TrackerWrapperPacket&
AutoRefCiInput::_Internal::tracker_wrapper_packet(const AutoRefCiInput* msg) {
  return *msg->_impl_.tracker_wrapper_packet_;
}
const ::SSL_GeometryData&
AutoRefCiInput::_Internal::geometry(const AutoRefCiInput* msg) {
  return *msg->_impl_.geometry_;
}
void AutoRefCiInput::clear_referee_message() {
  if (_impl_.referee_message_ != nullptr) _impl_.referee_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AutoRefCiInput::clear_tracker_wrapper_packet() {
  if (_impl_.tracker_wrapper_packet_ != nullptr) _impl_.tracker_wrapper_packet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AutoRefCiInput::clear_detection() {
  _impl_.detection_.Clear();
}
void AutoRefCiInput::clear_geometry() {
  if (_impl_.geometry_ != nullptr) _impl_.geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AutoRefCiInput::AutoRefCiInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AutoRefCiInput)
}
AutoRefCiInput::AutoRefCiInput(const AutoRefCiInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutoRefCiInput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detection_){from._impl_.detection_}
    , decltype(_impl_.referee_message_){nullptr}
    , decltype(_impl_.tracker_wrapper_packet_){nullptr}
    , decltype(_impl_.geometry_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_referee_message()) {
    _this->_impl_.referee_message_ = new ::Referee(*from._impl_.referee_message_);
  }
  if (from._internal_has_tracker_wrapper_packet()) {
    _this->_impl_.tracker_wrapper_packet_ = new ::TrackerWrapperPacket(*from._impl_.tracker_wrapper_packet_);
  }
  if (from._internal_has_geometry()) {
    _this->_impl_.geometry_ = new ::SSL_GeometryData(*from._impl_.geometry_);
  }
  // @@protoc_insertion_point(copy_constructor:AutoRefCiInput)
}

inline void AutoRefCiInput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detection_){arena}
    , decltype(_impl_.referee_message_){nullptr}
    , decltype(_impl_.tracker_wrapper_packet_){nullptr}
    , decltype(_impl_.geometry_){nullptr}
  };
}

AutoRefCiInput::~AutoRefCiInput() {
  // @@protoc_insertion_point(destructor:AutoRefCiInput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutoRefCiInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detection_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.referee_message_;
  if (this != internal_default_instance()) delete _impl_.tracker_wrapper_packet_;
  if (this != internal_default_instance()) delete _impl_.geometry_;
}

void AutoRefCiInput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoRefCiInput::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefCiInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detection_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.referee_message_ != nullptr);
      _impl_.referee_message_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tracker_wrapper_packet_ != nullptr);
      _impl_.tracker_wrapper_packet_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.geometry_ != nullptr);
      _impl_.geometry_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefCiInput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Referee referee_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_referee_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TrackerWrapperPacket tracker_wrapper_packet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracker_wrapper_packet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SSL_DetectionFrame detection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .SSL_GeometryData geometry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoRefCiInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefCiInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Referee referee_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::referee_message(this),
        _Internal::referee_message(this).GetCachedSize(), target, stream);
  }

  // optional .TrackerWrapperPacket tracker_wrapper_packet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tracker_wrapper_packet(this),
        _Internal::tracker_wrapper_packet(this).GetCachedSize(), target, stream);
  }

  // repeated .SSL_DetectionFrame detection = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detection_size()); i < n; i++) {
    const auto& repfield = this->_internal_detection(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .SSL_GeometryData geometry = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::geometry(this),
        _Internal::geometry(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefCiInput)
  return target;
}

size_t AutoRefCiInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefCiInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SSL_DetectionFrame detection = 3;
  total_size += 1UL * this->_internal_detection_size();
  for (const auto& msg : this->_impl_.detection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Referee referee_message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.referee_message_);
    }

    // optional .TrackerWrapperPacket tracker_wrapper_packet = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tracker_wrapper_packet_);
    }

    // optional .SSL_GeometryData geometry = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.geometry_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoRefCiInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutoRefCiInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoRefCiInput::GetClassData() const { return &_class_data_; }


void AutoRefCiInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutoRefCiInput*>(&to_msg);
  auto& from = static_cast<const AutoRefCiInput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AutoRefCiInput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.detection_.MergeFrom(from._impl_.detection_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_referee_message()->::Referee::MergeFrom(
          from._internal_referee_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tracker_wrapper_packet()->::TrackerWrapperPacket::MergeFrom(
          from._internal_tracker_wrapper_packet());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_geometry()->::SSL_GeometryData::MergeFrom(
          from._internal_geometry());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoRefCiInput::CopyFrom(const AutoRefCiInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefCiInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefCiInput::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.detection_))
    return false;
  if (_internal_has_referee_message()) {
    if (!_impl_.referee_message_->IsInitialized()) return false;
  }
  if (_internal_has_tracker_wrapper_packet()) {
    if (!_impl_.tracker_wrapper_packet_->IsInitialized()) return false;
  }
  if (_internal_has_geometry()) {
    if (!_impl_.geometry_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefCiInput::InternalSwap(AutoRefCiInput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.detection_.InternalSwap(&other->_impl_.detection_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoRefCiInput, _impl_.geometry_)
      + sizeof(AutoRefCiInput::_impl_.geometry_)
      - PROTOBUF_FIELD_OFFSET(AutoRefCiInput, _impl_.referee_message_)>(
          reinterpret_cast<char*>(&_impl_.referee_message_),
          reinterpret_cast<char*>(&other->_impl_.referee_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefCiInput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto_getter, &descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto_once,
      file_level_metadata_ci_2fautoref_2fssl_5fautoref_5fci_2eproto[0]);
}

// ===================================================================

class AutoRefCiOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoRefCiOutput>()._impl_._has_bits_);
  static const ::TrackerWrapperPacket& tracker_wrapper_packet(const AutoRefCiOutput* msg);
  static void set_has_tracker_wrapper_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TrackerWrapperPacket&
AutoRefCiOutput::_Internal::tracker_wrapper_packet(const AutoRefCiOutput* msg) {
  return *msg->_impl_.tracker_wrapper_packet_;
}
void AutoRefCiOutput::clear_tracker_wrapper_packet() {
  if (_impl_.tracker_wrapper_packet_ != nullptr) _impl_.tracker_wrapper_packet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AutoRefCiOutput::AutoRefCiOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AutoRefCiOutput)
}
AutoRefCiOutput::AutoRefCiOutput(const AutoRefCiOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutoRefCiOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracker_wrapper_packet_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tracker_wrapper_packet()) {
    _this->_impl_.tracker_wrapper_packet_ = new ::TrackerWrapperPacket(*from._impl_.tracker_wrapper_packet_);
  }
  // @@protoc_insertion_point(copy_constructor:AutoRefCiOutput)
}

inline void AutoRefCiOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracker_wrapper_packet_){nullptr}
  };
}

AutoRefCiOutput::~AutoRefCiOutput() {
  // @@protoc_insertion_point(destructor:AutoRefCiOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutoRefCiOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tracker_wrapper_packet_;
}

void AutoRefCiOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoRefCiOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefCiOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.tracker_wrapper_packet_ != nullptr);
    _impl_.tracker_wrapper_packet_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefCiOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TrackerWrapperPacket tracker_wrapper_packet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracker_wrapper_packet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoRefCiOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefCiOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TrackerWrapperPacket tracker_wrapper_packet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tracker_wrapper_packet(this),
        _Internal::tracker_wrapper_packet(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefCiOutput)
  return target;
}

size_t AutoRefCiOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefCiOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TrackerWrapperPacket tracker_wrapper_packet = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tracker_wrapper_packet_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoRefCiOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutoRefCiOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoRefCiOutput::GetClassData() const { return &_class_data_; }


void AutoRefCiOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutoRefCiOutput*>(&to_msg);
  auto& from = static_cast<const AutoRefCiOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AutoRefCiOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tracker_wrapper_packet()) {
    _this->_internal_mutable_tracker_wrapper_packet()->::TrackerWrapperPacket::MergeFrom(
        from._internal_tracker_wrapper_packet());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoRefCiOutput::CopyFrom(const AutoRefCiOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefCiOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefCiOutput::IsInitialized() const {
  if (_internal_has_tracker_wrapper_packet()) {
    if (!_impl_.tracker_wrapper_packet_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefCiOutput::InternalSwap(AutoRefCiOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.tracker_wrapper_packet_, other->_impl_.tracker_wrapper_packet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefCiOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto_getter, &descriptor_table_ci_2fautoref_2fssl_5fautoref_5fci_2eproto_once,
      file_level_metadata_ci_2fautoref_2fssl_5fautoref_5fci_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AutoRefCiInput*
Arena::CreateMaybeMessage< ::AutoRefCiInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefCiInput >(arena);
}
template<> PROTOBUF_NOINLINE ::AutoRefCiOutput*
Arena::CreateMaybeMessage< ::AutoRefCiOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefCiOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
